import {
  __commonJS,
  __require
} from "./chunk-AUZ3RYOM.js";

// node_modules/moment/min/moment-with-locales.min.js
var require_moment_with_locales_min = __commonJS({
  "node_modules/moment/min/moment-with-locales.min.js"(exports, module) {
    !function(e, a) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = a() : "function" == typeof define && define.amd ? define(a) : e.moment = a();
    }(exports, function() {
      "use strict";
      var E;
      function c() {
        return E.apply(null, arguments);
      }
      function F(e2) {
        return e2 instanceof Array || "[object Array]" === Object.prototype.toString.call(e2);
      }
      function z(e2) {
        return null != e2 && "[object Object]" === Object.prototype.toString.call(e2);
      }
      function l(e2, a2) {
        return Object.prototype.hasOwnProperty.call(e2, a2);
      }
      function N(e2) {
        if (Object.getOwnPropertyNames)
          return 0 === Object.getOwnPropertyNames(e2).length;
        for (var a2 in e2)
          if (l(e2, a2))
            return;
        return 1;
      }
      function L(e2) {
        return void 0 === e2;
      }
      function J(e2) {
        return "number" == typeof e2 || "[object Number]" === Object.prototype.toString.call(e2);
      }
      function R(e2) {
        return e2 instanceof Date || "[object Date]" === Object.prototype.toString.call(e2);
      }
      function C(e2, a2) {
        for (var t2 = [], s2 = e2.length, n2 = 0; n2 < s2; ++n2)
          t2.push(a2(e2[n2], n2));
        return t2;
      }
      function I(e2, a2) {
        for (var t2 in a2)
          l(a2, t2) && (e2[t2] = a2[t2]);
        return l(a2, "toString") && (e2.toString = a2.toString), l(a2, "valueOf") && (e2.valueOf = a2.valueOf), e2;
      }
      function U(e2, a2, t2, s2) {
        return Na(e2, a2, t2, s2, true).utc();
      }
      function Y(e2) {
        return null == e2._pf && (e2._pf = { empty: false, unusedTokens: [], unusedInput: [], overflow: -2, charsLeftOver: 0, nullInput: false, invalidEra: null, invalidMonth: null, invalidFormat: false, userInvalidated: false, iso: false, parsedDateParts: [], era: null, meridiem: null, rfc2822: false, weekdayMismatch: false }), e2._pf;
      }
      function G(e2) {
        var a2, t2, s2 = e2._d && !isNaN(e2._d.getTime());
        return s2 && (a2 = Y(e2), t2 = q.call(a2.parsedDateParts, function(e3) {
          return null != e3;
        }), s2 = a2.overflow < 0 && !a2.empty && !a2.invalidEra && !a2.invalidMonth && !a2.invalidWeekday && !a2.weekdayMismatch && !a2.nullInput && !a2.invalidFormat && !a2.userInvalidated && (!a2.meridiem || a2.meridiem && t2), e2._strict) && (s2 = s2 && 0 === a2.charsLeftOver && 0 === a2.unusedTokens.length && void 0 === a2.bigHour), null != Object.isFrozen && Object.isFrozen(e2) ? s2 : (e2._isValid = s2, e2._isValid);
      }
      function V(e2) {
        var a2 = U(NaN);
        return null != e2 ? I(Y(a2), e2) : Y(a2).userInvalidated = true, a2;
      }
      var q = Array.prototype.some || function(e2) {
        for (var a2 = Object(this), t2 = a2.length >>> 0, s2 = 0; s2 < t2; s2++)
          if (s2 in a2 && e2.call(this, a2[s2], s2, a2))
            return true;
        return false;
      }, B = c.momentProperties = [], K = false;
      function Z(e2, a2) {
        var t2, s2, n2, r2 = B.length;
        if (L(a2._isAMomentObject) || (e2._isAMomentObject = a2._isAMomentObject), L(a2._i) || (e2._i = a2._i), L(a2._f) || (e2._f = a2._f), L(a2._l) || (e2._l = a2._l), L(a2._strict) || (e2._strict = a2._strict), L(a2._tzm) || (e2._tzm = a2._tzm), L(a2._isUTC) || (e2._isUTC = a2._isUTC), L(a2._offset) || (e2._offset = a2._offset), L(a2._pf) || (e2._pf = Y(a2)), L(a2._locale) || (e2._locale = a2._locale), 0 < r2)
          for (t2 = 0; t2 < r2; t2++)
            L(n2 = a2[s2 = B[t2]]) || (e2[s2] = n2);
        return e2;
      }
      function $(e2) {
        Z(this, e2), this._d = new Date(null != e2._d ? e2._d.getTime() : NaN), this.isValid() || (this._d = /* @__PURE__ */ new Date(NaN)), false === K && (K = true, c.updateOffset(this), K = false);
      }
      function Q(e2) {
        return e2 instanceof $ || null != e2 && null != e2._isAMomentObject;
      }
      function X(e2) {
        false === c.suppressDeprecationWarnings && "undefined" != typeof console && console.warn && console.warn("Deprecation warning: " + e2);
      }
      function e(r2, d2) {
        var _2 = true;
        return I(function() {
          if (null != c.deprecationHandler && c.deprecationHandler(null, r2), _2) {
            for (var e2, a2, t2 = [], s2 = arguments.length, n2 = 0; n2 < s2; n2++) {
              if (e2 = "", "object" == typeof arguments[n2]) {
                for (a2 in e2 += "\n[" + n2 + "] ", arguments[0])
                  l(arguments[0], a2) && (e2 += a2 + ": " + arguments[0][a2] + ", ");
                e2 = e2.slice(0, -2);
              } else
                e2 = arguments[n2];
              t2.push(e2);
            }
            X(r2 + "\nArguments: " + Array.prototype.slice.call(t2).join("") + "\n" + new Error().stack), _2 = false;
          }
          return d2.apply(this, arguments);
        }, d2);
      }
      var ee = {};
      function ae(e2, a2) {
        null != c.deprecationHandler && c.deprecationHandler(e2, a2), ee[e2] || (X(a2), ee[e2] = true);
      }
      function te(e2) {
        return "undefined" != typeof Function && e2 instanceof Function || "[object Function]" === Object.prototype.toString.call(e2);
      }
      function se(e2, a2) {
        var t2, s2 = I({}, e2);
        for (t2 in a2)
          l(a2, t2) && (z(e2[t2]) && z(a2[t2]) ? (s2[t2] = {}, I(s2[t2], e2[t2]), I(s2[t2], a2[t2])) : null != a2[t2] ? s2[t2] = a2[t2] : delete s2[t2]);
        for (t2 in e2)
          l(e2, t2) && !l(a2, t2) && z(e2[t2]) && (s2[t2] = I({}, s2[t2]));
        return s2;
      }
      function ne(e2) {
        null != e2 && this.set(e2);
      }
      c.suppressDeprecationWarnings = false, c.deprecationHandler = null;
      var re = Object.keys || function(e2) {
        var a2, t2 = [];
        for (a2 in e2)
          l(e2, a2) && t2.push(a2);
        return t2;
      };
      function de(e2, a2, t2) {
        var s2 = "" + Math.abs(e2);
        return (0 <= e2 ? t2 ? "+" : "" : "-") + Math.pow(10, Math.max(0, a2 - s2.length)).toString().substr(1) + s2;
      }
      var _e = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, ie = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, oe = {}, me = {};
      function s(e2, a2, t2, s2) {
        var n2 = "string" == typeof s2 ? function() {
          return this[s2]();
        } : s2;
        e2 && (me[e2] = n2), a2 && (me[a2[0]] = function() {
          return de(n2.apply(this, arguments), a2[1], a2[2]);
        }), t2 && (me[t2] = function() {
          return this.localeData().ordinal(n2.apply(this, arguments), e2);
        });
      }
      function ue(e2, a2) {
        return e2.isValid() ? (a2 = le(a2, e2.localeData()), oe[a2] = oe[a2] || function(s2) {
          for (var e3, n2 = s2.match(_e), a3 = 0, r2 = n2.length; a3 < r2; a3++)
            me[n2[a3]] ? n2[a3] = me[n2[a3]] : n2[a3] = (e3 = n2[a3]).match(/\[[\s\S]/) ? e3.replace(/^\[|\]$/g, "") : e3.replace(/\\/g, "");
          return function(e4) {
            for (var a4 = "", t2 = 0; t2 < r2; t2++)
              a4 += te(n2[t2]) ? n2[t2].call(e4, s2) : n2[t2];
            return a4;
          };
        }(a2), oe[a2](e2)) : e2.localeData().invalidDate();
      }
      function le(e2, a2) {
        var t2 = 5;
        function s2(e3) {
          return a2.longDateFormat(e3) || e3;
        }
        for (ie.lastIndex = 0; 0 <= t2 && ie.test(e2); )
          e2 = e2.replace(ie, s2), ie.lastIndex = 0, --t2;
        return e2;
      }
      var Me = { D: "date", dates: "date", date: "date", d: "day", days: "day", day: "day", e: "weekday", weekdays: "weekday", weekday: "weekday", E: "isoWeekday", isoweekdays: "isoWeekday", isoweekday: "isoWeekday", DDD: "dayOfYear", dayofyears: "dayOfYear", dayofyear: "dayOfYear", h: "hour", hours: "hour", hour: "hour", ms: "millisecond", milliseconds: "millisecond", millisecond: "millisecond", m: "minute", minutes: "minute", minute: "minute", M: "month", months: "month", month: "month", Q: "quarter", quarters: "quarter", quarter: "quarter", s: "second", seconds: "second", second: "second", gg: "weekYear", weekyears: "weekYear", weekyear: "weekYear", GG: "isoWeekYear", isoweekyears: "isoWeekYear", isoweekyear: "isoWeekYear", w: "week", weeks: "week", week: "week", W: "isoWeek", isoweeks: "isoWeek", isoweek: "isoWeek", y: "year", years: "year", year: "year" };
      function d(e2) {
        return "string" == typeof e2 ? Me[e2] || Me[e2.toLowerCase()] : void 0;
      }
      function he(e2) {
        var a2, t2, s2 = {};
        for (t2 in e2)
          l(e2, t2) && (a2 = d(t2)) && (s2[a2] = e2[t2]);
        return s2;
      }
      var ce = { date: 9, day: 11, weekday: 11, isoWeekday: 11, dayOfYear: 4, hour: 13, millisecond: 16, minute: 14, month: 8, quarter: 7, second: 15, weekYear: 1, isoWeekYear: 1, week: 5, isoWeek: 5, year: 1 };
      var Le = /\d/, a = /\d\d/, Ye = /\d{3}/, t = /\d{4}/, n = /[+-]?\d{6}/, r = /\d\d?/, ye = /\d\d\d\d?/, _ = /\d\d\d\d\d\d?/, fe = /\d{1,3}/, i = /\d{1,4}/, o = /[+-]?\d{1,6}/, ke = /\d+/, pe = /[+-]?\d+/, De = /Z|[+-]\d\d:?\d\d/gi, Te = /Z|[+-]\d\d(?::?\d\d)?/gi, m = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, u = /^[1-9]\d?/, M = /^([1-9]\d|\d)/;
      function h(e2, t2, s2) {
        be[e2] = te(t2) ? t2 : function(e3, a2) {
          return e3 && s2 ? s2 : t2;
        };
      }
      function ge(e2, a2) {
        return l(be, e2) ? be[e2](a2._strict, a2._locale) : new RegExp(we(e2.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(e3, a3, t2, s2, n2) {
          return a3 || t2 || s2 || n2;
        })));
      }
      function we(e2) {
        return e2.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      function y(e2) {
        return e2 < 0 ? Math.ceil(e2) || 0 : Math.floor(e2);
      }
      function f(e2) {
        var e2 = +e2, a2 = 0;
        return a2 = 0 != e2 && isFinite(e2) ? y(e2) : a2;
      }
      var be = {}, He = {};
      function k(e2, t2) {
        var a2, s2, n2 = t2;
        for ("string" == typeof e2 && (e2 = [e2]), J(t2) && (n2 = function(e3, a3) {
          a3[t2] = f(e3);
        }), s2 = e2.length, a2 = 0; a2 < s2; a2++)
          He[e2[a2]] = n2;
      }
      function Se(e2, n2) {
        k(e2, function(e3, a2, t2, s2) {
          t2._w = t2._w || {}, n2(e3, t2._w, t2, s2);
        });
      }
      function ve(e2) {
        return e2 % 4 == 0 && e2 % 100 != 0 || e2 % 400 == 0;
      }
      var p = 0, je = 1, xe = 2, D = 3, Pe = 4, Oe = 5, We = 6, Ae = 7, Ee = 8;
      function Fe(e2) {
        return ve(e2) ? 366 : 365;
      }
      s("Y", 0, 0, function() {
        var e2 = this.year();
        return e2 <= 9999 ? de(e2, 4) : "+" + e2;
      }), s(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      }), s(0, ["YYYY", 4], 0, "year"), s(0, ["YYYYY", 5], 0, "year"), s(0, ["YYYYYY", 6, true], 0, "year"), h("Y", pe), h("YY", r, a), h("YYYY", i, t), h("YYYYY", o, n), h("YYYYYY", o, n), k(["YYYYY", "YYYYYY"], p), k("YYYY", function(e2, a2) {
        a2[p] = 2 === e2.length ? c.parseTwoDigitYear(e2) : f(e2);
      }), k("YY", function(e2, a2) {
        a2[p] = c.parseTwoDigitYear(e2);
      }), k("Y", function(e2, a2) {
        a2[p] = parseInt(e2, 10);
      }), c.parseTwoDigitYear = function(e2) {
        return f(e2) + (68 < f(e2) ? 1900 : 2e3);
      };
      var T, ze = Ne("FullYear", true);
      function Ne(a2, t2) {
        return function(e2) {
          return null != e2 ? (Re(this, a2, e2), c.updateOffset(this, t2), this) : Je(this, a2);
        };
      }
      function Je(e2, a2) {
        if (!e2.isValid())
          return NaN;
        var t2 = e2._d, s2 = e2._isUTC;
        switch (a2) {
          case "Milliseconds":
            return s2 ? t2.getUTCMilliseconds() : t2.getMilliseconds();
          case "Seconds":
            return s2 ? t2.getUTCSeconds() : t2.getSeconds();
          case "Minutes":
            return s2 ? t2.getUTCMinutes() : t2.getMinutes();
          case "Hours":
            return s2 ? t2.getUTCHours() : t2.getHours();
          case "Date":
            return s2 ? t2.getUTCDate() : t2.getDate();
          case "Day":
            return s2 ? t2.getUTCDay() : t2.getDay();
          case "Month":
            return s2 ? t2.getUTCMonth() : t2.getMonth();
          case "FullYear":
            return s2 ? t2.getUTCFullYear() : t2.getFullYear();
          default:
            return NaN;
        }
      }
      function Re(e2, a2, t2) {
        var s2, n2, r2;
        if (e2.isValid() && !isNaN(t2)) {
          switch (s2 = e2._d, n2 = e2._isUTC, a2) {
            case "Milliseconds":
              return n2 ? s2.setUTCMilliseconds(t2) : s2.setMilliseconds(t2);
            case "Seconds":
              return n2 ? s2.setUTCSeconds(t2) : s2.setSeconds(t2);
            case "Minutes":
              return n2 ? s2.setUTCMinutes(t2) : s2.setMinutes(t2);
            case "Hours":
              return n2 ? s2.setUTCHours(t2) : s2.setHours(t2);
            case "Date":
              return n2 ? s2.setUTCDate(t2) : s2.setDate(t2);
            case "FullYear":
              break;
            default:
              return;
          }
          a2 = t2, r2 = e2.month(), e2 = 29 !== (e2 = e2.date()) || 1 !== r2 || ve(a2) ? e2 : 28, n2 ? s2.setUTCFullYear(a2, r2, e2) : s2.setFullYear(a2, r2, e2);
        }
      }
      function Ce(e2, a2) {
        var t2;
        return isNaN(e2) || isNaN(a2) ? NaN : (t2 = (a2 % (t2 = 12) + t2) % t2, e2 += (a2 - t2) / 12, 1 == t2 ? ve(e2) ? 29 : 28 : 31 - t2 % 7 % 2);
      }
      T = Array.prototype.indexOf || function(e2) {
        for (var a2 = 0; a2 < this.length; ++a2)
          if (this[a2] === e2)
            return a2;
        return -1;
      }, s("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      }), s("MMM", 0, 0, function(e2) {
        return this.localeData().monthsShort(this, e2);
      }), s("MMMM", 0, 0, function(e2) {
        return this.localeData().months(this, e2);
      }), h("M", r, u), h("MM", r, a), h("MMM", function(e2, a2) {
        return a2.monthsShortRegex(e2);
      }), h("MMMM", function(e2, a2) {
        return a2.monthsRegex(e2);
      }), k(["M", "MM"], function(e2, a2) {
        a2[je] = f(e2) - 1;
      }), k(["MMM", "MMMM"], function(e2, a2, t2, s2) {
        s2 = t2._locale.monthsParse(e2, s2, t2._strict);
        null != s2 ? a2[je] = s2 : Y(t2).invalidMonth = e2;
      });
      var Ie = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), Ue = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), Ge = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, Ve = m, qe = m;
      function Be(e2, a2) {
        if (e2.isValid()) {
          if ("string" == typeof a2) {
            if (/^\d+$/.test(a2))
              a2 = f(a2);
            else if (!J(a2 = e2.localeData().monthsParse(a2)))
              return;
          }
          var t2 = (t2 = e2.date()) < 29 ? t2 : Math.min(t2, Ce(e2.year(), a2));
          e2._isUTC ? e2._d.setUTCMonth(a2, t2) : e2._d.setMonth(a2, t2);
        }
      }
      function Ke(e2) {
        return null != e2 ? (Be(this, e2), c.updateOffset(this, true), this) : Je(this, "Month");
      }
      function Ze() {
        function e2(e3, a3) {
          return a3.length - e3.length;
        }
        for (var a2, t2, s2 = [], n2 = [], r2 = [], d2 = 0; d2 < 12; d2++)
          t2 = U([2e3, d2]), a2 = we(this.monthsShort(t2, "")), t2 = we(this.months(t2, "")), s2.push(a2), n2.push(t2), r2.push(t2), r2.push(a2);
        s2.sort(e2), n2.sort(e2), r2.sort(e2), this._monthsRegex = new RegExp("^(" + r2.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp("^(" + n2.join("|") + ")", "i"), this._monthsShortStrictRegex = new RegExp("^(" + s2.join("|") + ")", "i");
      }
      function $e(e2, a2, t2, s2, n2, r2, d2) {
        var _2;
        return e2 < 100 && 0 <= e2 ? (_2 = new Date(e2 + 400, a2, t2, s2, n2, r2, d2), isFinite(_2.getFullYear()) && _2.setFullYear(e2)) : _2 = new Date(e2, a2, t2, s2, n2, r2, d2), _2;
      }
      function Qe(e2) {
        var a2;
        return e2 < 100 && 0 <= e2 ? ((a2 = Array.prototype.slice.call(arguments))[0] = e2 + 400, a2 = new Date(Date.UTC.apply(null, a2)), isFinite(a2.getUTCFullYear()) && a2.setUTCFullYear(e2)) : a2 = new Date(Date.UTC.apply(null, arguments)), a2;
      }
      function Xe(e2, a2, t2) {
        t2 = 7 + a2 - t2;
        return t2 - (7 + Qe(e2, 0, t2).getUTCDay() - a2) % 7 - 1;
      }
      function ea(e2, a2, t2, s2, n2) {
        var r2, a2 = 1 + 7 * (a2 - 1) + (7 + t2 - s2) % 7 + Xe(e2, s2, n2), t2 = a2 <= 0 ? Fe(r2 = e2 - 1) + a2 : a2 > Fe(e2) ? (r2 = e2 + 1, a2 - Fe(e2)) : (r2 = e2, a2);
        return { year: r2, dayOfYear: t2 };
      }
      function aa(e2, a2, t2) {
        var s2, n2, r2 = Xe(e2.year(), a2, t2), r2 = Math.floor((e2.dayOfYear() - r2 - 1) / 7) + 1;
        return r2 < 1 ? s2 = r2 + ta(n2 = e2.year() - 1, a2, t2) : r2 > ta(e2.year(), a2, t2) ? (s2 = r2 - ta(e2.year(), a2, t2), n2 = e2.year() + 1) : (n2 = e2.year(), s2 = r2), { week: s2, year: n2 };
      }
      function ta(e2, a2, t2) {
        var s2 = Xe(e2, a2, t2), a2 = Xe(e2 + 1, a2, t2);
        return (Fe(e2) - s2 + a2) / 7;
      }
      s("w", ["ww", 2], "wo", "week"), s("W", ["WW", 2], "Wo", "isoWeek"), h("w", r, u), h("ww", r, a), h("W", r, u), h("WW", r, a), Se(["w", "ww", "W", "WW"], function(e2, a2, t2, s2) {
        a2[s2.substr(0, 1)] = f(e2);
      });
      function sa(e2, a2) {
        return e2.slice(a2, 7).concat(e2.slice(0, a2));
      }
      s("d", 0, "do", "day"), s("dd", 0, 0, function(e2) {
        return this.localeData().weekdaysMin(this, e2);
      }), s("ddd", 0, 0, function(e2) {
        return this.localeData().weekdaysShort(this, e2);
      }), s("dddd", 0, 0, function(e2) {
        return this.localeData().weekdays(this, e2);
      }), s("e", 0, 0, "weekday"), s("E", 0, 0, "isoWeekday"), h("d", r), h("e", r), h("E", r), h("dd", function(e2, a2) {
        return a2.weekdaysMinRegex(e2);
      }), h("ddd", function(e2, a2) {
        return a2.weekdaysShortRegex(e2);
      }), h("dddd", function(e2, a2) {
        return a2.weekdaysRegex(e2);
      }), Se(["dd", "ddd", "dddd"], function(e2, a2, t2, s2) {
        s2 = t2._locale.weekdaysParse(e2, s2, t2._strict);
        null != s2 ? a2.d = s2 : Y(t2).invalidWeekday = e2;
      }), Se(["d", "e", "E"], function(e2, a2, t2, s2) {
        a2[s2] = f(e2);
      });
      var na = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), ra = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), da = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), _a = m, ia = m, oa = m;
      function ma() {
        function e2(e3, a3) {
          return a3.length - e3.length;
        }
        for (var a2, t2, s2, n2 = [], r2 = [], d2 = [], _2 = [], i2 = 0; i2 < 7; i2++)
          s2 = U([2e3, 1]).day(i2), a2 = we(this.weekdaysMin(s2, "")), t2 = we(this.weekdaysShort(s2, "")), s2 = we(this.weekdays(s2, "")), n2.push(a2), r2.push(t2), d2.push(s2), _2.push(a2), _2.push(t2), _2.push(s2);
        n2.sort(e2), r2.sort(e2), d2.sort(e2), _2.sort(e2), this._weekdaysRegex = new RegExp("^(" + _2.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp("^(" + d2.join("|") + ")", "i"), this._weekdaysShortStrictRegex = new RegExp("^(" + r2.join("|") + ")", "i"), this._weekdaysMinStrictRegex = new RegExp("^(" + n2.join("|") + ")", "i");
      }
      function ua() {
        return this.hours() % 12 || 12;
      }
      function la(e2, a2) {
        s(e2, 0, 0, function() {
          return this.localeData().meridiem(this.hours(), this.minutes(), a2);
        });
      }
      function Ma(e2, a2) {
        return a2._meridiemParse;
      }
      s("H", ["HH", 2], 0, "hour"), s("h", ["hh", 2], 0, ua), s("k", ["kk", 2], 0, function() {
        return this.hours() || 24;
      }), s("hmm", 0, 0, function() {
        return "" + ua.apply(this) + de(this.minutes(), 2);
      }), s("hmmss", 0, 0, function() {
        return "" + ua.apply(this) + de(this.minutes(), 2) + de(this.seconds(), 2);
      }), s("Hmm", 0, 0, function() {
        return "" + this.hours() + de(this.minutes(), 2);
      }), s("Hmmss", 0, 0, function() {
        return "" + this.hours() + de(this.minutes(), 2) + de(this.seconds(), 2);
      }), la("a", true), la("A", false), h("a", Ma), h("A", Ma), h("H", r, M), h("h", r, u), h("k", r, u), h("HH", r, a), h("hh", r, a), h("kk", r, a), h("hmm", ye), h("hmmss", _), h("Hmm", ye), h("Hmmss", _), k(["H", "HH"], D), k(["k", "kk"], function(e2, a2, t2) {
        e2 = f(e2);
        a2[D] = 24 === e2 ? 0 : e2;
      }), k(["a", "A"], function(e2, a2, t2) {
        t2._isPm = t2._locale.isPM(e2), t2._meridiem = e2;
      }), k(["h", "hh"], function(e2, a2, t2) {
        a2[D] = f(e2), Y(t2).bigHour = true;
      }), k("hmm", function(e2, a2, t2) {
        var s2 = e2.length - 2;
        a2[D] = f(e2.substr(0, s2)), a2[Pe] = f(e2.substr(s2)), Y(t2).bigHour = true;
      }), k("hmmss", function(e2, a2, t2) {
        var s2 = e2.length - 4, n2 = e2.length - 2;
        a2[D] = f(e2.substr(0, s2)), a2[Pe] = f(e2.substr(s2, 2)), a2[Oe] = f(e2.substr(n2)), Y(t2).bigHour = true;
      }), k("Hmm", function(e2, a2, t2) {
        var s2 = e2.length - 2;
        a2[D] = f(e2.substr(0, s2)), a2[Pe] = f(e2.substr(s2));
      }), k("Hmmss", function(e2, a2, t2) {
        var s2 = e2.length - 4, n2 = e2.length - 2;
        a2[D] = f(e2.substr(0, s2)), a2[Pe] = f(e2.substr(s2, 2)), a2[Oe] = f(e2.substr(n2));
      });
      m = Ne("Hours", true);
      var ha, ca = { calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, longDateFormat: { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, invalidDate: "Invalid date", ordinal: "%d", dayOfMonthOrdinalParse: /\d{1,2}/, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", w: "a week", ww: "%d weeks", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, months: Ie, monthsShort: Ue, week: { dow: 0, doy: 6 }, weekdays: na, weekdaysMin: da, weekdaysShort: ra, meridiemParse: /[ap]\.?m?\.?/i }, g = {}, La = {};
      function Ya(e2) {
        return e2 && e2.toLowerCase().replace("_", "-");
      }
      function ya(e2) {
        for (var a2, t2, s2, n2, r2 = 0; r2 < e2.length; ) {
          for (a2 = (n2 = Ya(e2[r2]).split("-")).length, t2 = (t2 = Ya(e2[r2 + 1])) ? t2.split("-") : null; 0 < a2; ) {
            if (s2 = fa(n2.slice(0, a2).join("-")))
              return s2;
            if (t2 && t2.length >= a2 && function(e3, a3) {
              for (var t3 = Math.min(e3.length, a3.length), s3 = 0; s3 < t3; s3 += 1)
                if (e3[s3] !== a3[s3])
                  return s3;
              return t3;
            }(n2, t2) >= a2 - 1)
              break;
            a2--;
          }
          r2++;
        }
        return ha;
      }
      function fa(a2) {
        var e2, t2;
        if (void 0 === g[a2] && "undefined" != typeof module && module && module.exports && (t2 = a2) && t2.match("^[^/\\\\]*$"))
          try {
            e2 = ha._abbr, __require("./locale/" + a2), ka(e2);
          } catch (e3) {
            g[a2] = null;
          }
        return g[a2];
      }
      function ka(e2, a2) {
        return e2 && ((a2 = L(a2) ? Da(e2) : pa(e2, a2)) ? ha = a2 : "undefined" != typeof console && console.warn && console.warn("Locale " + e2 + " not found. Did you forget to load it?")), ha._abbr;
      }
      function pa(e2, a2) {
        if (null === a2)
          return delete g[e2], null;
        var t2, s2 = ca;
        if (a2.abbr = e2, null != g[e2])
          ae("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), s2 = g[e2]._config;
        else if (null != a2.parentLocale)
          if (null != g[a2.parentLocale])
            s2 = g[a2.parentLocale]._config;
          else {
            if (null == (t2 = fa(a2.parentLocale)))
              return La[a2.parentLocale] || (La[a2.parentLocale] = []), La[a2.parentLocale].push({ name: e2, config: a2 }), null;
            s2 = t2._config;
          }
        return g[e2] = new ne(se(s2, a2)), La[e2] && La[e2].forEach(function(e3) {
          pa(e3.name, e3.config);
        }), ka(e2), g[e2];
      }
      function Da(e2) {
        var a2;
        if (!(e2 = e2 && e2._locale && e2._locale._abbr ? e2._locale._abbr : e2))
          return ha;
        if (!F(e2)) {
          if (a2 = fa(e2))
            return a2;
          e2 = [e2];
        }
        return ya(e2);
      }
      function Ta(e2) {
        var a2 = e2._a;
        return a2 && -2 === Y(e2).overflow && (a2 = a2[je] < 0 || 11 < a2[je] ? je : a2[xe] < 1 || a2[xe] > Ce(a2[p], a2[je]) ? xe : a2[D] < 0 || 24 < a2[D] || 24 === a2[D] && (0 !== a2[Pe] || 0 !== a2[Oe] || 0 !== a2[We]) ? D : a2[Pe] < 0 || 59 < a2[Pe] ? Pe : a2[Oe] < 0 || 59 < a2[Oe] ? Oe : a2[We] < 0 || 999 < a2[We] ? We : -1, Y(e2)._overflowDayOfYear && (a2 < p || xe < a2) && (a2 = xe), Y(e2)._overflowWeeks && -1 === a2 && (a2 = Ae), Y(e2)._overflowWeekday && -1 === a2 && (a2 = Ee), Y(e2).overflow = a2), e2;
      }
      var ga = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, wa = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, ba = /Z|[+-]\d\d(?::?\d\d)?/, Ha = [["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/], ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/], ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/], ["GGGG-[W]WW", /\d{4}-W\d\d/, false], ["YYYY-DDD", /\d{4}-\d{3}/], ["YYYY-MM", /\d{4}-\d\d/, false], ["YYYYYYMMDD", /[+-]\d{10}/], ["YYYYMMDD", /\d{8}/], ["GGGG[W]WWE", /\d{4}W\d{3}/], ["GGGG[W]WW", /\d{4}W\d{2}/, false], ["YYYYDDD", /\d{7}/], ["YYYYMM", /\d{6}/, false], ["YYYY", /\d{4}/, false]], Sa = [["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/], ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/], ["HH:mm:ss", /\d\d:\d\d:\d\d/], ["HH:mm", /\d\d:\d\d/], ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/], ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/], ["HHmmss", /\d\d\d\d\d\d/], ["HHmm", /\d\d\d\d/], ["HH", /\d\d/]], va = /^\/?Date\((-?\d+)/i, ja = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, xa = { UT: 0, GMT: 0, EDT: -240, EST: -300, CDT: -300, CST: -360, MDT: -360, MST: -420, PDT: -420, PST: -480 };
      function Pa(e2) {
        var a2, t2, s2, n2, r2, d2, _2 = e2._i, i2 = ga.exec(_2) || wa.exec(_2), _2 = Ha.length, o2 = Sa.length;
        if (i2) {
          for (Y(e2).iso = true, a2 = 0, t2 = _2; a2 < t2; a2++)
            if (Ha[a2][1].exec(i2[1])) {
              n2 = Ha[a2][0], s2 = false !== Ha[a2][2];
              break;
            }
          if (null == n2)
            e2._isValid = false;
          else {
            if (i2[3]) {
              for (a2 = 0, t2 = o2; a2 < t2; a2++)
                if (Sa[a2][1].exec(i2[3])) {
                  r2 = (i2[2] || " ") + Sa[a2][0];
                  break;
                }
              if (null == r2)
                return void (e2._isValid = false);
            }
            if (s2 || null == r2) {
              if (i2[4]) {
                if (!ba.exec(i2[4]))
                  return void (e2._isValid = false);
                d2 = "Z";
              }
              e2._f = n2 + (r2 || "") + (d2 || ""), Fa(e2);
            } else
              e2._isValid = false;
          }
        } else
          e2._isValid = false;
      }
      function Oa(e2, a2, t2, s2, n2, r2) {
        e2 = [function(e3) {
          e3 = parseInt(e3, 10);
          {
            if (e3 <= 49)
              return 2e3 + e3;
            if (e3 <= 999)
              return 1900 + e3;
          }
          return e3;
        }(e2), Ue.indexOf(a2), parseInt(t2, 10), parseInt(s2, 10), parseInt(n2, 10)];
        return r2 && e2.push(parseInt(r2, 10)), e2;
      }
      function Wa(e2) {
        var a2, t2, s2 = ja.exec(e2._i.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, ""));
        s2 ? (a2 = Oa(s2[4], s2[3], s2[2], s2[5], s2[6], s2[7]), function(e3, a3, t3) {
          if (!e3 || ra.indexOf(e3) === new Date(a3[0], a3[1], a3[2]).getDay())
            return 1;
          Y(t3).weekdayMismatch = true, t3._isValid = false;
        }(s2[1], a2, e2) && (e2._a = a2, e2._tzm = (a2 = s2[8], t2 = s2[9], s2 = s2[10], a2 ? xa[a2] : t2 ? 0 : 60 * (((a2 = parseInt(s2, 10)) - (t2 = a2 % 100)) / 100) + t2), e2._d = Qe.apply(null, e2._a), e2._d.setUTCMinutes(e2._d.getUTCMinutes() - e2._tzm), Y(e2).rfc2822 = true)) : e2._isValid = false;
      }
      function Aa(e2, a2, t2) {
        return null != e2 ? e2 : null != a2 ? a2 : t2;
      }
      function Ea(e2) {
        var a2, t2, s2, n2, r2, d2, _2, i2, o2, m2, u2, l2 = [];
        if (!e2._d) {
          for (s2 = e2, n2 = new Date(c.now()), t2 = s2._useUTC ? [n2.getUTCFullYear(), n2.getUTCMonth(), n2.getUTCDate()] : [n2.getFullYear(), n2.getMonth(), n2.getDate()], e2._w && null == e2._a[xe] && null == e2._a[je] && (null != (n2 = (s2 = e2)._w).GG || null != n2.W || null != n2.E ? (i2 = 1, o2 = 4, r2 = Aa(n2.GG, s2._a[p], aa(w(), 1, 4).year), d2 = Aa(n2.W, 1), ((_2 = Aa(n2.E, 1)) < 1 || 7 < _2) && (m2 = true)) : (i2 = s2._locale._week.dow, o2 = s2._locale._week.doy, u2 = aa(w(), i2, o2), r2 = Aa(n2.gg, s2._a[p], u2.year), d2 = Aa(n2.w, u2.week), null != n2.d ? ((_2 = n2.d) < 0 || 6 < _2) && (m2 = true) : null != n2.e ? (_2 = n2.e + i2, (n2.e < 0 || 6 < n2.e) && (m2 = true)) : _2 = i2), d2 < 1 || d2 > ta(r2, i2, o2) ? Y(s2)._overflowWeeks = true : null != m2 ? Y(s2)._overflowWeekday = true : (u2 = ea(r2, d2, _2, i2, o2), s2._a[p] = u2.year, s2._dayOfYear = u2.dayOfYear)), null != e2._dayOfYear && (n2 = Aa(e2._a[p], t2[p]), (e2._dayOfYear > Fe(n2) || 0 === e2._dayOfYear) && (Y(e2)._overflowDayOfYear = true), m2 = Qe(n2, 0, e2._dayOfYear), e2._a[je] = m2.getUTCMonth(), e2._a[xe] = m2.getUTCDate()), a2 = 0; a2 < 3 && null == e2._a[a2]; ++a2)
            e2._a[a2] = l2[a2] = t2[a2];
          for (; a2 < 7; a2++)
            e2._a[a2] = l2[a2] = null == e2._a[a2] ? 2 === a2 ? 1 : 0 : e2._a[a2];
          24 === e2._a[D] && 0 === e2._a[Pe] && 0 === e2._a[Oe] && 0 === e2._a[We] && (e2._nextDay = true, e2._a[D] = 0), e2._d = (e2._useUTC ? Qe : $e).apply(null, l2), r2 = e2._useUTC ? e2._d.getUTCDay() : e2._d.getDay(), null != e2._tzm && e2._d.setUTCMinutes(e2._d.getUTCMinutes() - e2._tzm), e2._nextDay && (e2._a[D] = 24), e2._w && void 0 !== e2._w.d && e2._w.d !== r2 && (Y(e2).weekdayMismatch = true);
        }
      }
      function Fa(e2) {
        if (e2._f === c.ISO_8601)
          Pa(e2);
        else if (e2._f === c.RFC_2822)
          Wa(e2);
        else {
          e2._a = [], Y(e2).empty = true;
          for (var a2, t2, s2, n2, r2, d2 = "" + e2._i, _2 = d2.length, i2 = 0, o2 = le(e2._f, e2._locale).match(_e) || [], m2 = o2.length, u2 = 0; u2 < m2; u2++)
            t2 = o2[u2], (a2 = (d2.match(ge(t2, e2)) || [])[0]) && (0 < (s2 = d2.substr(0, d2.indexOf(a2))).length && Y(e2).unusedInput.push(s2), d2 = d2.slice(d2.indexOf(a2) + a2.length), i2 += a2.length), me[t2] ? (a2 ? Y(e2).empty = false : Y(e2).unusedTokens.push(t2), s2 = t2, r2 = e2, null != (n2 = a2) && l(He, s2) && He[s2](n2, r2._a, r2, s2)) : e2._strict && !a2 && Y(e2).unusedTokens.push(t2);
          Y(e2).charsLeftOver = _2 - i2, 0 < d2.length && Y(e2).unusedInput.push(d2), e2._a[D] <= 12 && true === Y(e2).bigHour && 0 < e2._a[D] && (Y(e2).bigHour = void 0), Y(e2).parsedDateParts = e2._a.slice(0), Y(e2).meridiem = e2._meridiem, e2._a[D] = function(e3, a3, t3) {
            if (null == t3)
              return a3;
            return null != e3.meridiemHour ? e3.meridiemHour(a3, t3) : null != e3.isPM ? ((e3 = e3.isPM(t3)) && a3 < 12 && (a3 += 12), a3 = e3 || 12 !== a3 ? a3 : 0) : a3;
          }(e2._locale, e2._a[D], e2._meridiem), null !== (_2 = Y(e2).era) && (e2._a[p] = e2._locale.erasConvertYear(_2, e2._a[p])), Ea(e2), Ta(e2);
        }
      }
      function za(e2) {
        var a2, t2, s2, n2 = e2._i, r2 = e2._f;
        if (e2._locale = e2._locale || Da(e2._l), null === n2 || void 0 === r2 && "" === n2)
          return V({ nullInput: true });
        if ("string" == typeof n2 && (e2._i = n2 = e2._locale.preparse(n2)), Q(n2))
          return new $(Ta(n2));
        if (R(n2))
          e2._d = n2;
        else if (F(r2)) {
          var d2, _2, i2, o2, m2, u2, l2 = e2, M2 = false, h2 = l2._f.length;
          if (0 === h2)
            Y(l2).invalidFormat = true, l2._d = /* @__PURE__ */ new Date(NaN);
          else {
            for (o2 = 0; o2 < h2; o2++)
              m2 = 0, u2 = false, d2 = Z({}, l2), null != l2._useUTC && (d2._useUTC = l2._useUTC), d2._f = l2._f[o2], Fa(d2), G(d2) && (u2 = true), m2 = (m2 += Y(d2).charsLeftOver) + 10 * Y(d2).unusedTokens.length, Y(d2).score = m2, M2 ? m2 < i2 && (i2 = m2, _2 = d2) : (null == i2 || m2 < i2 || u2) && (i2 = m2, _2 = d2, u2) && (M2 = true);
            I(l2, _2 || d2);
          }
        } else if (r2)
          Fa(e2);
        else if (L(r2 = (n2 = e2)._i))
          n2._d = new Date(c.now());
        else
          R(r2) ? n2._d = new Date(r2.valueOf()) : "string" == typeof r2 ? (t2 = n2, null !== (a2 = va.exec(t2._i)) ? t2._d = /* @__PURE__ */ new Date(+a2[1]) : (Pa(t2), false === t2._isValid && (delete t2._isValid, Wa(t2), false === t2._isValid) && (delete t2._isValid, t2._strict ? t2._isValid = false : c.createFromInputFallback(t2)))) : F(r2) ? (n2._a = C(r2.slice(0), function(e3) {
            return parseInt(e3, 10);
          }), Ea(n2)) : z(r2) ? (a2 = n2)._d || (s2 = void 0 === (t2 = he(a2._i)).day ? t2.date : t2.day, a2._a = C([t2.year, t2.month, s2, t2.hour, t2.minute, t2.second, t2.millisecond], function(e3) {
            return e3 && parseInt(e3, 10);
          }), Ea(a2)) : J(r2) ? n2._d = new Date(r2) : c.createFromInputFallback(n2);
        return G(e2) || (e2._d = null), e2;
      }
      function Na(e2, a2, t2, s2, n2) {
        var r2 = {};
        return true !== a2 && false !== a2 || (s2 = a2, a2 = void 0), true !== t2 && false !== t2 || (s2 = t2, t2 = void 0), (z(e2) && N(e2) || F(e2) && 0 === e2.length) && (e2 = void 0), r2._isAMomentObject = true, r2._useUTC = r2._isUTC = n2, r2._l = t2, r2._i = e2, r2._f = a2, r2._strict = s2, (n2 = new $(Ta(za(n2 = r2))))._nextDay && (n2.add(1, "d"), n2._nextDay = void 0), n2;
      }
      function w(e2, a2, t2, s2) {
        return Na(e2, a2, t2, s2, false);
      }
      c.createFromInputFallback = e("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(e2) {
        e2._d = /* @__PURE__ */ new Date(e2._i + (e2._useUTC ? " UTC" : ""));
      }), c.ISO_8601 = function() {
      }, c.RFC_2822 = function() {
      };
      ye = e("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var e2 = w.apply(null, arguments);
        return this.isValid() && e2.isValid() ? e2 < this ? this : e2 : V();
      }), _ = e("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var e2 = w.apply(null, arguments);
        return this.isValid() && e2.isValid() ? this < e2 ? this : e2 : V();
      });
      function Ja(e2, a2) {
        var t2, s2;
        if (!(a2 = 1 === a2.length && F(a2[0]) ? a2[0] : a2).length)
          return w();
        for (t2 = a2[0], s2 = 1; s2 < a2.length; ++s2)
          a2[s2].isValid() && !a2[s2][e2](t2) || (t2 = a2[s2]);
        return t2;
      }
      var Ra = ["year", "quarter", "month", "week", "day", "hour", "minute", "second", "millisecond"];
      function Ca(e2) {
        var e2 = he(e2), a2 = e2.year || 0, t2 = e2.quarter || 0, s2 = e2.month || 0, n2 = e2.week || e2.isoWeek || 0, r2 = e2.day || 0, d2 = e2.hour || 0, _2 = e2.minute || 0, i2 = e2.second || 0, o2 = e2.millisecond || 0;
        this._isValid = function(e3) {
          var a3, t3, s3 = false, n3 = Ra.length;
          for (a3 in e3)
            if (l(e3, a3) && (-1 === T.call(Ra, a3) || null != e3[a3] && isNaN(e3[a3])))
              return false;
          for (t3 = 0; t3 < n3; ++t3)
            if (e3[Ra[t3]]) {
              if (s3)
                return false;
              parseFloat(e3[Ra[t3]]) !== f(e3[Ra[t3]]) && (s3 = true);
            }
          return true;
        }(e2), this._milliseconds = +o2 + 1e3 * i2 + 6e4 * _2 + 1e3 * d2 * 60 * 60, this._days = +r2 + 7 * n2, this._months = +s2 + 3 * t2 + 12 * a2, this._data = {}, this._locale = Da(), this._bubble();
      }
      function Ia(e2) {
        return e2 instanceof Ca;
      }
      function Ua(e2) {
        return e2 < 0 ? -1 * Math.round(-1 * e2) : Math.round(e2);
      }
      function Ga(e2, t2) {
        s(e2, 0, 0, function() {
          var e3 = this.utcOffset(), a2 = "+";
          return e3 < 0 && (e3 = -e3, a2 = "-"), a2 + de(~~(e3 / 60), 2) + t2 + de(~~e3 % 60, 2);
        });
      }
      Ga("Z", ":"), Ga("ZZ", ""), h("Z", Te), h("ZZ", Te), k(["Z", "ZZ"], function(e2, a2, t2) {
        t2._useUTC = true, t2._tzm = qa(Te, e2);
      });
      var Va = /([\+\-]|\d\d)/gi;
      function qa(e2, a2) {
        var a2 = (a2 || "").match(e2);
        return null === a2 ? null : 0 === (a2 = 60 * (e2 = ((a2[a2.length - 1] || []) + "").match(Va) || ["-", 0, 0])[1] + f(e2[2])) ? 0 : "+" === e2[0] ? a2 : -a2;
      }
      function Ba(e2, a2) {
        var t2;
        return a2._isUTC ? (a2 = a2.clone(), t2 = (Q(e2) || R(e2) ? e2 : w(e2)).valueOf() - a2.valueOf(), a2._d.setTime(a2._d.valueOf() + t2), c.updateOffset(a2, false), a2) : w(e2).local();
      }
      function Ka(e2) {
        return -Math.round(e2._d.getTimezoneOffset());
      }
      function Za() {
        return !!this.isValid() && this._isUTC && 0 === this._offset;
      }
      c.updateOffset = function() {
      };
      var $a = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, Qa = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function Xa(e2, a2) {
        var t2, s2 = e2;
        return Ia(e2) ? s2 = { ms: e2._milliseconds, d: e2._days, M: e2._months } : J(e2) || !isNaN(+e2) ? (s2 = {}, a2 ? s2[a2] = +e2 : s2.milliseconds = +e2) : (a2 = $a.exec(e2)) ? (t2 = "-" === a2[1] ? -1 : 1, s2 = { y: 0, d: f(a2[xe]) * t2, h: f(a2[D]) * t2, m: f(a2[Pe]) * t2, s: f(a2[Oe]) * t2, ms: f(Ua(1e3 * a2[We])) * t2 }) : (a2 = Qa.exec(e2)) ? (t2 = "-" === a2[1] ? -1 : 1, s2 = { y: et(a2[2], t2), M: et(a2[3], t2), w: et(a2[4], t2), d: et(a2[5], t2), h: et(a2[6], t2), m: et(a2[7], t2), s: et(a2[8], t2) }) : null == s2 ? s2 = {} : "object" == typeof s2 && ("from" in s2 || "to" in s2) && (a2 = function(e3, a3) {
          var t3;
          if (!e3.isValid() || !a3.isValid())
            return { milliseconds: 0, months: 0 };
          a3 = Ba(a3, e3), e3.isBefore(a3) ? t3 = at(e3, a3) : ((t3 = at(a3, e3)).milliseconds = -t3.milliseconds, t3.months = -t3.months);
          return t3;
        }(w(s2.from), w(s2.to)), (s2 = {}).ms = a2.milliseconds, s2.M = a2.months), t2 = new Ca(s2), Ia(e2) && l(e2, "_locale") && (t2._locale = e2._locale), Ia(e2) && l(e2, "_isValid") && (t2._isValid = e2._isValid), t2;
      }
      function et(e2, a2) {
        e2 = e2 && parseFloat(e2.replace(",", "."));
        return (isNaN(e2) ? 0 : e2) * a2;
      }
      function at(e2, a2) {
        var t2 = {};
        return t2.months = a2.month() - e2.month() + 12 * (a2.year() - e2.year()), e2.clone().add(t2.months, "M").isAfter(a2) && --t2.months, t2.milliseconds = +a2 - +e2.clone().add(t2.months, "M"), t2;
      }
      function tt(s2, n2) {
        return function(e2, a2) {
          var t2;
          return null === a2 || isNaN(+a2) || (ae(n2, "moment()." + n2 + "(period, number) is deprecated. Please use moment()." + n2 + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."), t2 = e2, e2 = a2, a2 = t2), st(this, Xa(e2, a2), s2), this;
        };
      }
      function st(e2, a2, t2, s2) {
        var n2 = a2._milliseconds, r2 = Ua(a2._days), a2 = Ua(a2._months);
        e2.isValid() && (s2 = null == s2 || s2, a2 && Be(e2, Je(e2, "Month") + a2 * t2), r2 && Re(e2, "Date", Je(e2, "Date") + r2 * t2), n2 && e2._d.setTime(e2._d.valueOf() + n2 * t2), s2) && c.updateOffset(e2, r2 || a2);
      }
      Xa.fn = Ca.prototype, Xa.invalid = function() {
        return Xa(NaN);
      };
      Ie = tt(1, "add"), na = tt(-1, "subtract");
      function nt(e2) {
        return "string" == typeof e2 || e2 instanceof String;
      }
      function rt(e2) {
        return Q(e2) || R(e2) || nt(e2) || J(e2) || function(a2) {
          var e3 = F(a2), t2 = false;
          e3 && (t2 = 0 === a2.filter(function(e4) {
            return !J(e4) && nt(a2);
          }).length);
          return e3 && t2;
        }(e2) || function(e3) {
          var a2, t2, s2 = z(e3) && !N(e3), n2 = false, r2 = ["years", "year", "y", "months", "month", "M", "days", "day", "d", "dates", "date", "D", "hours", "hour", "h", "minutes", "minute", "m", "seconds", "second", "s", "milliseconds", "millisecond", "ms"], d2 = r2.length;
          for (a2 = 0; a2 < d2; a2 += 1)
            t2 = r2[a2], n2 = n2 || l(e3, t2);
          return s2 && n2;
        }(e2) || null == e2;
      }
      function dt(e2, a2) {
        var t2, s2;
        return e2.date() < a2.date() ? -dt(a2, e2) : -((t2 = 12 * (a2.year() - e2.year()) + (a2.month() - e2.month())) + (a2 - (s2 = e2.clone().add(t2, "months")) < 0 ? (a2 - s2) / (s2 - e2.clone().add(t2 - 1, "months")) : (a2 - s2) / (e2.clone().add(1 + t2, "months") - s2))) || 0;
      }
      function _t(e2) {
        return void 0 === e2 ? this._locale._abbr : (null != (e2 = Da(e2)) && (this._locale = e2), this);
      }
      c.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ", c.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      da = e("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(e2) {
        return void 0 === e2 ? this.localeData() : this.locale(e2);
      });
      function it() {
        return this._locale;
      }
      var ot = 126227808e5;
      function mt(e2, a2) {
        return (e2 % a2 + a2) % a2;
      }
      function ut(e2, a2, t2) {
        return e2 < 100 && 0 <= e2 ? new Date(e2 + 400, a2, t2) - ot : new Date(e2, a2, t2).valueOf();
      }
      function lt(e2, a2, t2) {
        return e2 < 100 && 0 <= e2 ? Date.UTC(e2 + 400, a2, t2) - ot : Date.UTC(e2, a2, t2);
      }
      function Mt(e2, a2) {
        return a2.erasAbbrRegex(e2);
      }
      function ht() {
        for (var e2, a2, t2, s2 = [], n2 = [], r2 = [], d2 = [], _2 = this.eras(), i2 = 0, o2 = _2.length; i2 < o2; ++i2)
          e2 = we(_2[i2].name), a2 = we(_2[i2].abbr), t2 = we(_2[i2].narrow), n2.push(e2), s2.push(a2), r2.push(t2), d2.push(e2), d2.push(a2), d2.push(t2);
        this._erasRegex = new RegExp("^(" + d2.join("|") + ")", "i"), this._erasNameRegex = new RegExp("^(" + n2.join("|") + ")", "i"), this._erasAbbrRegex = new RegExp("^(" + s2.join("|") + ")", "i"), this._erasNarrowRegex = new RegExp("^(" + r2.join("|") + ")", "i");
      }
      function ct(e2, a2) {
        s(0, [e2, e2.length], 0, a2);
      }
      function Lt(e2, a2, t2, s2, n2) {
        var r2;
        return null == e2 ? aa(this, s2, n2).year : (r2 = ta(e2, s2, n2), (function(e3, a3, t3, s3, n3) {
          e3 = ea(e3, a3, t3, s3, n3), a3 = Qe(e3.year, 0, e3.dayOfYear);
          return this.year(a3.getUTCFullYear()), this.month(a3.getUTCMonth()), this.date(a3.getUTCDate()), this;
        }).call(this, e2, a2 = r2 < a2 ? r2 : a2, t2, s2, n2));
      }
      s("N", 0, 0, "eraAbbr"), s("NN", 0, 0, "eraAbbr"), s("NNN", 0, 0, "eraAbbr"), s("NNNN", 0, 0, "eraName"), s("NNNNN", 0, 0, "eraNarrow"), s("y", ["y", 1], "yo", "eraYear"), s("y", ["yy", 2], 0, "eraYear"), s("y", ["yyy", 3], 0, "eraYear"), s("y", ["yyyy", 4], 0, "eraYear"), h("N", Mt), h("NN", Mt), h("NNN", Mt), h("NNNN", function(e2, a2) {
        return a2.erasNameRegex(e2);
      }), h("NNNNN", function(e2, a2) {
        return a2.erasNarrowRegex(e2);
      }), k(["N", "NN", "NNN", "NNNN", "NNNNN"], function(e2, a2, t2, s2) {
        s2 = t2._locale.erasParse(e2, s2, t2._strict);
        s2 ? Y(t2).era = s2 : Y(t2).invalidEra = e2;
      }), h("y", ke), h("yy", ke), h("yyy", ke), h("yyyy", ke), h("yo", function(e2, a2) {
        return a2._eraYearOrdinalRegex || ke;
      }), k(["y", "yy", "yyy", "yyyy"], p), k(["yo"], function(e2, a2, t2, s2) {
        var n2;
        t2._locale._eraYearOrdinalRegex && (n2 = e2.match(t2._locale._eraYearOrdinalRegex)), t2._locale.eraYearOrdinalParse ? a2[p] = t2._locale.eraYearOrdinalParse(e2, n2) : a2[p] = parseInt(e2, 10);
      }), s(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      }), s(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      }), ct("gggg", "weekYear"), ct("ggggg", "weekYear"), ct("GGGG", "isoWeekYear"), ct("GGGGG", "isoWeekYear"), h("G", pe), h("g", pe), h("GG", r, a), h("gg", r, a), h("GGGG", i, t), h("gggg", i, t), h("GGGGG", o, n), h("ggggg", o, n), Se(["gggg", "ggggg", "GGGG", "GGGGG"], function(e2, a2, t2, s2) {
        a2[s2.substr(0, 2)] = f(e2);
      }), Se(["gg", "GG"], function(e2, a2, t2, s2) {
        a2[s2] = c.parseTwoDigitYear(e2);
      }), s("Q", 0, "Qo", "quarter"), h("Q", Le), k("Q", function(e2, a2) {
        a2[je] = 3 * (f(e2) - 1);
      }), s("D", ["DD", 2], "Do", "date"), h("D", r, u), h("DD", r, a), h("Do", function(e2, a2) {
        return e2 ? a2._dayOfMonthOrdinalParse || a2._ordinalParse : a2._dayOfMonthOrdinalParseLenient;
      }), k(["D", "DD"], xe), k("Do", function(e2, a2) {
        a2[xe] = f(e2.match(r)[0]);
      });
      i = Ne("Date", true);
      s("DDD", ["DDDD", 3], "DDDo", "dayOfYear"), h("DDD", fe), h("DDDD", Ye), k(["DDD", "DDDD"], function(e2, a2, t2) {
        t2._dayOfYear = f(e2);
      }), s("m", ["mm", 2], 0, "minute"), h("m", r, M), h("mm", r, a), k(["m", "mm"], Pe);
      var Yt, t = Ne("Minutes", false), o = (s("s", ["ss", 2], 0, "second"), h("s", r, M), h("ss", r, a), k(["s", "ss"], Oe), Ne("Seconds", false));
      for (s("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      }), s(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      }), s(0, ["SSS", 3], 0, "millisecond"), s(0, ["SSSS", 4], 0, function() {
        return 10 * this.millisecond();
      }), s(0, ["SSSSS", 5], 0, function() {
        return 100 * this.millisecond();
      }), s(0, ["SSSSSS", 6], 0, function() {
        return 1e3 * this.millisecond();
      }), s(0, ["SSSSSSS", 7], 0, function() {
        return 1e4 * this.millisecond();
      }), s(0, ["SSSSSSSS", 8], 0, function() {
        return 1e5 * this.millisecond();
      }), s(0, ["SSSSSSSSS", 9], 0, function() {
        return 1e6 * this.millisecond();
      }), h("S", fe, Le), h("SS", fe, a), h("SSS", fe, Ye), Yt = "SSSS"; Yt.length <= 9; Yt += "S")
        h(Yt, ke);
      function yt(e2, a2) {
        a2[We] = f(1e3 * ("0." + e2));
      }
      for (Yt = "S"; Yt.length <= 9; Yt += "S")
        k(Yt, yt);
      n = Ne("Milliseconds", false), s("z", 0, 0, "zoneAbbr"), s("zz", 0, 0, "zoneName");
      u = $.prototype;
      function ft(e2) {
        return e2;
      }
      u.add = Ie, u.calendar = function(e2, a2) {
        1 === arguments.length && (arguments[0] ? rt(arguments[0]) ? (e2 = arguments[0], a2 = void 0) : function(e3) {
          for (var a3 = z(e3) && !N(e3), t3 = false, s2 = ["sameDay", "nextDay", "lastDay", "nextWeek", "lastWeek", "sameElse"], n2 = 0; n2 < s2.length; n2 += 1)
            t3 = t3 || l(e3, s2[n2]);
          return a3 && t3;
        }(arguments[0]) && (a2 = arguments[0], e2 = void 0) : a2 = e2 = void 0);
        var e2 = e2 || w(), t2 = Ba(e2, this).startOf("day"), t2 = c.calendarFormat(this, t2) || "sameElse", a2 = a2 && (te(a2[t2]) ? a2[t2].call(this, e2) : a2[t2]);
        return this.format(a2 || this.localeData().calendar(t2, this, w(e2)));
      }, u.clone = function() {
        return new $(this);
      }, u.diff = function(e2, a2, t2) {
        var s2, n2, r2;
        if (!this.isValid())
          return NaN;
        if (!(s2 = Ba(e2, this)).isValid())
          return NaN;
        switch (n2 = 6e4 * (s2.utcOffset() - this.utcOffset()), a2 = d(a2)) {
          case "year":
            r2 = dt(this, s2) / 12;
            break;
          case "month":
            r2 = dt(this, s2);
            break;
          case "quarter":
            r2 = dt(this, s2) / 3;
            break;
          case "second":
            r2 = (this - s2) / 1e3;
            break;
          case "minute":
            r2 = (this - s2) / 6e4;
            break;
          case "hour":
            r2 = (this - s2) / 36e5;
            break;
          case "day":
            r2 = (this - s2 - n2) / 864e5;
            break;
          case "week":
            r2 = (this - s2 - n2) / 6048e5;
            break;
          default:
            r2 = this - s2;
        }
        return t2 ? r2 : y(r2);
      }, u.endOf = function(e2) {
        var a2, t2;
        if (void 0 !== (e2 = d(e2)) && "millisecond" !== e2 && this.isValid()) {
          switch (t2 = this._isUTC ? lt : ut, e2) {
            case "year":
              a2 = t2(this.year() + 1, 0, 1) - 1;
              break;
            case "quarter":
              a2 = t2(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
              break;
            case "month":
              a2 = t2(this.year(), this.month() + 1, 1) - 1;
              break;
            case "week":
              a2 = t2(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
              break;
            case "isoWeek":
              a2 = t2(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
              break;
            case "day":
            case "date":
              a2 = t2(this.year(), this.month(), this.date() + 1) - 1;
              break;
            case "hour":
              a2 = this._d.valueOf(), a2 += 36e5 - mt(a2 + (this._isUTC ? 0 : 6e4 * this.utcOffset()), 36e5) - 1;
              break;
            case "minute":
              a2 = this._d.valueOf(), a2 += 6e4 - mt(a2, 6e4) - 1;
              break;
            case "second":
              a2 = this._d.valueOf(), a2 += 1e3 - mt(a2, 1e3) - 1;
              break;
          }
          this._d.setTime(a2), c.updateOffset(this, true);
        }
        return this;
      }, u.format = function(e2) {
        return e2 = e2 || (this.isUtc() ? c.defaultFormatUtc : c.defaultFormat), e2 = ue(this, e2), this.localeData().postformat(e2);
      }, u.from = function(e2, a2) {
        return this.isValid() && (Q(e2) && e2.isValid() || w(e2).isValid()) ? Xa({ to: this, from: e2 }).locale(this.locale()).humanize(!a2) : this.localeData().invalidDate();
      }, u.fromNow = function(e2) {
        return this.from(w(), e2);
      }, u.to = function(e2, a2) {
        return this.isValid() && (Q(e2) && e2.isValid() || w(e2).isValid()) ? Xa({ from: this, to: e2 }).locale(this.locale()).humanize(!a2) : this.localeData().invalidDate();
      }, u.toNow = function(e2) {
        return this.to(w(), e2);
      }, u.get = function(e2) {
        return te(this[e2 = d(e2)]) ? this[e2]() : this;
      }, u.invalidAt = function() {
        return Y(this).overflow;
      }, u.isAfter = function(e2, a2) {
        return e2 = Q(e2) ? e2 : w(e2), !(!this.isValid() || !e2.isValid()) && ("millisecond" === (a2 = d(a2) || "millisecond") ? this.valueOf() > e2.valueOf() : e2.valueOf() < this.clone().startOf(a2).valueOf());
      }, u.isBefore = function(e2, a2) {
        return e2 = Q(e2) ? e2 : w(e2), !(!this.isValid() || !e2.isValid()) && ("millisecond" === (a2 = d(a2) || "millisecond") ? this.valueOf() < e2.valueOf() : this.clone().endOf(a2).valueOf() < e2.valueOf());
      }, u.isBetween = function(e2, a2, t2, s2) {
        return e2 = Q(e2) ? e2 : w(e2), a2 = Q(a2) ? a2 : w(a2), !!(this.isValid() && e2.isValid() && a2.isValid()) && ("(" === (s2 = s2 || "()")[0] ? this.isAfter(e2, t2) : !this.isBefore(e2, t2)) && (")" === s2[1] ? this.isBefore(a2, t2) : !this.isAfter(a2, t2));
      }, u.isSame = function(e2, a2) {
        var e2 = Q(e2) ? e2 : w(e2);
        return !(!this.isValid() || !e2.isValid()) && ("millisecond" === (a2 = d(a2) || "millisecond") ? this.valueOf() === e2.valueOf() : (e2 = e2.valueOf(), this.clone().startOf(a2).valueOf() <= e2 && e2 <= this.clone().endOf(a2).valueOf()));
      }, u.isSameOrAfter = function(e2, a2) {
        return this.isSame(e2, a2) || this.isAfter(e2, a2);
      }, u.isSameOrBefore = function(e2, a2) {
        return this.isSame(e2, a2) || this.isBefore(e2, a2);
      }, u.isValid = function() {
        return G(this);
      }, u.lang = da, u.locale = _t, u.localeData = it, u.max = _, u.min = ye, u.parsingFlags = function() {
        return I({}, Y(this));
      }, u.set = function(e2, a2) {
        if ("object" == typeof e2)
          for (var t2 = function(e3) {
            var a3, t3 = [];
            for (a3 in e3)
              l(e3, a3) && t3.push({ unit: a3, priority: ce[a3] });
            return t3.sort(function(e4, a4) {
              return e4.priority - a4.priority;
            }), t3;
          }(e2 = he(e2)), s2 = t2.length, n2 = 0; n2 < s2; n2++)
            this[t2[n2].unit](e2[t2[n2].unit]);
        else if (te(this[e2 = d(e2)]))
          return this[e2](a2);
        return this;
      }, u.startOf = function(e2) {
        var a2, t2;
        if (void 0 !== (e2 = d(e2)) && "millisecond" !== e2 && this.isValid()) {
          switch (t2 = this._isUTC ? lt : ut, e2) {
            case "year":
              a2 = t2(this.year(), 0, 1);
              break;
            case "quarter":
              a2 = t2(this.year(), this.month() - this.month() % 3, 1);
              break;
            case "month":
              a2 = t2(this.year(), this.month(), 1);
              break;
            case "week":
              a2 = t2(this.year(), this.month(), this.date() - this.weekday());
              break;
            case "isoWeek":
              a2 = t2(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
              break;
            case "day":
            case "date":
              a2 = t2(this.year(), this.month(), this.date());
              break;
            case "hour":
              a2 = this._d.valueOf(), a2 -= mt(a2 + (this._isUTC ? 0 : 6e4 * this.utcOffset()), 36e5);
              break;
            case "minute":
              a2 = this._d.valueOf(), a2 -= mt(a2, 6e4);
              break;
            case "second":
              a2 = this._d.valueOf(), a2 -= mt(a2, 1e3);
              break;
          }
          this._d.setTime(a2), c.updateOffset(this, true);
        }
        return this;
      }, u.subtract = na, u.toArray = function() {
        var e2 = this;
        return [e2.year(), e2.month(), e2.date(), e2.hour(), e2.minute(), e2.second(), e2.millisecond()];
      }, u.toObject = function() {
        var e2 = this;
        return { years: e2.year(), months: e2.month(), date: e2.date(), hours: e2.hours(), minutes: e2.minutes(), seconds: e2.seconds(), milliseconds: e2.milliseconds() };
      }, u.toDate = function() {
        return new Date(this.valueOf());
      }, u.toISOString = function(e2) {
        var a2;
        return this.isValid() ? (a2 = (e2 = true !== e2) ? this.clone().utc() : this).year() < 0 || 9999 < a2.year() ? ue(a2, e2 ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ") : te(Date.prototype.toISOString) ? e2 ? this.toDate().toISOString() : new Date(this.valueOf() + 60 * this.utcOffset() * 1e3).toISOString().replace("Z", ue(a2, "Z")) : ue(a2, e2 ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ") : null;
      }, u.inspect = function() {
        var e2, a2, t2;
        return this.isValid() ? (a2 = "moment", e2 = "", this.isLocal() || (a2 = 0 === this.utcOffset() ? "moment.utc" : "moment.parseZone", e2 = "Z"), a2 = "[" + a2 + '("]', t2 = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY", this.format(a2 + t2 + "-MM-DD[T]HH:mm:ss.SSS" + (e2 + '[")]'))) : "moment.invalid(/* " + this._i + " */)";
      }, "undefined" != typeof Symbol && null != Symbol.for && (u[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return "Moment<" + this.format() + ">";
      }), u.toJSON = function() {
        return this.isValid() ? this.toISOString() : null;
      }, u.toString = function() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }, u.unix = function() {
        return Math.floor(this.valueOf() / 1e3);
      }, u.valueOf = function() {
        return this._d.valueOf() - 6e4 * (this._offset || 0);
      }, u.creationData = function() {
        return { input: this._i, format: this._f, locale: this._locale, isUTC: this._isUTC, strict: this._strict };
      }, u.eraName = function() {
        for (var e2, a2 = this.localeData().eras(), t2 = 0, s2 = a2.length; t2 < s2; ++t2) {
          if (e2 = this.clone().startOf("day").valueOf(), a2[t2].since <= e2 && e2 <= a2[t2].until)
            return a2[t2].name;
          if (a2[t2].until <= e2 && e2 <= a2[t2].since)
            return a2[t2].name;
        }
        return "";
      }, u.eraNarrow = function() {
        for (var e2, a2 = this.localeData().eras(), t2 = 0, s2 = a2.length; t2 < s2; ++t2) {
          if (e2 = this.clone().startOf("day").valueOf(), a2[t2].since <= e2 && e2 <= a2[t2].until)
            return a2[t2].narrow;
          if (a2[t2].until <= e2 && e2 <= a2[t2].since)
            return a2[t2].narrow;
        }
        return "";
      }, u.eraAbbr = function() {
        for (var e2, a2 = this.localeData().eras(), t2 = 0, s2 = a2.length; t2 < s2; ++t2) {
          if (e2 = this.clone().startOf("day").valueOf(), a2[t2].since <= e2 && e2 <= a2[t2].until)
            return a2[t2].abbr;
          if (a2[t2].until <= e2 && e2 <= a2[t2].since)
            return a2[t2].abbr;
        }
        return "";
      }, u.eraYear = function() {
        for (var e2, a2, t2 = this.localeData().eras(), s2 = 0, n2 = t2.length; s2 < n2; ++s2)
          if (e2 = t2[s2].since <= t2[s2].until ? 1 : -1, a2 = this.clone().startOf("day").valueOf(), t2[s2].since <= a2 && a2 <= t2[s2].until || t2[s2].until <= a2 && a2 <= t2[s2].since)
            return (this.year() - c(t2[s2].since).year()) * e2 + t2[s2].offset;
        return this.year();
      }, u.year = ze, u.isLeapYear = function() {
        return ve(this.year());
      }, u.weekYear = function(e2) {
        return Lt.call(this, e2, this.week(), this.weekday() + this.localeData()._week.dow, this.localeData()._week.dow, this.localeData()._week.doy);
      }, u.isoWeekYear = function(e2) {
        return Lt.call(this, e2, this.isoWeek(), this.isoWeekday(), 1, 4);
      }, u.quarter = u.quarters = function(e2) {
        return null == e2 ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (e2 - 1) + this.month() % 3);
      }, u.month = Ke, u.daysInMonth = function() {
        return Ce(this.year(), this.month());
      }, u.week = u.weeks = function(e2) {
        var a2 = this.localeData().week(this);
        return null == e2 ? a2 : this.add(7 * (e2 - a2), "d");
      }, u.isoWeek = u.isoWeeks = function(e2) {
        var a2 = aa(this, 1, 4).week;
        return null == e2 ? a2 : this.add(7 * (e2 - a2), "d");
      }, u.weeksInYear = function() {
        var e2 = this.localeData()._week;
        return ta(this.year(), e2.dow, e2.doy);
      }, u.weeksInWeekYear = function() {
        var e2 = this.localeData()._week;
        return ta(this.weekYear(), e2.dow, e2.doy);
      }, u.isoWeeksInYear = function() {
        return ta(this.year(), 1, 4);
      }, u.isoWeeksInISOWeekYear = function() {
        return ta(this.isoWeekYear(), 1, 4);
      }, u.date = i, u.day = u.days = function(e2) {
        var a2, t2, s2;
        return this.isValid() ? (a2 = Je(this, "Day"), null != e2 ? (t2 = e2, s2 = this.localeData(), e2 = "string" != typeof t2 ? t2 : isNaN(t2) ? "number" == typeof (t2 = s2.weekdaysParse(t2)) ? t2 : null : parseInt(t2, 10), this.add(e2 - a2, "d")) : a2) : null != e2 ? this : NaN;
      }, u.weekday = function(e2) {
        var a2;
        return this.isValid() ? (a2 = (this.day() + 7 - this.localeData()._week.dow) % 7, null == e2 ? a2 : this.add(e2 - a2, "d")) : null != e2 ? this : NaN;
      }, u.isoWeekday = function(e2) {
        var a2, t2;
        return this.isValid() ? null != e2 ? (a2 = e2, t2 = this.localeData(), t2 = "string" == typeof a2 ? t2.weekdaysParse(a2) % 7 || 7 : isNaN(a2) ? null : a2, this.day(this.day() % 7 ? t2 : t2 - 7)) : this.day() || 7 : null != e2 ? this : NaN;
      }, u.dayOfYear = function(e2) {
        var a2 = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
        return null == e2 ? a2 : this.add(e2 - a2, "d");
      }, u.hour = u.hours = m, u.minute = u.minutes = t, u.second = u.seconds = o, u.millisecond = u.milliseconds = n, u.utcOffset = function(e2, a2, t2) {
        var s2, n2 = this._offset || 0;
        if (!this.isValid())
          return null != e2 ? this : NaN;
        if (null == e2)
          return this._isUTC ? n2 : Ka(this);
        if ("string" == typeof e2) {
          if (null === (e2 = qa(Te, e2)))
            return this;
        } else
          Math.abs(e2) < 16 && !t2 && (e2 *= 60);
        return !this._isUTC && a2 && (s2 = Ka(this)), this._offset = e2, this._isUTC = true, null != s2 && this.add(s2, "m"), n2 !== e2 && (!a2 || this._changeInProgress ? st(this, Xa(e2 - n2, "m"), 1, false) : this._changeInProgress || (this._changeInProgress = true, c.updateOffset(this, true), this._changeInProgress = null)), this;
      }, u.utc = function(e2) {
        return this.utcOffset(0, e2);
      }, u.local = function(e2) {
        return this._isUTC && (this.utcOffset(0, e2), this._isUTC = false, e2) && this.subtract(Ka(this), "m"), this;
      }, u.parseZone = function() {
        var e2;
        return null != this._tzm ? this.utcOffset(this._tzm, false, true) : "string" == typeof this._i && (null != (e2 = qa(De, this._i)) ? this.utcOffset(e2) : this.utcOffset(0, true)), this;
      }, u.hasAlignedHourOffset = function(e2) {
        return !!this.isValid() && (e2 = e2 ? w(e2).utcOffset() : 0, (this.utcOffset() - e2) % 60 == 0);
      }, u.isDST = function() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }, u.isLocal = function() {
        return !!this.isValid() && !this._isUTC;
      }, u.isUtcOffset = function() {
        return !!this.isValid() && this._isUTC;
      }, u.isUtc = Za, u.isUTC = Za, u.zoneAbbr = function() {
        return this._isUTC ? "UTC" : "";
      }, u.zoneName = function() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }, u.dates = e("dates accessor is deprecated. Use date instead.", i), u.months = e("months accessor is deprecated. Use month instead", Ke), u.years = e("years accessor is deprecated. Use year instead", ze), u.zone = e("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", function(e2, a2) {
        return null != e2 ? (this.utcOffset(e2 = "string" != typeof e2 ? -e2 : e2, a2), this) : -this.utcOffset();
      }), u.isDSTShifted = e("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", function() {
        var e2, a2;
        return L(this._isDSTShifted) && (Z(e2 = {}, this), (e2 = za(e2))._a ? (a2 = (e2._isUTC ? U : w)(e2._a), this._isDSTShifted = this.isValid() && 0 < function(e3, a3, t2) {
          for (var s2 = Math.min(e3.length, a3.length), n2 = Math.abs(e3.length - a3.length), r2 = 0, d2 = 0; d2 < s2; d2++)
            (t2 && e3[d2] !== a3[d2] || !t2 && f(e3[d2]) !== f(a3[d2])) && r2++;
          return r2 + n2;
        }(e2._a, a2.toArray())) : this._isDSTShifted = false), this._isDSTShifted;
      });
      M = ne.prototype;
      function kt(e2, a2, t2, s2) {
        var n2 = Da(), s2 = U().set(s2, a2);
        return n2[t2](s2, e2);
      }
      function pt(e2, a2, t2) {
        if (J(e2) && (a2 = e2, e2 = void 0), e2 = e2 || "", null != a2)
          return kt(e2, a2, t2, "month");
        for (var s2 = [], n2 = 0; n2 < 12; n2++)
          s2[n2] = kt(e2, n2, t2, "month");
        return s2;
      }
      function Dt(e2, a2, t2, s2) {
        a2 = ("boolean" == typeof e2 ? J(a2) && (t2 = a2, a2 = void 0) : (a2 = e2, e2 = false, J(t2 = a2) && (t2 = a2, a2 = void 0)), a2 || "");
        var n2, r2 = Da(), d2 = e2 ? r2._week.dow : 0, _2 = [];
        if (null != t2)
          return kt(a2, (t2 + d2) % 7, s2, "day");
        for (n2 = 0; n2 < 7; n2++)
          _2[n2] = kt(a2, (n2 + d2) % 7, s2, "day");
        return _2;
      }
      M.calendar = function(e2, a2, t2) {
        return te(e2 = this._calendar[e2] || this._calendar.sameElse) ? e2.call(a2, t2) : e2;
      }, M.longDateFormat = function(e2) {
        var a2 = this._longDateFormat[e2], t2 = this._longDateFormat[e2.toUpperCase()];
        return a2 || !t2 ? a2 : (this._longDateFormat[e2] = t2.match(_e).map(function(e3) {
          return "MMMM" === e3 || "MM" === e3 || "DD" === e3 || "dddd" === e3 ? e3.slice(1) : e3;
        }).join(""), this._longDateFormat[e2]);
      }, M.invalidDate = function() {
        return this._invalidDate;
      }, M.ordinal = function(e2) {
        return this._ordinal.replace("%d", e2);
      }, M.preparse = ft, M.postformat = ft, M.relativeTime = function(e2, a2, t2, s2) {
        var n2 = this._relativeTime[t2];
        return te(n2) ? n2(e2, a2, t2, s2) : n2.replace(/%d/i, e2);
      }, M.pastFuture = function(e2, a2) {
        return te(e2 = this._relativeTime[0 < e2 ? "future" : "past"]) ? e2(a2) : e2.replace(/%s/i, a2);
      }, M.set = function(e2) {
        var a2, t2;
        for (t2 in e2)
          l(e2, t2) && (te(a2 = e2[t2]) ? this[t2] = a2 : this["_" + t2] = a2);
        this._config = e2, this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
      }, M.eras = function(e2, a2) {
        for (var t2, s2 = this._eras || Da("en")._eras, n2 = 0, r2 = s2.length; n2 < r2; ++n2) {
          switch (typeof s2[n2].since) {
            case "string":
              t2 = c(s2[n2].since).startOf("day"), s2[n2].since = t2.valueOf();
              break;
          }
          switch (typeof s2[n2].until) {
            case "undefined":
              s2[n2].until = 1 / 0;
              break;
            case "string":
              t2 = c(s2[n2].until).startOf("day").valueOf(), s2[n2].until = t2.valueOf();
              break;
          }
        }
        return s2;
      }, M.erasParse = function(e2, a2, t2) {
        var s2, n2, r2, d2, _2, i2 = this.eras();
        for (e2 = e2.toUpperCase(), s2 = 0, n2 = i2.length; s2 < n2; ++s2)
          if (r2 = i2[s2].name.toUpperCase(), d2 = i2[s2].abbr.toUpperCase(), _2 = i2[s2].narrow.toUpperCase(), t2)
            switch (a2) {
              case "N":
              case "NN":
              case "NNN":
                if (d2 === e2)
                  return i2[s2];
                break;
              case "NNNN":
                if (r2 === e2)
                  return i2[s2];
                break;
              case "NNNNN":
                if (_2 === e2)
                  return i2[s2];
                break;
            }
          else if (0 <= [r2, d2, _2].indexOf(e2))
            return i2[s2];
      }, M.erasConvertYear = function(e2, a2) {
        var t2 = e2.since <= e2.until ? 1 : -1;
        return void 0 === a2 ? c(e2.since).year() : c(e2.since).year() + (a2 - e2.offset) * t2;
      }, M.erasAbbrRegex = function(e2) {
        return l(this, "_erasAbbrRegex") || ht.call(this), e2 ? this._erasAbbrRegex : this._erasRegex;
      }, M.erasNameRegex = function(e2) {
        return l(this, "_erasNameRegex") || ht.call(this), e2 ? this._erasNameRegex : this._erasRegex;
      }, M.erasNarrowRegex = function(e2) {
        return l(this, "_erasNarrowRegex") || ht.call(this), e2 ? this._erasNarrowRegex : this._erasRegex;
      }, M.months = function(e2, a2) {
        return e2 ? (F(this._months) ? this._months : this._months[(this._months.isFormat || Ge).test(a2) ? "format" : "standalone"])[e2.month()] : F(this._months) ? this._months : this._months.standalone;
      }, M.monthsShort = function(e2, a2) {
        return e2 ? (F(this._monthsShort) ? this._monthsShort : this._monthsShort[Ge.test(a2) ? "format" : "standalone"])[e2.month()] : F(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone;
      }, M.monthsParse = function(e2, a2, t2) {
        var s2, n2;
        if (this._monthsParseExact)
          return (function(e3, a3, t3) {
            var s3, n3, r2, e3 = e3.toLocaleLowerCase();
            if (!this._monthsParse)
              for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], s3 = 0; s3 < 12; ++s3)
                r2 = U([2e3, s3]), this._shortMonthsParse[s3] = this.monthsShort(r2, "").toLocaleLowerCase(), this._longMonthsParse[s3] = this.months(r2, "").toLocaleLowerCase();
            return t3 ? "MMM" === a3 ? -1 !== (n3 = T.call(this._shortMonthsParse, e3)) ? n3 : null : -1 !== (n3 = T.call(this._longMonthsParse, e3)) ? n3 : null : "MMM" === a3 ? -1 !== (n3 = T.call(this._shortMonthsParse, e3)) || -1 !== (n3 = T.call(this._longMonthsParse, e3)) ? n3 : null : -1 !== (n3 = T.call(this._longMonthsParse, e3)) || -1 !== (n3 = T.call(this._shortMonthsParse, e3)) ? n3 : null;
          }).call(this, e2, a2, t2);
        for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), s2 = 0; s2 < 12; s2++) {
          if (n2 = U([2e3, s2]), t2 && !this._longMonthsParse[s2] && (this._longMonthsParse[s2] = new RegExp("^" + this.months(n2, "").replace(".", "") + "$", "i"), this._shortMonthsParse[s2] = new RegExp("^" + this.monthsShort(n2, "").replace(".", "") + "$", "i")), t2 || this._monthsParse[s2] || (n2 = "^" + this.months(n2, "") + "|^" + this.monthsShort(n2, ""), this._monthsParse[s2] = new RegExp(n2.replace(".", ""), "i")), t2 && "MMMM" === a2 && this._longMonthsParse[s2].test(e2))
            return s2;
          if (t2 && "MMM" === a2 && this._shortMonthsParse[s2].test(e2))
            return s2;
          if (!t2 && this._monthsParse[s2].test(e2))
            return s2;
        }
      }, M.monthsRegex = function(e2) {
        return this._monthsParseExact ? (l(this, "_monthsRegex") || Ze.call(this), e2 ? this._monthsStrictRegex : this._monthsRegex) : (l(this, "_monthsRegex") || (this._monthsRegex = qe), this._monthsStrictRegex && e2 ? this._monthsStrictRegex : this._monthsRegex);
      }, M.monthsShortRegex = function(e2) {
        return this._monthsParseExact ? (l(this, "_monthsRegex") || Ze.call(this), e2 ? this._monthsShortStrictRegex : this._monthsShortRegex) : (l(this, "_monthsShortRegex") || (this._monthsShortRegex = Ve), this._monthsShortStrictRegex && e2 ? this._monthsShortStrictRegex : this._monthsShortRegex);
      }, M.week = function(e2) {
        return aa(e2, this._week.dow, this._week.doy).week;
      }, M.firstDayOfYear = function() {
        return this._week.doy;
      }, M.firstDayOfWeek = function() {
        return this._week.dow;
      }, M.weekdays = function(e2, a2) {
        return a2 = F(this._weekdays) ? this._weekdays : this._weekdays[e2 && true !== e2 && this._weekdays.isFormat.test(a2) ? "format" : "standalone"], true === e2 ? sa(a2, this._week.dow) : e2 ? a2[e2.day()] : a2;
      }, M.weekdaysMin = function(e2) {
        return true === e2 ? sa(this._weekdaysMin, this._week.dow) : e2 ? this._weekdaysMin[e2.day()] : this._weekdaysMin;
      }, M.weekdaysShort = function(e2) {
        return true === e2 ? sa(this._weekdaysShort, this._week.dow) : e2 ? this._weekdaysShort[e2.day()] : this._weekdaysShort;
      }, M.weekdaysParse = function(e2, a2, t2) {
        var s2, n2;
        if (this._weekdaysParseExact)
          return (function(e3, a3, t3) {
            var s3, n3, r2, e3 = e3.toLocaleLowerCase();
            if (!this._weekdaysParse)
              for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], s3 = 0; s3 < 7; ++s3)
                r2 = U([2e3, 1]).day(s3), this._minWeekdaysParse[s3] = this.weekdaysMin(r2, "").toLocaleLowerCase(), this._shortWeekdaysParse[s3] = this.weekdaysShort(r2, "").toLocaleLowerCase(), this._weekdaysParse[s3] = this.weekdays(r2, "").toLocaleLowerCase();
            return t3 ? "dddd" === a3 ? -1 !== (n3 = T.call(this._weekdaysParse, e3)) ? n3 : null : "ddd" === a3 ? -1 !== (n3 = T.call(this._shortWeekdaysParse, e3)) ? n3 : null : -1 !== (n3 = T.call(this._minWeekdaysParse, e3)) ? n3 : null : "dddd" === a3 ? -1 !== (n3 = T.call(this._weekdaysParse, e3)) || -1 !== (n3 = T.call(this._shortWeekdaysParse, e3)) || -1 !== (n3 = T.call(this._minWeekdaysParse, e3)) ? n3 : null : "ddd" === a3 ? -1 !== (n3 = T.call(this._shortWeekdaysParse, e3)) || -1 !== (n3 = T.call(this._weekdaysParse, e3)) || -1 !== (n3 = T.call(this._minWeekdaysParse, e3)) ? n3 : null : -1 !== (n3 = T.call(this._minWeekdaysParse, e3)) || -1 !== (n3 = T.call(this._weekdaysParse, e3)) || -1 !== (n3 = T.call(this._shortWeekdaysParse, e3)) ? n3 : null;
          }).call(this, e2, a2, t2);
        for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), s2 = 0; s2 < 7; s2++) {
          if (n2 = U([2e3, 1]).day(s2), t2 && !this._fullWeekdaysParse[s2] && (this._fullWeekdaysParse[s2] = new RegExp("^" + this.weekdays(n2, "").replace(".", "\\.?") + "$", "i"), this._shortWeekdaysParse[s2] = new RegExp("^" + this.weekdaysShort(n2, "").replace(".", "\\.?") + "$", "i"), this._minWeekdaysParse[s2] = new RegExp("^" + this.weekdaysMin(n2, "").replace(".", "\\.?") + "$", "i")), this._weekdaysParse[s2] || (n2 = "^" + this.weekdays(n2, "") + "|^" + this.weekdaysShort(n2, "") + "|^" + this.weekdaysMin(n2, ""), this._weekdaysParse[s2] = new RegExp(n2.replace(".", ""), "i")), t2 && "dddd" === a2 && this._fullWeekdaysParse[s2].test(e2))
            return s2;
          if (t2 && "ddd" === a2 && this._shortWeekdaysParse[s2].test(e2))
            return s2;
          if (t2 && "dd" === a2 && this._minWeekdaysParse[s2].test(e2))
            return s2;
          if (!t2 && this._weekdaysParse[s2].test(e2))
            return s2;
        }
      }, M.weekdaysRegex = function(e2) {
        return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || ma.call(this), e2 ? this._weekdaysStrictRegex : this._weekdaysRegex) : (l(this, "_weekdaysRegex") || (this._weekdaysRegex = _a), this._weekdaysStrictRegex && e2 ? this._weekdaysStrictRegex : this._weekdaysRegex);
      }, M.weekdaysShortRegex = function(e2) {
        return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || ma.call(this), e2 ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (l(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = ia), this._weekdaysShortStrictRegex && e2 ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex);
      }, M.weekdaysMinRegex = function(e2) {
        return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || ma.call(this), e2 ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (l(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = oa), this._weekdaysMinStrictRegex && e2 ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex);
      }, M.isPM = function(e2) {
        return "p" === (e2 + "").toLowerCase().charAt(0);
      }, M.meridiem = function(e2, a2, t2) {
        return 11 < e2 ? t2 ? "pm" : "PM" : t2 ? "am" : "AM";
      }, ka("en", { eras: [{ since: "0001-01-01", until: 1 / 0, offset: 1, name: "Anno Domini", narrow: "AD", abbr: "AD" }, { since: "0000-12-31", until: -1 / 0, offset: 1, name: "Before Christ", narrow: "BC", abbr: "BC" }], dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/, ordinal: function(e2) {
        var a2 = e2 % 10;
        return e2 + (1 === f(e2 % 100 / 10) ? "th" : 1 == a2 ? "st" : 2 == a2 ? "nd" : 3 == a2 ? "rd" : "th");
      } }), c.lang = e("moment.lang is deprecated. Use moment.locale instead.", ka), c.langData = e("moment.langData is deprecated. Use moment.localeData instead.", Da);
      var Tt = Math.abs;
      function gt(e2, a2, t2, s2) {
        a2 = Xa(a2, t2);
        return e2._milliseconds += s2 * a2._milliseconds, e2._days += s2 * a2._days, e2._months += s2 * a2._months, e2._bubble();
      }
      function wt(e2) {
        return e2 < 0 ? Math.floor(e2) : Math.ceil(e2);
      }
      function bt(e2) {
        return 4800 * e2 / 146097;
      }
      function Ht(e2) {
        return 146097 * e2 / 4800;
      }
      function St(e2) {
        return function() {
          return this.as(e2);
        };
      }
      Le = St("ms"), a = St("s"), fe = St("m"), Ye = St("h"), Ie = St("d"), _ = St("w"), ye = St("M"), na = St("Q"), m = St("y"), t = Le;
      function vt(e2) {
        return function() {
          return this.isValid() ? this._data[e2] : NaN;
        };
      }
      var o = vt("milliseconds"), n = vt("seconds"), i = vt("minutes"), ze = vt("hours"), M = vt("days"), jt = vt("months"), xt = vt("years");
      var Pt = Math.round, Ot = { ss: 44, s: 45, m: 45, h: 22, d: 26, w: null, M: 11 };
      function Wt(e2, a2, t2, s2) {
        var n2 = Xa(e2).abs(), r2 = Pt(n2.as("s")), d2 = Pt(n2.as("m")), _2 = Pt(n2.as("h")), i2 = Pt(n2.as("d")), o2 = Pt(n2.as("M")), m2 = Pt(n2.as("w")), n2 = Pt(n2.as("y")), r2 = (r2 <= t2.ss ? ["s", r2] : r2 < t2.s && ["ss", r2]) || (d2 <= 1 ? ["m"] : d2 < t2.m && ["mm", d2]) || (_2 <= 1 ? ["h"] : _2 < t2.h && ["hh", _2]) || (i2 <= 1 ? ["d"] : i2 < t2.d && ["dd", i2]);
        return (r2 = (r2 = null != t2.w ? r2 || (m2 <= 1 ? ["w"] : m2 < t2.w && ["ww", m2]) : r2) || (o2 <= 1 ? ["M"] : o2 < t2.M && ["MM", o2]) || (n2 <= 1 ? ["y"] : ["yy", n2]))[2] = a2, r2[3] = 0 < +e2, r2[4] = s2, (function(e3, a3, t3, s3, n3) {
          return n3.relativeTime(a3 || 1, !!t3, e3, s3);
        }).apply(null, r2);
      }
      var At = Math.abs;
      function Et(e2) {
        return (0 < e2) - (e2 < 0) || +e2;
      }
      function Ft() {
        var e2, a2, t2, s2, n2, r2, d2, _2, i2, o2, m2;
        return this.isValid() ? (e2 = At(this._milliseconds) / 1e3, a2 = At(this._days), t2 = At(this._months), (_2 = this.asSeconds()) ? (s2 = y(e2 / 60), n2 = y(s2 / 60), e2 %= 60, s2 %= 60, r2 = y(t2 / 12), t2 %= 12, d2 = e2 ? e2.toFixed(3).replace(/\.?0+$/, "") : "", i2 = Et(this._months) !== Et(_2) ? "-" : "", o2 = Et(this._days) !== Et(_2) ? "-" : "", m2 = Et(this._milliseconds) !== Et(_2) ? "-" : "", (_2 < 0 ? "-" : "") + "P" + (r2 ? i2 + r2 + "Y" : "") + (t2 ? i2 + t2 + "M" : "") + (a2 ? o2 + a2 + "D" : "") + (n2 || s2 || e2 ? "T" : "") + (n2 ? m2 + n2 + "H" : "") + (s2 ? m2 + s2 + "M" : "") + (e2 ? m2 + d2 + "S" : "")) : "P0D") : this.localeData().invalidDate();
      }
      function zt(e2) {
        return 0 === e2 ? 0 : 1 === e2 ? 1 : 2 === e2 ? 2 : 3 <= e2 % 100 && e2 % 100 <= 10 ? 3 : 11 <= e2 % 100 ? 4 : 5;
      }
      function b(d2) {
        return function(e2, a2, t2, s2) {
          var n2 = zt(e2), r2 = Rt[d2][zt(e2)];
          return (r2 = 2 === n2 ? r2[a2 ? 0 : 1] : r2).replace(/%d/i, e2);
        };
      }
      function Nt(e2) {
        return 0 === e2 ? 0 : 1 === e2 ? 1 : 2 === e2 ? 2 : 3 <= e2 % 100 && e2 % 100 <= 10 ? 3 : 11 <= e2 % 100 ? 4 : 5;
      }
      function H(d2) {
        return function(e2, a2, t2, s2) {
          var n2 = Nt(e2), r2 = It[d2][Nt(e2)];
          return (r2 = 2 === n2 ? r2[a2 ? 0 : 1] : r2).replace(/%d/i, e2);
        };
      }
      function Jt(e2) {
        return 0 === e2 ? 0 : 1 === e2 ? 1 : 2 === e2 ? 2 : 3 <= e2 % 100 && e2 % 100 <= 10 ? 3 : 11 <= e2 % 100 ? 4 : 5;
      }
      function S(d2) {
        return function(e2, a2, t2, s2) {
          var n2 = Jt(e2), r2 = Zt[d2][Jt(e2)];
          return (r2 = 2 === n2 ? r2[a2 ? 0 : 1] : r2).replace(/%d/i, e2);
        };
      }
      var v = Ca.prototype, Rt = (v.isValid = function() {
        return this._isValid;
      }, v.abs = function() {
        var e2 = this._data;
        return this._milliseconds = Tt(this._milliseconds), this._days = Tt(this._days), this._months = Tt(this._months), e2.milliseconds = Tt(e2.milliseconds), e2.seconds = Tt(e2.seconds), e2.minutes = Tt(e2.minutes), e2.hours = Tt(e2.hours), e2.months = Tt(e2.months), e2.years = Tt(e2.years), this;
      }, v.add = function(e2, a2) {
        return gt(this, e2, a2, 1);
      }, v.subtract = function(e2, a2) {
        return gt(this, e2, a2, -1);
      }, v.as = function(e2) {
        if (!this.isValid())
          return NaN;
        var a2, t2, s2 = this._milliseconds;
        if ("month" === (e2 = d(e2)) || "quarter" === e2 || "year" === e2)
          switch (a2 = this._days + s2 / 864e5, t2 = this._months + bt(a2), e2) {
            case "month":
              return t2;
            case "quarter":
              return t2 / 3;
            case "year":
              return t2 / 12;
          }
        else
          switch (a2 = this._days + Math.round(Ht(this._months)), e2) {
            case "week":
              return a2 / 7 + s2 / 6048e5;
            case "day":
              return a2 + s2 / 864e5;
            case "hour":
              return 24 * a2 + s2 / 36e5;
            case "minute":
              return 1440 * a2 + s2 / 6e4;
            case "second":
              return 86400 * a2 + s2 / 1e3;
            case "millisecond":
              return Math.floor(864e5 * a2) + s2;
            default:
              throw new Error("Unknown unit " + e2);
          }
      }, v.asMilliseconds = Le, v.asSeconds = a, v.asMinutes = fe, v.asHours = Ye, v.asDays = Ie, v.asWeeks = _, v.asMonths = ye, v.asQuarters = na, v.asYears = m, v.valueOf = t, v._bubble = function() {
        var e2 = this._milliseconds, a2 = this._days, t2 = this._months, s2 = this._data;
        return 0 <= e2 && 0 <= a2 && 0 <= t2 || e2 <= 0 && a2 <= 0 && t2 <= 0 || (e2 += 864e5 * wt(Ht(t2) + a2), t2 = a2 = 0), s2.milliseconds = e2 % 1e3, e2 = y(e2 / 1e3), s2.seconds = e2 % 60, e2 = y(e2 / 60), s2.minutes = e2 % 60, e2 = y(e2 / 60), s2.hours = e2 % 24, a2 += y(e2 / 24), t2 += e2 = y(bt(a2)), a2 -= wt(Ht(e2)), e2 = y(t2 / 12), t2 %= 12, s2.days = a2, s2.months = t2, s2.years = e2, this;
      }, v.clone = function() {
        return Xa(this);
      }, v.get = function(e2) {
        return e2 = d(e2), this.isValid() ? this[e2 + "s"]() : NaN;
      }, v.milliseconds = o, v.seconds = n, v.minutes = i, v.hours = ze, v.days = M, v.weeks = function() {
        return y(this.days() / 7);
      }, v.months = jt, v.years = xt, v.humanize = function(e2, a2) {
        var t2, s2;
        return this.isValid() ? (t2 = false, s2 = Ot, "object" == typeof e2 && (a2 = e2, e2 = false), "boolean" == typeof e2 && (t2 = e2), "object" == typeof a2 && (s2 = Object.assign({}, Ot, a2), null != a2.s) && null == a2.ss && (s2.ss = a2.s - 1), e2 = this.localeData(), a2 = Wt(this, !t2, s2, e2), t2 && (a2 = e2.pastFuture(+this, a2)), e2.postformat(a2)) : this.localeData().invalidDate();
      }, v.toISOString = Ft, v.toString = Ft, v.toJSON = Ft, v.locale = _t, v.localeData = it, v.toIsoString = e("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", Ft), v.lang = da, s("X", 0, 0, "unix"), s("x", 0, 0, "valueOf"), h("x", pe), h("X", /[+-]?\d+(\.\d{1,3})?/), k("X", function(e2, a2, t2) {
        t2._d = new Date(1e3 * parseFloat(e2));
      }), k("x", function(e2, a2, t2) {
        t2._d = new Date(f(e2));
      }), c.version = "2.30.1", E = w, c.fn = u, c.min = function() {
        return Ja("isBefore", [].slice.call(arguments, 0));
      }, c.max = function() {
        return Ja("isAfter", [].slice.call(arguments, 0));
      }, c.now = function() {
        return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
      }, c.utc = U, c.unix = function(e2) {
        return w(1e3 * e2);
      }, c.months = function(e2, a2) {
        return pt(e2, a2, "months");
      }, c.isDate = R, c.locale = ka, c.invalid = V, c.duration = Xa, c.isMoment = Q, c.weekdays = function(e2, a2, t2) {
        return Dt(e2, a2, t2, "weekdays");
      }, c.parseZone = function() {
        return w.apply(null, arguments).parseZone();
      }, c.localeData = Da, c.isDuration = Ia, c.monthsShort = function(e2, a2) {
        return pt(e2, a2, "monthsShort");
      }, c.weekdaysMin = function(e2, a2, t2) {
        return Dt(e2, a2, t2, "weekdaysMin");
      }, c.defineLocale = pa, c.updateLocale = function(e2, a2) {
        var t2, s2;
        return null != a2 ? (s2 = ca, null != g[e2] && null != g[e2].parentLocale ? g[e2].set(se(g[e2]._config, a2)) : (a2 = se(s2 = null != (t2 = fa(e2)) ? t2._config : s2, a2), null == t2 && (a2.abbr = e2), (s2 = new ne(a2)).parentLocale = g[e2], g[e2] = s2), ka(e2)) : null != g[e2] && (null != g[e2].parentLocale ? (g[e2] = g[e2].parentLocale, e2 === ka() && ka(e2)) : null != g[e2] && delete g[e2]), g[e2];
      }, c.locales = function() {
        return re(g);
      }, c.weekdaysShort = function(e2, a2, t2) {
        return Dt(e2, a2, t2, "weekdaysShort");
      }, c.normalizeUnits = d, c.relativeTimeRounding = function(e2) {
        return void 0 === e2 ? Pt : "function" == typeof e2 && (Pt = e2, true);
      }, c.relativeTimeThreshold = function(e2, a2) {
        return void 0 !== Ot[e2] && (void 0 === a2 ? Ot[e2] : (Ot[e2] = a2, "s" === e2 && (Ot.ss = a2 - 1), true));
      }, c.calendarFormat = function(e2, a2) {
        return (e2 = e2.diff(a2, "days", true)) < -6 ? "sameElse" : e2 < -1 ? "lastWeek" : e2 < 0 ? "lastDay" : e2 < 1 ? "sameDay" : e2 < 2 ? "nextDay" : e2 < 7 ? "nextWeek" : "sameElse";
      }, c.prototype = u, c.HTML5_FMT = { DATETIME_LOCAL: "YYYY-MM-DDTHH:mm", DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss", DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS", DATE: "YYYY-MM-DD", TIME: "HH:mm", TIME_SECONDS: "HH:mm:ss", TIME_MS: "HH:mm:ss.SSS", WEEK: "GGGG-[W]WW", MONTH: "YYYY-MM" }, c.defineLocale("af", { months: "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"), monthsShort: "Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"), weekdays: "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"), weekdaysShort: "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"), weekdaysMin: "So_Ma_Di_Wo_Do_Vr_Sa".split("_"), meridiemParse: /vm|nm/i, isPM: function(e2) {
        return /^nm$/i.test(e2);
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? t2 ? "vm" : "VM" : t2 ? "nm" : "NM";
      }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Vandag om] LT", nextDay: "[Môre om] LT", nextWeek: "dddd [om] LT", lastDay: "[Gister om] LT", lastWeek: "[Laas] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "oor %s", past: "%s gelede", s: "'n paar sekondes", ss: "%d sekondes", m: "'n minuut", mm: "%d minute", h: "'n uur", hh: "%d ure", d: "'n dag", dd: "%d dae", M: "'n maand", MM: "%d maande", y: "'n jaar", yy: "%d jaar" }, dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/, ordinal: function(e2) {
        return e2 + (1 === e2 || 8 === e2 || 20 <= e2 ? "ste" : "de");
      }, week: { dow: 1, doy: 4 } }), { s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"], m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"], h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"], d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"], M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"], y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"] }), Le = ["جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"], Ct = (c.defineLocale("ar-dz", { months: Le, monthsShort: Le, weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/‏M/‏YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /\u0635|\u0645/, isPM: function(e2) {
        return "م" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "ص" : "م";
      }, calendar: { sameDay: "[اليوم عند الساعة] LT", nextDay: "[غدًا عند الساعة] LT", nextWeek: "dddd [عند الساعة] LT", lastDay: "[أمس عند الساعة] LT", lastWeek: "dddd [عند الساعة] LT", sameElse: "L" }, relativeTime: { future: "بعد %s", past: "منذ %s", s: b("s"), ss: b("s"), m: b("m"), mm: b("m"), h: b("h"), hh: b("h"), d: b("d"), dd: b("d"), M: b("M"), MM: b("M"), y: b("y"), yy: b("y") }, postformat: function(e2) {
        return e2.replace(/,/g, "،");
      }, week: { dow: 0, doy: 4 } }), c.defineLocale("ar-kw", { months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", ss: "%d ثانية", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 0, doy: 12 } }), { 1: "1", 2: "2", 3: "3", 4: "4", 5: "5", 6: "6", 7: "7", 8: "8", 9: "9", 0: "0" }), It = { s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"], m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"], h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"], d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"], M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"], y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"] }, a = ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"], Ut = (c.defineLocale("ar-ly", { months: a, monthsShort: a, weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/‏M/‏YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /\u0635|\u0645/, isPM: function(e2) {
        return "م" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "ص" : "م";
      }, calendar: { sameDay: "[اليوم عند الساعة] LT", nextDay: "[غدًا عند الساعة] LT", nextWeek: "dddd [عند الساعة] LT", lastDay: "[أمس عند الساعة] LT", lastWeek: "dddd [عند الساعة] LT", sameElse: "L" }, relativeTime: { future: "بعد %s", past: "منذ %s", s: H("s"), ss: H("s"), m: H("m"), mm: H("m"), h: H("h"), hh: H("h"), d: H("d"), dd: H("d"), M: H("M"), MM: H("M"), y: H("y"), yy: H("y") }, preparse: function(e2) {
        return e2.replace(/\u060c/g, ",");
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return Ct[e3];
        }).replace(/,/g, "،");
      }, week: { dow: 6, doy: 12 } }), c.defineLocale("ar-ma", { months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", ss: "%d ثانية", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 1, doy: 4 } }), { 1: "١", 2: "٢", 3: "٣", 4: "٤", 5: "٥", 6: "٦", 7: "٧", 8: "٨", 9: "٩", 0: "٠" }), Gt = { "١": "1", "٢": "2", "٣": "3", "٤": "4", "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9", "٠": "0" }, Vt = (c.defineLocale("ar-ps", { months: "كانون الثاني_شباط_آذار_نيسان_أيّار_حزيران_تمّوز_آب_أيلول_تشري الأوّل_تشرين الثاني_كانون الأوّل".split("_"), monthsShort: "ك٢_شباط_آذار_نيسان_أيّار_حزيران_تمّوز_آب_أيلول_ت١_ت٢_ك١".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /\u0635|\u0645/, isPM: function(e2) {
        return "م" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "ص" : "م";
      }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", ss: "%d ثانية", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, preparse: function(e2) {
        return e2.replace(/[\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g, function(e3) {
          return Gt[e3];
        }).split("").reverse().join("").replace(/[\u0661\u0662](?![\u062a\u0643])/g, function(e3) {
          return Gt[e3];
        }).split("").reverse().join("").replace(/\u060c/g, ",");
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return Ut[e3];
        }).replace(/,/g, "،");
      }, week: { dow: 0, doy: 6 } }), { 1: "١", 2: "٢", 3: "٣", 4: "٤", 5: "٥", 6: "٦", 7: "٧", 8: "٨", 9: "٩", 0: "٠" }), qt = { "١": "1", "٢": "2", "٣": "3", "٤": "4", "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9", "٠": "0" }, Bt = (c.defineLocale("ar-sa", { months: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), monthsShort: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /\u0635|\u0645/, isPM: function(e2) {
        return "م" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "ص" : "م";
      }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", ss: "%d ثانية", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, preparse: function(e2) {
        return e2.replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g, function(e3) {
          return qt[e3];
        }).replace(/\u060c/g, ",");
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return Vt[e3];
        }).replace(/,/g, "،");
      }, week: { dow: 0, doy: 6 } }), c.defineLocale("ar-tn", { months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", ss: "%d ثانية", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 1, doy: 4 } }), { 1: "١", 2: "٢", 3: "٣", 4: "٤", 5: "٥", 6: "٦", 7: "٧", 8: "٨", 9: "٩", 0: "٠" }), Kt = { "١": "1", "٢": "2", "٣": "3", "٤": "4", "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9", "٠": "0" }, Zt = { s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"], m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"], h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"], d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"], M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"], y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"] }, fe = ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"], $t = (c.defineLocale("ar", { months: fe, monthsShort: fe, weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/‏M/‏YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /\u0635|\u0645/, isPM: function(e2) {
        return "م" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "ص" : "م";
      }, calendar: { sameDay: "[اليوم عند الساعة] LT", nextDay: "[غدًا عند الساعة] LT", nextWeek: "dddd [عند الساعة] LT", lastDay: "[أمس عند الساعة] LT", lastWeek: "dddd [عند الساعة] LT", sameElse: "L" }, relativeTime: { future: "بعد %s", past: "منذ %s", s: S("s"), ss: S("s"), m: S("m"), mm: S("m"), h: S("h"), hh: S("h"), d: S("d"), dd: S("d"), M: S("M"), MM: S("M"), y: S("y"), yy: S("y") }, preparse: function(e2) {
        return e2.replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g, function(e3) {
          return Kt[e3];
        }).replace(/\u060c/g, ",");
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return Bt[e3];
        }).replace(/,/g, "،");
      }, week: { dow: 6, doy: 12 } }), { 1: "-inci", 5: "-inci", 8: "-inci", 70: "-inci", 80: "-inci", 2: "-nci", 7: "-nci", 20: "-nci", 50: "-nci", 3: "-üncü", 4: "-üncü", 100: "-üncü", 6: "-ncı", 9: "-uncu", 10: "-uncu", 30: "-uncu", 60: "-ıncı", 90: "-ıncı" });
      function Qt(e2, a2, t2) {
        return "m" === t2 ? a2 ? "хвіліна" : "хвіліну" : "h" === t2 ? a2 ? "гадзіна" : "гадзіну" : e2 + " " + (e2 = +e2, a2 = (a2 = { ss: a2 ? "секунда_секунды_секунд" : "секунду_секунды_секунд", mm: a2 ? "хвіліна_хвіліны_хвілін" : "хвіліну_хвіліны_хвілін", hh: a2 ? "гадзіна_гадзіны_гадзін" : "гадзіну_гадзіны_гадзін", dd: "дзень_дні_дзён", MM: "месяц_месяцы_месяцаў", yy: "год_гады_гадоў" }[t2]).split("_"), e2 % 10 == 1 && e2 % 100 != 11 ? a2[0] : 2 <= e2 % 10 && e2 % 10 <= 4 && (e2 % 100 < 10 || 20 <= e2 % 100) ? a2[1] : a2[2]);
      }
      c.defineLocale("az", { months: "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"), monthsShort: "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"), weekdays: "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"), weekdaysShort: "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"), weekdaysMin: "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[bugün saat] LT", nextDay: "[sabah saat] LT", nextWeek: "[gələn həftə] dddd [saat] LT", lastDay: "[dünən] LT", lastWeek: "[keçən həftə] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s sonra", past: "%s əvvəl", s: "bir neçə saniyə", ss: "%d saniyə", m: "bir dəqiqə", mm: "%d dəqiqə", h: "bir saat", hh: "%d saat", d: "bir gün", dd: "%d gün", M: "bir ay", MM: "%d ay", y: "bir il", yy: "%d il" }, meridiemParse: /gec\u0259|s\u0259h\u0259r|g\xfcnd\xfcz|ax\u015fam/, isPM: function(e2) {
        return /^(g\xfcnd\xfcz|ax\u015fam)$/.test(e2);
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "gecə" : e2 < 12 ? "səhər" : e2 < 17 ? "gündüz" : "axşam";
      }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0131nc\u0131|inci|nci|\xfcnc\xfc|nc\u0131|uncu)/, ordinal: function(e2) {
        var a2;
        return 0 === e2 ? e2 + "-ıncı" : e2 + ($t[a2 = e2 % 10] || $t[e2 % 100 - a2] || $t[100 <= e2 ? 100 : null]);
      }, week: { dow: 1, doy: 7 } }), c.defineLocale("be", { months: { format: "студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"), standalone: "студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_") }, monthsShort: "студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"), weekdays: { format: "нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"), standalone: "нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"), isFormat: /\[ ?[\u0423\u0443\u045e] ?(?:\u043c\u0456\u043d\u0443\u043b\u0443\u044e|\u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0443\u044e)? ?\] ?dddd/ }, weekdaysShort: "нд_пн_ат_ср_чц_пт_сб".split("_"), weekdaysMin: "нд_пн_ат_ср_чц_пт_сб".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY г.", LLL: "D MMMM YYYY г., HH:mm", LLLL: "dddd, D MMMM YYYY г., HH:mm" }, calendar: { sameDay: "[Сёння ў] LT", nextDay: "[Заўтра ў] LT", lastDay: "[Учора ў] LT", nextWeek: function() {
        return "[У] dddd [ў] LT";
      }, lastWeek: function() {
        switch (this.day()) {
          case 0:
          case 3:
          case 5:
          case 6:
            return "[У мінулую] dddd [ў] LT";
          case 1:
          case 2:
          case 4:
            return "[У мінулы] dddd [ў] LT";
        }
      }, sameElse: "L" }, relativeTime: { future: "праз %s", past: "%s таму", s: "некалькі секунд", m: Qt, mm: Qt, h: Qt, hh: Qt, d: "дзень", dd: Qt, M: "месяц", MM: Qt, y: "год", yy: Qt }, meridiemParse: /\u043d\u043e\u0447\u044b|\u0440\u0430\u043d\u0456\u0446\u044b|\u0434\u043d\u044f|\u0432\u0435\u0447\u0430\u0440\u0430/, isPM: function(e2) {
        return /^(\u0434\u043d\u044f|\u0432\u0435\u0447\u0430\u0440\u0430)$/.test(e2);
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "ночы" : e2 < 12 ? "раніцы" : e2 < 17 ? "дня" : "вечара";
      }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0456|\u044b|\u0433\u0430)/, ordinal: function(e2, a2) {
        switch (a2) {
          case "M":
          case "d":
          case "DDD":
          case "w":
          case "W":
            return e2 % 10 != 2 && e2 % 10 != 3 || e2 % 100 == 12 || e2 % 100 == 13 ? e2 + "-ы" : e2 + "-і";
          case "D":
            return e2 + "-га";
          default:
            return e2;
        }
      }, week: { dow: 1, doy: 7 } }), c.defineLocale("bg", { months: "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"), monthsShort: "яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"), weekdays: "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"), weekdaysShort: "нед_пон_вто_сря_чет_пет_съб".split("_"), weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "D.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[Днес в] LT", nextDay: "[Утре в] LT", nextWeek: "dddd [в] LT", lastDay: "[Вчера в] LT", lastWeek: function() {
        switch (this.day()) {
          case 0:
          case 3:
          case 6:
            return "[Миналата] dddd [в] LT";
          case 1:
          case 2:
          case 4:
          case 5:
            return "[Миналия] dddd [в] LT";
        }
      }, sameElse: "L" }, relativeTime: { future: "след %s", past: "преди %s", s: "няколко секунди", ss: "%d секунди", m: "минута", mm: "%d минути", h: "час", hh: "%d часа", d: "ден", dd: "%d дена", w: "седмица", ww: "%d седмици", M: "месец", MM: "%d месеца", y: "година", yy: "%d години" }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0435\u0432|\u0435\u043d|\u0442\u0438|\u0432\u0438|\u0440\u0438|\u043c\u0438)/, ordinal: function(e2) {
        var a2 = e2 % 10, t2 = e2 % 100;
        return 0 === e2 ? e2 + "-ев" : 0 == t2 ? e2 + "-ен" : 10 < t2 && t2 < 20 ? e2 + "-ти" : 1 == a2 ? e2 + "-ви" : 2 == a2 ? e2 + "-ри" : 7 == a2 || 8 == a2 ? e2 + "-ми" : e2 + "-ти";
      }, week: { dow: 1, doy: 7 } }), c.defineLocale("bm", { months: "Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"), monthsShort: "Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"), weekdays: "Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"), weekdaysShort: "Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"), weekdaysMin: "Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "MMMM [tile] D [san] YYYY", LLL: "MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm", LLLL: "dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm" }, calendar: { sameDay: "[Bi lɛrɛ] LT", nextDay: "[Sini lɛrɛ] LT", nextWeek: "dddd [don lɛrɛ] LT", lastDay: "[Kunu lɛrɛ] LT", lastWeek: "dddd [tɛmɛnen lɛrɛ] LT", sameElse: "L" }, relativeTime: { future: "%s kɔnɔ", past: "a bɛ %s bɔ", s: "sanga dama dama", ss: "sekondi %d", m: "miniti kelen", mm: "miniti %d", h: "lɛrɛ kelen", hh: "lɛrɛ %d", d: "tile kelen", dd: "tile %d", M: "kalo kelen", MM: "kalo %d", y: "san kelen", yy: "san %d" }, week: { dow: 1, doy: 4 } });
      var Xt = { 1: "১", 2: "২", 3: "৩", 4: "৪", 5: "৫", 6: "৬", 7: "৭", 8: "৮", 9: "৯", 0: "০" }, es = { "১": "1", "২": "2", "৩": "3", "৪": "4", "৫": "5", "৬": "6", "৭": "7", "৮": "8", "৯": "9", "০": "0" }, as = (c.defineLocale("bn-bd", { months: "জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"), monthsShort: "জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"), weekdays: "রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"), weekdaysShort: "রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"), weekdaysMin: "রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"), longDateFormat: { LT: "A h:mm সময়", LTS: "A h:mm:ss সময়", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm সময়", LLLL: "dddd, D MMMM YYYY, A h:mm সময়" }, calendar: { sameDay: "[আজ] LT", nextDay: "[আগামীকাল] LT", nextWeek: "dddd, LT", lastDay: "[গতকাল] LT", lastWeek: "[গত] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s পরে", past: "%s আগে", s: "কয়েক সেকেন্ড", ss: "%d সেকেন্ড", m: "এক মিনিট", mm: "%d মিনিট", h: "এক ঘন্টা", hh: "%d ঘন্টা", d: "এক দিন", dd: "%d দিন", M: "এক মাস", MM: "%d মাস", y: "এক বছর", yy: "%d বছর" }, preparse: function(e2) {
        return e2.replace(/[\u09e7\u09e8\u09e9\u09ea\u09eb\u09ec\u09ed\u09ee\u09ef\u09e6]/g, function(e3) {
          return es[e3];
        });
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return Xt[e3];
        });
      }, meridiemParse: /\u09b0\u09be\u09a4|\u09ad\u09cb\u09b0|\u09b8\u0995\u09be\u09b2|\u09a6\u09c1\u09aa\u09c1\u09b0|\u09ac\u09bf\u0995\u09be\u09b2|\u09b8\u09a8\u09cd\u09a7\u09cd\u09af\u09be|\u09b0\u09be\u09a4/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "রাত" === a2 ? e2 < 4 ? e2 : e2 + 12 : "ভোর" === a2 || "সকাল" === a2 ? e2 : "দুপুর" === a2 ? 3 <= e2 ? e2 : e2 + 12 : "বিকাল" === a2 || "সন্ধ্যা" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "রাত" : e2 < 6 ? "ভোর" : e2 < 12 ? "সকাল" : e2 < 15 ? "দুপুর" : e2 < 18 ? "বিকাল" : e2 < 20 ? "সন্ধ্যা" : "রাত";
      }, week: { dow: 0, doy: 6 } }), { 1: "১", 2: "২", 3: "৩", 4: "৪", 5: "৫", 6: "৬", 7: "৭", 8: "৮", 9: "৯", 0: "০" }), ts = { "১": "1", "২": "2", "৩": "3", "৪": "4", "৫": "5", "৬": "6", "৭": "7", "৮": "8", "৯": "9", "০": "0" }, ss = (c.defineLocale("bn", { months: "জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"), monthsShort: "জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"), weekdays: "রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"), weekdaysShort: "রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"), weekdaysMin: "রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"), longDateFormat: { LT: "A h:mm সময়", LTS: "A h:mm:ss সময়", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm সময়", LLLL: "dddd, D MMMM YYYY, A h:mm সময়" }, calendar: { sameDay: "[আজ] LT", nextDay: "[আগামীকাল] LT", nextWeek: "dddd, LT", lastDay: "[গতকাল] LT", lastWeek: "[গত] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s পরে", past: "%s আগে", s: "কয়েক সেকেন্ড", ss: "%d সেকেন্ড", m: "এক মিনিট", mm: "%d মিনিট", h: "এক ঘন্টা", hh: "%d ঘন্টা", d: "এক দিন", dd: "%d দিন", M: "এক মাস", MM: "%d মাস", y: "এক বছর", yy: "%d বছর" }, preparse: function(e2) {
        return e2.replace(/[\u09e7\u09e8\u09e9\u09ea\u09eb\u09ec\u09ed\u09ee\u09ef\u09e6]/g, function(e3) {
          return ts[e3];
        });
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return as[e3];
        });
      }, meridiemParse: /\u09b0\u09be\u09a4|\u09b8\u0995\u09be\u09b2|\u09a6\u09c1\u09aa\u09c1\u09b0|\u09ac\u09bf\u0995\u09be\u09b2|\u09b0\u09be\u09a4/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "রাত" === a2 && 4 <= e2 || "দুপুর" === a2 && e2 < 5 || "বিকাল" === a2 ? e2 + 12 : e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "রাত" : e2 < 10 ? "সকাল" : e2 < 17 ? "দুপুর" : e2 < 20 ? "বিকাল" : "রাত";
      }, week: { dow: 0, doy: 6 } }), { 1: "༡", 2: "༢", 3: "༣", 4: "༤", 5: "༥", 6: "༦", 7: "༧", 8: "༨", 9: "༩", 0: "༠" }), ns = { "༡": "1", "༢": "2", "༣": "3", "༤": "4", "༥": "5", "༦": "6", "༧": "7", "༨": "8", "༩": "9", "༠": "0" };
      function rs(e2, a2, t2) {
        return e2 + " " + (t2 = { mm: "munutenn", MM: "miz", dd: "devezh" }[t2], 2 !== (e2 = e2) ? t2 : void 0 !== (e2 = { m: "v", b: "v", d: "z" })[(t2 = t2).charAt(0)] ? e2[t2.charAt(0)] + t2.substring(1) : t2);
      }
      c.defineLocale("bo", { months: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"), monthsShort: "ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"), monthsShortRegex: /^(\u0f5f\u0fb3\u0f0b\d{1,2})/, monthsParseExact: true, weekdays: "གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"), weekdaysShort: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"), weekdaysMin: "ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm", LLLL: "dddd, D MMMM YYYY, A h:mm" }, calendar: { sameDay: "[དི་རིང] LT", nextDay: "[སང་ཉིན] LT", nextWeek: "[བདུན་ཕྲག་རྗེས་མ], LT", lastDay: "[ཁ་སང] LT", lastWeek: "[བདུན་ཕྲག་མཐའ་མ] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s ལ་", past: "%s སྔན་ལ", s: "ལམ་སང", ss: "%d སྐར་ཆ།", m: "སྐར་མ་གཅིག", mm: "%d སྐར་མ", h: "ཆུ་ཚོད་གཅིག", hh: "%d ཆུ་ཚོད", d: "ཉིན་གཅིག", dd: "%d ཉིན་", M: "ཟླ་བ་གཅིག", MM: "%d ཟླ་བ", y: "ལོ་གཅིག", yy: "%d ལོ" }, preparse: function(e2) {
        return e2.replace(/[\u0f21\u0f22\u0f23\u0f24\u0f25\u0f26\u0f27\u0f28\u0f29\u0f20]/g, function(e3) {
          return ns[e3];
        });
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return ss[e3];
        });
      }, meridiemParse: /\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c|\u0f5e\u0f7c\u0f42\u0f66\u0f0b\u0f40\u0f66|\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f74\u0f44|\u0f51\u0f42\u0f7c\u0f44\u0f0b\u0f51\u0f42|\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "མཚན་མོ" === a2 && 4 <= e2 || "ཉིན་གུང" === a2 && e2 < 5 || "དགོང་དག" === a2 ? e2 + 12 : e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "མཚན་མོ" : e2 < 10 ? "ཞོགས་ཀས" : e2 < 17 ? "ཉིན་གུང" : e2 < 20 ? "དགོང་དག" : "མཚན་མོ";
      }, week: { dow: 0, doy: 6 } });
      Ye = [/^gen/i, /^c[\u02bc\']hwe/i, /^meu/i, /^ebr/i, /^mae/i, /^(mez|eve)/i, /^gou/i, /^eos/i, /^gwe/i, /^her/i, /^du/i, /^ker/i], Ie = /^(genver|c[\u02bc\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[\u02bc\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i, _ = [/^Su/i, /^Lu/i, /^Me([^r]|$)/i, /^Mer/i, /^Ya/i, /^Gw/i, /^Sa/i];
      function ds(e2, a2, t2) {
        var s2 = e2 + " ";
        switch (t2) {
          case "ss":
            return s2 += 1 === e2 ? "sekunda" : 2 === e2 || 3 === e2 || 4 === e2 ? "sekunde" : "sekundi";
          case "mm":
            return s2 += 1 !== e2 && (2 === e2 || 3 === e2 || 4 === e2) ? "minute" : "minuta";
          case "h":
            return "jedan sat";
          case "hh":
            return s2 += 1 === e2 ? "sat" : 2 === e2 || 3 === e2 || 4 === e2 ? "sata" : "sati";
          case "dd":
            return s2 += 1 === e2 ? "dan" : "dana";
          case "MM":
            return s2 += 1 === e2 ? "mjesec" : 2 === e2 || 3 === e2 || 4 === e2 ? "mjeseca" : "mjeseci";
          case "yy":
            return s2 += 1 !== e2 && (2 === e2 || 3 === e2 || 4 === e2) ? "godine" : "godina";
        }
      }
      c.defineLocale("br", { months: "Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"), monthsShort: "Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"), weekdays: "Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"), weekdaysShort: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"), weekdaysMin: "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"), weekdaysParse: _, fullWeekdaysParse: [/^sul/i, /^lun/i, /^meurzh/i, /^merc[\u02bc\']her/i, /^yaou/i, /^gwener/i, /^sadorn/i], shortWeekdaysParse: [/^Sul/i, /^Lun/i, /^Meu/i, /^Mer/i, /^Yao/i, /^Gwe/i, /^Sad/i], minWeekdaysParse: _, monthsRegex: Ie, monthsShortRegex: Ie, monthsStrictRegex: /^(genver|c[\u02bc\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i, monthsShortStrictRegex: /^(gen|c[\u02bc\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i, monthsParse: Ye, longMonthsParse: Ye, shortMonthsParse: Ye, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [a viz] MMMM YYYY", LLL: "D [a viz] MMMM YYYY HH:mm", LLLL: "dddd, D [a viz] MMMM YYYY HH:mm" }, calendar: { sameDay: "[Hiziv da] LT", nextDay: "[Warcʼhoazh da] LT", nextWeek: "dddd [da] LT", lastDay: "[Decʼh da] LT", lastWeek: "dddd [paset da] LT", sameElse: "L" }, relativeTime: { future: "a-benn %s", past: "%s ʼzo", s: "un nebeud segondennoù", ss: "%d eilenn", m: "ur vunutenn", mm: rs, h: "un eur", hh: "%d eur", d: "un devezh", dd: rs, M: "ur miz", MM: rs, y: "ur bloaz", yy: function(e2) {
        switch (function e3(a2) {
          if (9 < a2)
            return e3(a2 % 10);
          return a2;
        }(e2)) {
          case 1:
          case 3:
          case 4:
          case 5:
          case 9:
            return e2 + " bloaz";
          default:
            return e2 + " vloaz";
        }
      } }, dayOfMonthOrdinalParse: /\d{1,2}(a\xf1|vet)/, ordinal: function(e2) {
        return e2 + (1 === e2 ? "añ" : "vet");
      }, week: { dow: 1, doy: 4 }, meridiemParse: /a.m.|g.m./, isPM: function(e2) {
        return "g.m." === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "a.m." : "g.m.";
      } }), c.defineLocale("bs", { months: "januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"), monthsParseExact: true, weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function() {
        switch (this.day()) {
          case 0:
            return "[u] [nedjelju] [u] LT";
          case 3:
            return "[u] [srijedu] [u] LT";
          case 6:
            return "[u] [subotu] [u] LT";
          case 1:
          case 2:
          case 4:
          case 5:
            return "[u] dddd [u] LT";
        }
      }, lastDay: "[jučer u] LT", lastWeek: function() {
        switch (this.day()) {
          case 0:
          case 3:
            return "[prošlu] dddd [u] LT";
          case 6:
            return "[prošle] [subote] [u] LT";
          case 1:
          case 2:
          case 4:
          case 5:
            return "[prošli] dddd [u] LT";
        }
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "par sekundi", ss: ds, m: function(e2, a2, t2, s2) {
        switch (t2) {
          case "m":
            return a2 ? "jedna minuta" : s2 ? "jednu minutu" : "jedne minute";
        }
      }, mm: ds, h: ds, hh: ds, d: "dan", dd: ds, M: "mjesec", MM: ds, y: "godinu", yy: ds }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }), c.defineLocale("ca", { months: { standalone: "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"), format: "de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"), isFormat: /D[oD]?(\s)+MMMM/ }, monthsShort: "gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"), monthsParseExact: true, weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"), weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"), weekdaysMin: "dg_dl_dt_dc_dj_dv_ds".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM [de] YYYY", ll: "D MMM YYYY", LLL: "D MMMM [de] YYYY [a les] H:mm", lll: "D MMM YYYY, H:mm", LLLL: "dddd D MMMM [de] YYYY [a les] H:mm", llll: "ddd D MMM YYYY, H:mm" }, calendar: { sameDay: function() {
        return "[avui a " + (1 !== this.hours() ? "les" : "la") + "] LT";
      }, nextDay: function() {
        return "[demà a " + (1 !== this.hours() ? "les" : "la") + "] LT";
      }, nextWeek: function() {
        return "dddd [a " + (1 !== this.hours() ? "les" : "la") + "] LT";
      }, lastDay: function() {
        return "[ahir a " + (1 !== this.hours() ? "les" : "la") + "] LT";
      }, lastWeek: function() {
        return "[el] dddd [passat a " + (1 !== this.hours() ? "les" : "la") + "] LT";
      }, sameElse: "L" }, relativeTime: { future: "d'aquí %s", past: "fa %s", s: "uns segons", ss: "%d segons", m: "un minut", mm: "%d minuts", h: "una hora", hh: "%d hores", d: "un dia", dd: "%d dies", M: "un mes", MM: "%d mesos", y: "un any", yy: "%d anys" }, dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|\xe8|a)/, ordinal: function(e2, a2) {
        return e2 + ("w" !== a2 && "W" !== a2 ? 1 === e2 ? "r" : 2 === e2 ? "n" : 3 === e2 ? "r" : 4 === e2 ? "t" : "è" : "a");
      }, week: { dow: 1, doy: 4 } });
      ye = { standalone: "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"), format: "ledna_února_března_dubna_května_června_července_srpna_září_října_listopadu_prosince".split("_"), isFormat: /DD?[o.]?(\[[^\[\]]*\]|\s)+MMMM/ }, na = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"), m = [/^led/i, /^\xfano/i, /^b\u0159e/i, /^dub/i, /^kv\u011b/i, /^(\u010dvn|\u010derven$|\u010dervna)/i, /^(\u010dvc|\u010dervenec|\u010dervence)/i, /^srp/i, /^z\xe1\u0159/i, /^\u0159\xedj/i, /^lis/i, /^pro/i], t = /^(leden|\xfanor|b\u0159ezen|duben|kv\u011bten|\u010dervenec|\u010dervence|\u010derven|\u010dervna|srpen|z\xe1\u0159\xed|\u0159\xedjen|listopad|prosinec|led|\xfano|b\u0159e|dub|kv\u011b|\u010dvn|\u010dvc|srp|z\xe1\u0159|\u0159\xedj|lis|pro)/i;
      function _s(e2) {
        return 1 < e2 && e2 < 5 && 1 != ~~(e2 / 10);
      }
      function j(e2, a2, t2, s2) {
        var n2 = e2 + " ";
        switch (t2) {
          case "s":
            return a2 || s2 ? "pár sekund" : "pár sekundami";
          case "ss":
            return a2 || s2 ? n2 + (_s(e2) ? "sekundy" : "sekund") : n2 + "sekundami";
          case "m":
            return a2 ? "minuta" : s2 ? "minutu" : "minutou";
          case "mm":
            return a2 || s2 ? n2 + (_s(e2) ? "minuty" : "minut") : n2 + "minutami";
          case "h":
            return a2 ? "hodina" : s2 ? "hodinu" : "hodinou";
          case "hh":
            return a2 || s2 ? n2 + (_s(e2) ? "hodiny" : "hodin") : n2 + "hodinami";
          case "d":
            return a2 || s2 ? "den" : "dnem";
          case "dd":
            return a2 || s2 ? n2 + (_s(e2) ? "dny" : "dní") : n2 + "dny";
          case "M":
            return a2 || s2 ? "měsíc" : "měsícem";
          case "MM":
            return a2 || s2 ? n2 + (_s(e2) ? "měsíce" : "měsíců") : n2 + "měsíci";
          case "y":
            return a2 || s2 ? "rok" : "rokem";
          case "yy":
            return a2 || s2 ? n2 + (_s(e2) ? "roky" : "let") : n2 + "lety";
        }
      }
      function is(e2, a2, t2, s2) {
        e2 = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [e2 + " Tage", e2 + " Tagen"], w: ["eine Woche", "einer Woche"], M: ["ein Monat", "einem Monat"], MM: [e2 + " Monate", e2 + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [e2 + " Jahre", e2 + " Jahren"] };
        return a2 ? e2[t2][0] : e2[t2][1];
      }
      function os(e2, a2, t2, s2) {
        e2 = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [e2 + " Tage", e2 + " Tagen"], w: ["eine Woche", "einer Woche"], M: ["ein Monat", "einem Monat"], MM: [e2 + " Monate", e2 + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [e2 + " Jahre", e2 + " Jahren"] };
        return a2 ? e2[t2][0] : e2[t2][1];
      }
      function ms(e2, a2, t2, s2) {
        e2 = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [e2 + " Tage", e2 + " Tagen"], w: ["eine Woche", "einer Woche"], M: ["ein Monat", "einem Monat"], MM: [e2 + " Monate", e2 + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [e2 + " Jahre", e2 + " Jahren"] };
        return a2 ? e2[t2][0] : e2[t2][1];
      }
      c.defineLocale("cs", { months: ye, monthsShort: na, monthsRegex: t, monthsShortRegex: t, monthsStrictRegex: /^(leden|ledna|\xfanora|\xfanor|b\u0159ezen|b\u0159ezna|duben|dubna|kv\u011bten|kv\u011btna|\u010dervenec|\u010dervence|\u010derven|\u010dervna|srpen|srpna|z\xe1\u0159\xed|\u0159\xedjen|\u0159\xedjna|listopadu|listopad|prosinec|prosince)/i, monthsShortStrictRegex: /^(led|\xfano|b\u0159e|dub|kv\u011b|\u010dvn|\u010dvc|srp|z\xe1\u0159|\u0159\xedj|lis|pro)/i, monthsParse: m, longMonthsParse: m, shortMonthsParse: m, weekdays: "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"), weekdaysShort: "ne_po_út_st_čt_pá_so".split("_"), weekdaysMin: "ne_po_út_st_čt_pá_so".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd D. MMMM YYYY H:mm", l: "D. M. YYYY" }, calendar: { sameDay: "[dnes v] LT", nextDay: "[zítra v] LT", nextWeek: function() {
        switch (this.day()) {
          case 0:
            return "[v neděli v] LT";
          case 1:
          case 2:
            return "[v] dddd [v] LT";
          case 3:
            return "[ve středu v] LT";
          case 4:
            return "[ve čtvrtek v] LT";
          case 5:
            return "[v pátek v] LT";
          case 6:
            return "[v sobotu v] LT";
        }
      }, lastDay: "[včera v] LT", lastWeek: function() {
        switch (this.day()) {
          case 0:
            return "[minulou neděli v] LT";
          case 1:
          case 2:
            return "[minulé] dddd [v] LT";
          case 3:
            return "[minulou středu v] LT";
          case 4:
          case 5:
            return "[minulý] dddd [v] LT";
          case 6:
            return "[minulou sobotu v] LT";
        }
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "před %s", s: j, ss: j, m: j, mm: j, h: j, hh: j, d: j, dd: j, M: j, MM: j, y: j, yy: j }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("cv", { months: "кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"), monthsShort: "кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"), weekdays: "вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"), weekdaysShort: "выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"), weekdaysMin: "вр_тн_ыт_юн_кҫ_эр_шм".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]", LLL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm", LLLL: "dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm" }, calendar: { sameDay: "[Паян] LT [сехетре]", nextDay: "[Ыран] LT [сехетре]", lastDay: "[Ӗнер] LT [сехетре]", nextWeek: "[Ҫитес] dddd LT [сехетре]", lastWeek: "[Иртнӗ] dddd LT [сехетре]", sameElse: "L" }, relativeTime: { future: function(e2) {
        return e2 + (/\u0441\u0435\u0445\u0435\u0442$/i.exec(e2) ? "рен" : /\u04ab\u0443\u043b$/i.exec(e2) ? "тан" : "ран");
      }, past: "%s каялла", s: "пӗр-ик ҫеккунт", ss: "%d ҫеккунт", m: "пӗр минут", mm: "%d минут", h: "пӗр сехет", hh: "%d сехет", d: "пӗр кун", dd: "%d кун", M: "пӗр уйӑх", MM: "%d уйӑх", y: "пӗр ҫул", yy: "%d ҫул" }, dayOfMonthOrdinalParse: /\d{1,2}-\u043c\u04d7\u0448/, ordinal: "%d-мӗш", week: { dow: 1, doy: 7 } }), c.defineLocale("cy", { months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"), monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"), weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"), weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"), weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Heddiw am] LT", nextDay: "[Yfory am] LT", nextWeek: "dddd [am] LT", lastDay: "[Ddoe am] LT", lastWeek: "dddd [diwethaf am] LT", sameElse: "L" }, relativeTime: { future: "mewn %s", past: "%s yn ôl", s: "ychydig eiliadau", ss: "%d eiliad", m: "munud", mm: "%d munud", h: "awr", hh: "%d awr", d: "diwrnod", dd: "%d diwrnod", M: "mis", MM: "%d mis", y: "blwyddyn", yy: "%d flynedd" }, dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/, ordinal: function(e2) {
        var a2 = "";
        return 20 < e2 ? a2 = 40 === e2 || 50 === e2 || 60 === e2 || 80 === e2 || 100 === e2 ? "fed" : "ain" : 0 < e2 && (a2 = ["", "af", "il", "ydd", "ydd", "ed", "ed", "ed", "fed", "fed", "fed", "eg", "fed", "eg", "eg", "fed", "eg", "eg", "fed", "eg", "fed"][e2]), e2 + a2;
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("da", { months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"), weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"), weekdaysShort: "søn_man_tir_ons_tor_fre_lør".split("_"), weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd [d.] D. MMMM YYYY [kl.] HH:mm" }, calendar: { sameDay: "[i dag kl.] LT", nextDay: "[i morgen kl.] LT", nextWeek: "på dddd [kl.] LT", lastDay: "[i går kl.] LT", lastWeek: "[i] dddd[s kl.] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s siden", s: "få sekunder", ss: "%d sekunder", m: "et minut", mm: "%d minutter", h: "en time", hh: "%d timer", d: "en dag", dd: "%d dage", M: "en måned", MM: "%d måneder", y: "et år", yy: "%d år" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("de-at", { months: "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"), monthsParseExact: true, weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[heute um] LT [Uhr]", sameElse: "L", nextDay: "[morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", ss: "%d Sekunden", m: is, mm: "%d Minuten", h: is, hh: "%d Stunden", d: is, dd: is, w: is, ww: "%d Wochen", M: is, MM: is, y: is, yy: is }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("de-ch", { months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"), monthsParseExact: true, weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[heute um] LT [Uhr]", sameElse: "L", nextDay: "[morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", ss: "%d Sekunden", m: os, mm: "%d Minuten", h: os, hh: "%d Stunden", d: os, dd: os, w: os, ww: "%d Wochen", M: os, MM: os, y: os, yy: os }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("de", { months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"), monthsParseExact: true, weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[heute um] LT [Uhr]", sameElse: "L", nextDay: "[morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", ss: "%d Sekunden", m: ms, mm: "%d Minuten", h: ms, hh: "%d Stunden", d: ms, dd: ms, w: ms, ww: "%d Wochen", M: ms, MM: ms, y: ms, yy: ms }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } });
      o = ["ޖެނުއަރީ", "ފެބްރުއަރީ", "މާރިޗު", "އޭޕްރީލު", "މޭ", "ޖޫން", "ޖުލައި", "އޯގަސްޓު", "ސެޕްޓެމްބަރު", "އޮކްޓޯބަރު", "ނޮވެމްބަރު", "ޑިސެމްބަރު"], n = ["އާދިއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"];
      c.defineLocale("dv", { months: o, monthsShort: o, weekdays: n, weekdaysShort: n, weekdaysMin: "އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/M/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /\u0789\u0786|\u0789\u078a/, isPM: function(e2) {
        return "މފ" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "މކ" : "މފ";
      }, calendar: { sameDay: "[މިއަދު] LT", nextDay: "[މާދަމާ] LT", nextWeek: "dddd LT", lastDay: "[އިއްޔެ] LT", lastWeek: "[ފާއިތުވި] dddd LT", sameElse: "L" }, relativeTime: { future: "ތެރޭގައި %s", past: "ކުރިން %s", s: "ސިކުންތުކޮޅެއް", ss: "d% ސިކުންތު", m: "މިނިޓެއް", mm: "މިނިޓު %d", h: "ގަޑިއިރެއް", hh: "ގަޑިއިރު %d", d: "ދުވަހެއް", dd: "ދުވަސް %d", M: "މަހެއް", MM: "މަސް %d", y: "އަހަރެއް", yy: "އަހަރު %d" }, preparse: function(e2) {
        return e2.replace(/\u060c/g, ",");
      }, postformat: function(e2) {
        return e2.replace(/,/g, "،");
      }, week: { dow: 7, doy: 12 } }), c.defineLocale("el", { monthsNominativeEl: "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"), monthsGenitiveEl: "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"), months: function(e2, a2) {
        return e2 ? ("string" == typeof a2 && /D/.test(a2.substring(0, a2.indexOf("MMMM"))) ? this._monthsGenitiveEl : this._monthsNominativeEl)[e2.month()] : this._monthsNominativeEl;
      }, monthsShort: "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"), weekdays: "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"), weekdaysShort: "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"), weekdaysMin: "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"), meridiem: function(e2, a2, t2) {
        return 11 < e2 ? t2 ? "μμ" : "ΜΜ" : t2 ? "πμ" : "ΠΜ";
      }, isPM: function(e2) {
        return "μ" === (e2 + "").toLowerCase()[0];
      }, meridiemParse: /[\u03a0\u039c]\.?\u039c?\.?/i, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendarEl: { sameDay: "[Σήμερα {}] LT", nextDay: "[Αύριο {}] LT", nextWeek: "dddd [{}] LT", lastDay: "[Χθες {}] LT", lastWeek: function() {
        switch (this.day()) {
          case 6:
            return "[το προηγούμενο] dddd [{}] LT";
          default:
            return "[την προηγούμενη] dddd [{}] LT";
        }
      }, sameElse: "L" }, calendar: function(e2, a2) {
        var t2, e2 = this._calendarEl[e2], s2 = a2 && a2.hours();
        return t2 = e2, (e2 = "undefined" != typeof Function && t2 instanceof Function || "[object Function]" === Object.prototype.toString.call(t2) ? e2.apply(a2) : e2).replace("{}", s2 % 12 == 1 ? "στη" : "στις");
      }, relativeTime: { future: "σε %s", past: "%s πριν", s: "λίγα δευτερόλεπτα", ss: "%d δευτερόλεπτα", m: "ένα λεπτό", mm: "%d λεπτά", h: "μία ώρα", hh: "%d ώρες", d: "μία μέρα", dd: "%d μέρες", M: "ένας μήνας", MM: "%d μήνες", y: "ένας χρόνος", yy: "%d χρόνια" }, dayOfMonthOrdinalParse: /\d{1,2}\u03b7/, ordinal: "%dη", week: { dow: 1, doy: 4 } }), c.defineLocale("en-au", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function(e2) {
        var a2 = e2 % 10;
        return e2 + (1 == ~~(e2 % 100 / 10) ? "th" : 1 == a2 ? "st" : 2 == a2 ? "nd" : 3 == a2 ? "rd" : "th");
      }, week: { dow: 0, doy: 4 } }), c.defineLocale("en-ca", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "YYYY-MM-DD", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function(e2) {
        var a2 = e2 % 10;
        return e2 + (1 == ~~(e2 % 100 / 10) ? "th" : 1 == a2 ? "st" : 2 == a2 ? "nd" : 3 == a2 ? "rd" : "th");
      } }), c.defineLocale("en-gb", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function(e2) {
        var a2 = e2 % 10;
        return e2 + (1 == ~~(e2 % 100 / 10) ? "th" : 1 == a2 ? "st" : 2 == a2 ? "nd" : 3 == a2 ? "rd" : "th");
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("en-ie", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function(e2) {
        var a2 = e2 % 10;
        return e2 + (1 == ~~(e2 % 100 / 10) ? "th" : 1 == a2 ? "st" : 2 == a2 ? "nd" : 3 == a2 ? "rd" : "th");
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("en-il", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function(e2) {
        var a2 = e2 % 10;
        return e2 + (1 == ~~(e2 % 100 / 10) ? "th" : 1 == a2 ? "st" : 2 == a2 ? "nd" : 3 == a2 ? "rd" : "th");
      } }), c.defineLocale("en-in", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function(e2) {
        var a2 = e2 % 10;
        return e2 + (1 == ~~(e2 % 100 / 10) ? "th" : 1 == a2 ? "st" : 2 == a2 ? "nd" : 3 == a2 ? "rd" : "th");
      }, week: { dow: 0, doy: 6 } }), c.defineLocale("en-nz", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function(e2) {
        var a2 = e2 % 10;
        return e2 + (1 == ~~(e2 % 100 / 10) ? "th" : 1 == a2 ? "st" : 2 == a2 ? "nd" : 3 == a2 ? "rd" : "th");
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("en-sg", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function(e2) {
        var a2 = e2 % 10;
        return e2 + (1 == ~~(e2 % 100 / 10) ? "th" : 1 == a2 ? "st" : 2 == a2 ? "nd" : 3 == a2 ? "rd" : "th");
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("eo", { months: "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"), monthsShort: "jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"), weekdays: "dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"), weekdaysShort: "dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"), weekdaysMin: "di_lu_ma_me_ĵa_ve_sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "[la] D[-an de] MMMM, YYYY", LLL: "[la] D[-an de] MMMM, YYYY HH:mm", LLLL: "dddd[n], [la] D[-an de] MMMM, YYYY HH:mm", llll: "ddd, [la] D[-an de] MMM, YYYY HH:mm" }, meridiemParse: /[ap]\.t\.m/i, isPM: function(e2) {
        return "p" === e2.charAt(0).toLowerCase();
      }, meridiem: function(e2, a2, t2) {
        return 11 < e2 ? t2 ? "p.t.m." : "P.T.M." : t2 ? "a.t.m." : "A.T.M.";
      }, calendar: { sameDay: "[Hodiaŭ je] LT", nextDay: "[Morgaŭ je] LT", nextWeek: "dddd[n je] LT", lastDay: "[Hieraŭ je] LT", lastWeek: "[pasintan] dddd[n je] LT", sameElse: "L" }, relativeTime: { future: "post %s", past: "antaŭ %s", s: "kelkaj sekundoj", ss: "%d sekundoj", m: "unu minuto", mm: "%d minutoj", h: "unu horo", hh: "%d horoj", d: "unu tago", dd: "%d tagoj", M: "unu monato", MM: "%d monatoj", y: "unu jaro", yy: "%d jaroj" }, dayOfMonthOrdinalParse: /\d{1,2}a/, ordinal: "%da", week: { dow: 1, doy: 7 } });
      var us = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"), ls = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), i = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i], ze = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, Ms = (c.defineLocale("es-do", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function(e2, a2) {
        return e2 ? (/-MMM-/.test(a2) ? ls : us)[e2.month()] : us;
      }, monthsRegex: ze, monthsShortRegex: ze, monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i, monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, monthsParse: i, longMonthsParse: i, shortMonthsParse: i, weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY h:mm A", LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A" }, calendar: { sameDay: function() {
        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextDay: function() {
        return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextWeek: function() {
        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastDay: function() {
        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastWeek: function() {
        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", ss: "%d segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", w: "una semana", ww: "%d semanas", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%dº", week: { dow: 1, doy: 4 } }), "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")), hs = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), M = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i], jt = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, cs = (c.defineLocale("es-mx", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function(e2, a2) {
        return e2 ? (/-MMM-/.test(a2) ? hs : Ms)[e2.month()] : Ms;
      }, monthsRegex: jt, monthsShortRegex: jt, monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i, monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, monthsParse: M, longMonthsParse: M, shortMonthsParse: M, weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, calendar: { sameDay: function() {
        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextDay: function() {
        return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextWeek: function() {
        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastDay: function() {
        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastWeek: function() {
        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", ss: "%d segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", w: "una semana", ww: "%d semanas", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%dº", week: { dow: 0, doy: 4 }, invalidDate: "Fecha inválida" }), "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")), Ls = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), xt = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i], v = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, Ys = (c.defineLocale("es-us", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function(e2, a2) {
        return e2 ? (/-MMM-/.test(a2) ? Ls : cs)[e2.month()] : cs;
      }, monthsRegex: v, monthsShortRegex: v, monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i, monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, monthsParse: xt, longMonthsParse: xt, shortMonthsParse: xt, weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "MM/DD/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY h:mm A", LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A" }, calendar: { sameDay: function() {
        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextDay: function() {
        return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextWeek: function() {
        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastDay: function() {
        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastWeek: function() {
        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", ss: "%d segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", w: "una semana", ww: "%d semanas", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%dº", week: { dow: 0, doy: 6 } }), "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")), ys = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), da = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i], pe = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
      function fs(e2, a2, t2, s2) {
        e2 = { s: ["mõne sekundi", "mõni sekund", "paar sekundit"], ss: [e2 + "sekundi", e2 + "sekundit"], m: ["ühe minuti", "üks minut"], mm: [e2 + " minuti", e2 + " minutit"], h: ["ühe tunni", "tund aega", "üks tund"], hh: [e2 + " tunni", e2 + " tundi"], d: ["ühe päeva", "üks päev"], M: ["kuu aja", "kuu aega", "üks kuu"], MM: [e2 + " kuu", e2 + " kuud"], y: ["ühe aasta", "aasta", "üks aasta"], yy: [e2 + " aasta", e2 + " aastat"] };
        return a2 ? e2[t2][2] || e2[t2][1] : s2 ? e2[t2][0] : e2[t2][1];
      }
      c.defineLocale("es", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function(e2, a2) {
        return e2 ? (/-MMM-/.test(a2) ? ys : Ys)[e2.month()] : Ys;
      }, monthsRegex: pe, monthsShortRegex: pe, monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i, monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, monthsParse: da, longMonthsParse: da, shortMonthsParse: da, weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, calendar: { sameDay: function() {
        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextDay: function() {
        return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextWeek: function() {
        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastDay: function() {
        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastWeek: function() {
        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", ss: "%d segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", w: "una semana", ww: "%d semanas", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%dº", week: { dow: 1, doy: 4 }, invalidDate: "Fecha inválida" }), c.defineLocale("et", { months: "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"), monthsShort: "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"), weekdays: "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"), weekdaysShort: "P_E_T_K_N_R_L".split("_"), weekdaysMin: "P_E_T_K_N_R_L".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[Täna,] LT", nextDay: "[Homme,] LT", nextWeek: "[Järgmine] dddd LT", lastDay: "[Eile,] LT", lastWeek: "[Eelmine] dddd LT", sameElse: "L" }, relativeTime: { future: "%s pärast", past: "%s tagasi", s: fs, ss: fs, m: fs, mm: fs, h: fs, hh: fs, d: fs, dd: "%d päeva", M: fs, MM: fs, y: fs, yy: fs }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("eu", { months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"), monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"), monthsParseExact: true, weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"), weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"), weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY[ko] MMMM[ren] D[a]", LLL: "YYYY[ko] MMMM[ren] D[a] HH:mm", LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] HH:mm", l: "YYYY-M-D", ll: "YYYY[ko] MMM D[a]", lll: "YYYY[ko] MMM D[a] HH:mm", llll: "ddd, YYYY[ko] MMM D[a] HH:mm" }, calendar: { sameDay: "[gaur] LT[etan]", nextDay: "[bihar] LT[etan]", nextWeek: "dddd LT[etan]", lastDay: "[atzo] LT[etan]", lastWeek: "[aurreko] dddd LT[etan]", sameElse: "L" }, relativeTime: { future: "%s barru", past: "duela %s", s: "segundo batzuk", ss: "%d segundo", m: "minutu bat", mm: "%d minutu", h: "ordu bat", hh: "%d ordu", d: "egun bat", dd: "%d egun", M: "hilabete bat", MM: "%d hilabete", y: "urte bat", yy: "%d urte" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } });
      var ks = { 1: "۱", 2: "۲", 3: "۳", 4: "۴", 5: "۵", 6: "۶", 7: "۷", 8: "۸", 9: "۹", 0: "۰" }, ps = { "۱": "1", "۲": "2", "۳": "3", "۴": "4", "۵": "5", "۶": "6", "۷": "7", "۸": "8", "۹": "9", "۰": "0" }, Ds = (c.defineLocale("fa", { months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"), monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"), weekdays: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"), weekdaysShort: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"), weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, meridiemParse: /\u0642\u0628\u0644 \u0627\u0632 \u0638\u0647\u0631|\u0628\u0639\u062f \u0627\u0632 \u0638\u0647\u0631/, isPM: function(e2) {
        return /\u0628\u0639\u062f \u0627\u0632 \u0638\u0647\u0631/.test(e2);
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "قبل از ظهر" : "بعد از ظهر";
      }, calendar: { sameDay: "[امروز ساعت] LT", nextDay: "[فردا ساعت] LT", nextWeek: "dddd [ساعت] LT", lastDay: "[دیروز ساعت] LT", lastWeek: "dddd [پیش] [ساعت] LT", sameElse: "L" }, relativeTime: { future: "در %s", past: "%s پیش", s: "چند ثانیه", ss: "%d ثانیه", m: "یک دقیقه", mm: "%d دقیقه", h: "یک ساعت", hh: "%d ساعت", d: "یک روز", dd: "%d روز", M: "یک ماه", MM: "%d ماه", y: "یک سال", yy: "%d سال" }, preparse: function(e2) {
        return e2.replace(/[\u06f0-\u06f9]/g, function(e3) {
          return ps[e3];
        }).replace(/\u060c/g, ",");
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return ks[e3];
        }).replace(/,/g, "،");
      }, dayOfMonthOrdinalParse: /\d{1,2}\u0645/, ordinal: "%dم", week: { dow: 6, doy: 12 } }), "nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" ")), Ts = ["nolla", "yhden", "kahden", "kolmen", "neljän", "viiden", "kuuden", Ds[7], Ds[8], Ds[9]];
      function x(e2, a2, t2, s2) {
        var n2 = "";
        switch (t2) {
          case "s":
            return s2 ? "muutaman sekunnin" : "muutama sekunti";
          case "ss":
            n2 = s2 ? "sekunnin" : "sekuntia";
            break;
          case "m":
            return s2 ? "minuutin" : "minuutti";
          case "mm":
            n2 = s2 ? "minuutin" : "minuuttia";
            break;
          case "h":
            return s2 ? "tunnin" : "tunti";
          case "hh":
            n2 = s2 ? "tunnin" : "tuntia";
            break;
          case "d":
            return s2 ? "päivän" : "päivä";
          case "dd":
            n2 = s2 ? "päivän" : "päivää";
            break;
          case "M":
            return s2 ? "kuukauden" : "kuukausi";
          case "MM":
            n2 = s2 ? "kuukauden" : "kuukautta";
            break;
          case "y":
            return s2 ? "vuoden" : "vuosi";
          case "yy":
            n2 = s2 ? "vuoden" : "vuotta";
            break;
        }
        return t2 = s2, n2 = ((e2 = e2) < 10 ? (t2 ? Ts : Ds)[e2] : e2) + " " + n2;
      }
      c.defineLocale("fi", { months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"), monthsShort: "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"), weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"), weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"), weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD.MM.YYYY", LL: "Do MMMM[ta] YYYY", LLL: "Do MMMM[ta] YYYY, [klo] HH.mm", LLLL: "dddd, Do MMMM[ta] YYYY, [klo] HH.mm", l: "D.M.YYYY", ll: "Do MMM YYYY", lll: "Do MMM YYYY, [klo] HH.mm", llll: "ddd, Do MMM YYYY, [klo] HH.mm" }, calendar: { sameDay: "[tänään] [klo] LT", nextDay: "[huomenna] [klo] LT", nextWeek: "dddd [klo] LT", lastDay: "[eilen] [klo] LT", lastWeek: "[viime] dddd[na] [klo] LT", sameElse: "L" }, relativeTime: { future: "%s päästä", past: "%s sitten", s: x, ss: x, m: x, mm: x, h: x, hh: x, d: x, dd: x, M: x, MM: x, y: x, yy: x }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("fil", { months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"), monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"), weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"), weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"), weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "MM/D/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY HH:mm", LLLL: "dddd, MMMM DD, YYYY HH:mm" }, calendar: { sameDay: "LT [ngayong araw]", nextDay: "[Bukas ng] LT", nextWeek: "LT [sa susunod na] dddd", lastDay: "LT [kahapon]", lastWeek: "LT [noong nakaraang] dddd", sameElse: "L" }, relativeTime: { future: "sa loob ng %s", past: "%s ang nakalipas", s: "ilang segundo", ss: "%d segundo", m: "isang minuto", mm: "%d minuto", h: "isang oras", hh: "%d oras", d: "isang araw", dd: "%d araw", M: "isang buwan", MM: "%d buwan", y: "isang taon", yy: "%d taon" }, dayOfMonthOrdinalParse: /\d{1,2}/, ordinal: function(e2) {
        return e2;
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("fo", { months: "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"), weekdays: "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"), weekdaysShort: "sun_mán_týs_mik_hós_frí_ley".split("_"), weekdaysMin: "su_má_tý_mi_hó_fr_le".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D. MMMM, YYYY HH:mm" }, calendar: { sameDay: "[Í dag kl.] LT", nextDay: "[Í morgin kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[Í gjár kl.] LT", lastWeek: "[síðstu] dddd [kl] LT", sameElse: "L" }, relativeTime: { future: "um %s", past: "%s síðani", s: "fá sekund", ss: "%d sekundir", m: "ein minuttur", mm: "%d minuttir", h: "ein tími", hh: "%d tímar", d: "ein dagur", dd: "%d dagar", M: "ein mánaður", MM: "%d mánaðir", y: "eitt ár", yy: "%d ár" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("fr-ca", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), monthsParseExact: true, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd’hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", ss: "%d secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, dayOfMonthOrdinalParse: /\d{1,2}(er|e)/, ordinal: function(e2, a2) {
        switch (a2) {
          default:
          case "M":
          case "Q":
          case "D":
          case "DDD":
          case "d":
            return e2 + (1 === e2 ? "er" : "e");
          case "w":
          case "W":
            return e2 + (1 === e2 ? "re" : "e");
        }
      } }), c.defineLocale("fr-ch", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), monthsParseExact: true, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd’hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", ss: "%d secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, dayOfMonthOrdinalParse: /\d{1,2}(er|e)/, ordinal: function(e2, a2) {
        switch (a2) {
          default:
          case "M":
          case "Q":
          case "D":
          case "DDD":
          case "d":
            return e2 + (1 === e2 ? "er" : "e");
          case "w":
          case "W":
            return e2 + (1 === e2 ? "re" : "e");
        }
      }, week: { dow: 1, doy: 4 } });
      var u = /(janv\.?|f\xe9vr\.?|mars|avr\.?|mai|juin|juil\.?|ao\xfbt|sept\.?|oct\.?|nov\.?|d\xe9c\.?|janvier|f\xe9vrier|mars|avril|mai|juin|juillet|ao\xfbt|septembre|octobre|novembre|d\xe9cembre)/i, Le = [/^janv/i, /^f\xe9vr/i, /^mars/i, /^avr/i, /^mai/i, /^juin/i, /^juil/i, /^ao\xfbt/i, /^sept/i, /^oct/i, /^nov/i, /^d\xe9c/i], gs = (c.defineLocale("fr", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), monthsRegex: u, monthsShortRegex: u, monthsStrictRegex: /^(janvier|f\xe9vrier|mars|avril|mai|juin|juillet|ao\xfbt|septembre|octobre|novembre|d\xe9cembre)/i, monthsShortStrictRegex: /(janv\.?|f\xe9vr\.?|mars|avr\.?|mai|juin|juil\.?|ao\xfbt|sept\.?|oct\.?|nov\.?|d\xe9c\.?)/i, monthsParse: Le, longMonthsParse: Le, shortMonthsParse: Le, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd’hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", ss: "%d secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", w: "une semaine", ww: "%d semaines", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, dayOfMonthOrdinalParse: /\d{1,2}(er|)/, ordinal: function(e2, a2) {
        switch (a2) {
          case "D":
            return e2 + (1 === e2 ? "er" : "");
          default:
          case "M":
          case "Q":
          case "DDD":
          case "d":
            return e2 + (1 === e2 ? "er" : "e");
          case "w":
          case "W":
            return e2 + (1 === e2 ? "re" : "e");
        }
      }, week: { dow: 1, doy: 4 } }), "jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_")), ws = "jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");
      c.defineLocale("fy", { months: "jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"), monthsShort: function(e2, a2) {
        return e2 ? (/-MMM-/.test(a2) ? ws : gs)[e2.month()] : gs;
      }, monthsParseExact: true, weekdays: "snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"), weekdaysShort: "si._mo._ti._wo._to._fr._so.".split("_"), weekdaysMin: "Si_Mo_Ti_Wo_To_Fr_So".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[hjoed om] LT", nextDay: "[moarn om] LT", nextWeek: "dddd [om] LT", lastDay: "[juster om] LT", lastWeek: "[ôfrûne] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "oer %s", past: "%s lyn", s: "in pear sekonden", ss: "%d sekonden", m: "ien minút", mm: "%d minuten", h: "ien oere", hh: "%d oeren", d: "ien dei", dd: "%d dagen", M: "ien moanne", MM: "%d moannen", y: "ien jier", yy: "%d jierren" }, dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/, ordinal: function(e2) {
        return e2 + (1 === e2 || 8 === e2 || 20 <= e2 ? "ste" : "de");
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("ga", { months: ["Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig"], monthsShort: ["Ean", "Feabh", "Márt", "Aib", "Beal", "Meith", "Iúil", "Lún", "M.F.", "D.F.", "Samh", "Noll"], monthsParseExact: true, weekdays: ["Dé Domhnaigh", "Dé Luain", "Dé Máirt", "Dé Céadaoin", "Déardaoin", "Dé hAoine", "Dé Sathairn"], weekdaysShort: ["Domh", "Luan", "Máirt", "Céad", "Déar", "Aoine", "Sath"], weekdaysMin: ["Do", "Lu", "Má", "Cé", "Dé", "A", "Sa"], longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Inniu ag] LT", nextDay: "[Amárach ag] LT", nextWeek: "dddd [ag] LT", lastDay: "[Inné ag] LT", lastWeek: "dddd [seo caite] [ag] LT", sameElse: "L" }, relativeTime: { future: "i %s", past: "%s ó shin", s: "cúpla soicind", ss: "%d soicind", m: "nóiméad", mm: "%d nóiméad", h: "uair an chloig", hh: "%d uair an chloig", d: "lá", dd: "%d lá", M: "mí", MM: "%d míonna", y: "bliain", yy: "%d bliain" }, dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/, ordinal: function(e2) {
        return e2 + (1 === e2 ? "d" : e2 % 10 == 2 ? "na" : "mh");
      }, week: { dow: 1, doy: 4 } });
      function P(e2, a2, t2, s2) {
        e2 = { s: ["थोडया सॅकंडांनी", "थोडे सॅकंड"], ss: [e2 + " सॅकंडांनी", e2 + " सॅकंड"], m: ["एका मिणटान", "एक मिनूट"], mm: [e2 + " मिणटांनी", e2 + " मिणटां"], h: ["एका वरान", "एक वर"], hh: [e2 + " वरांनी", e2 + " वरां"], d: ["एका दिसान", "एक दीस"], dd: [e2 + " दिसांनी", e2 + " दीस"], M: ["एका म्हयन्यान", "एक म्हयनो"], MM: [e2 + " म्हयन्यानी", e2 + " म्हयने"], y: ["एका वर्सान", "एक वर्स"], yy: [e2 + " वर्सांनी", e2 + " वर्सां"] };
        return s2 ? e2[t2][0] : e2[t2][1];
      }
      function bs(e2, a2, t2, s2) {
        e2 = { s: ["thoddea sekondamni", "thodde sekond"], ss: [e2 + " sekondamni", e2 + " sekond"], m: ["eka mintan", "ek minut"], mm: [e2 + " mintamni", e2 + " mintam"], h: ["eka voran", "ek vor"], hh: [e2 + " voramni", e2 + " voram"], d: ["eka disan", "ek dis"], dd: [e2 + " disamni", e2 + " dis"], M: ["eka mhoinean", "ek mhoino"], MM: [e2 + " mhoineamni", e2 + " mhoine"], y: ["eka vorsan", "ek voros"], yy: [e2 + " vorsamni", e2 + " vorsam"] };
        return s2 ? e2[t2][0] : e2[t2][1];
      }
      c.defineLocale("gd", { months: ["Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd"], monthsShort: ["Faoi", "Gear", "Màrt", "Gibl", "Cèit", "Ògmh", "Iuch", "Lùn", "Sult", "Dàmh", "Samh", "Dùbh"], monthsParseExact: true, weekdays: ["Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"], weekdaysShort: ["Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis"], weekdaysMin: ["Dò", "Lu", "Mà", "Ci", "Ar", "Ha", "Sa"], longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[An-diugh aig] LT", nextDay: "[A-màireach aig] LT", nextWeek: "dddd [aig] LT", lastDay: "[An-dè aig] LT", lastWeek: "dddd [seo chaidh] [aig] LT", sameElse: "L" }, relativeTime: { future: "ann an %s", past: "bho chionn %s", s: "beagan diogan", ss: "%d diogan", m: "mionaid", mm: "%d mionaidean", h: "uair", hh: "%d uairean", d: "latha", dd: "%d latha", M: "mìos", MM: "%d mìosan", y: "bliadhna", yy: "%d bliadhna" }, dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/, ordinal: function(e2) {
        return e2 + (1 === e2 ? "d" : e2 % 10 == 2 ? "na" : "mh");
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("gl", { months: "xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"), monthsShort: "xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"), monthsParseExact: true, weekdays: "domingo_luns_martes_mércores_xoves_venres_sábado".split("_"), weekdaysShort: "dom._lun._mar._mér._xov._ven._sáb.".split("_"), weekdaysMin: "do_lu_ma_mé_xo_ve_sá".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, calendar: { sameDay: function() {
        return "[hoxe " + (1 !== this.hours() ? "ás" : "á") + "] LT";
      }, nextDay: function() {
        return "[mañá " + (1 !== this.hours() ? "ás" : "á") + "] LT";
      }, nextWeek: function() {
        return "dddd [" + (1 !== this.hours() ? "ás" : "a") + "] LT";
      }, lastDay: function() {
        return "[onte " + (1 !== this.hours() ? "á" : "a") + "] LT";
      }, lastWeek: function() {
        return "[o] dddd [pasado " + (1 !== this.hours() ? "ás" : "a") + "] LT";
      }, sameElse: "L" }, relativeTime: { future: function(e2) {
        return 0 === e2.indexOf("un") ? "n" + e2 : "en " + e2;
      }, past: "hai %s", s: "uns segundos", ss: "%d segundos", m: "un minuto", mm: "%d minutos", h: "unha hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un ano", yy: "%d anos" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%dº", week: { dow: 1, doy: 4 } }), c.defineLocale("gom-deva", { months: { standalone: "जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"), format: "जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"), isFormat: /MMMM(\s)+D[oD]?/ }, monthsShort: "जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"), monthsParseExact: true, weekdays: "आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"), weekdaysShort: "आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"), weekdaysMin: "आ_सो_मं_बु_ब्रे_सु_शे".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "A h:mm [वाजतां]", LTS: "A h:mm:ss [वाजतां]", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY A h:mm [वाजतां]", LLLL: "dddd, MMMM Do, YYYY, A h:mm [वाजतां]", llll: "ddd, D MMM YYYY, A h:mm [वाजतां]" }, calendar: { sameDay: "[आयज] LT", nextDay: "[फाल्यां] LT", nextWeek: "[फुडलो] dddd[,] LT", lastDay: "[काल] LT", lastWeek: "[फाटलो] dddd[,] LT", sameElse: "L" }, relativeTime: { future: "%s", past: "%s आदीं", s: P, ss: P, m: P, mm: P, h: P, hh: P, d: P, dd: P, M: P, MM: P, y: P, yy: P }, dayOfMonthOrdinalParse: /\d{1,2}(\u0935\u0947\u0930)/, ordinal: function(e2, a2) {
        switch (a2) {
          case "D":
            return e2 + "वेर";
          default:
          case "M":
          case "Q":
          case "DDD":
          case "d":
          case "w":
          case "W":
            return e2;
        }
      }, week: { dow: 0, doy: 3 }, meridiemParse: /\u0930\u093e\u0924\u0940|\u0938\u0915\u093e\u0933\u0940\u0902|\u0926\u0928\u092a\u093e\u0930\u093e\u0902|\u0938\u093e\u0902\u091c\u0947/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "राती" === a2 ? e2 < 4 ? e2 : e2 + 12 : "सकाळीं" === a2 ? e2 : "दनपारां" === a2 ? 12 < e2 ? e2 : e2 + 12 : "सांजे" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "राती" : e2 < 12 ? "सकाळीं" : e2 < 16 ? "दनपारां" : e2 < 20 ? "सांजे" : "राती";
      } }), c.defineLocale("gom-latn", { months: { standalone: "Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"), format: "Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"), isFormat: /MMMM(\s)+D[oD]?/ }, monthsShort: "Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"), monthsParseExact: true, weekdays: "Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"), weekdaysShort: "Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"), weekdaysMin: "Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "A h:mm [vazta]", LTS: "A h:mm:ss [vazta]", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY A h:mm [vazta]", LLLL: "dddd, MMMM Do, YYYY, A h:mm [vazta]", llll: "ddd, D MMM YYYY, A h:mm [vazta]" }, calendar: { sameDay: "[Aiz] LT", nextDay: "[Faleam] LT", nextWeek: "[Fuddlo] dddd[,] LT", lastDay: "[Kal] LT", lastWeek: "[Fattlo] dddd[,] LT", sameElse: "L" }, relativeTime: { future: "%s", past: "%s adim", s: bs, ss: bs, m: bs, mm: bs, h: bs, hh: bs, d: bs, dd: bs, M: bs, MM: bs, y: bs, yy: bs }, dayOfMonthOrdinalParse: /\d{1,2}(er)/, ordinal: function(e2, a2) {
        switch (a2) {
          case "D":
            return e2 + "er";
          default:
          case "M":
          case "Q":
          case "DDD":
          case "d":
          case "w":
          case "W":
            return e2;
        }
      }, week: { dow: 0, doy: 3 }, meridiemParse: /rati|sokallim|donparam|sanje/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "rati" === a2 ? e2 < 4 ? e2 : e2 + 12 : "sokallim" === a2 ? e2 : "donparam" === a2 ? 12 < e2 ? e2 : e2 + 12 : "sanje" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "rati" : e2 < 12 ? "sokallim" : e2 < 16 ? "donparam" : e2 < 20 ? "sanje" : "rati";
      } });
      var Hs = { 1: "૧", 2: "૨", 3: "૩", 4: "૪", 5: "૫", 6: "૬", 7: "૭", 8: "૮", 9: "૯", 0: "૦" }, Ss = { "૧": "1", "૨": "2", "૩": "3", "૪": "4", "૫": "5", "૬": "6", "૭": "7", "૮": "8", "૯": "9", "૦": "0" }, vs = (c.defineLocale("gu", { months: "જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"), monthsShort: "જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"), monthsParseExact: true, weekdays: "રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"), weekdaysShort: "રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"), weekdaysMin: "ર_સો_મં_બુ_ગુ_શુ_શ".split("_"), longDateFormat: { LT: "A h:mm વાગ્યે", LTS: "A h:mm:ss વાગ્યે", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm વાગ્યે", LLLL: "dddd, D MMMM YYYY, A h:mm વાગ્યે" }, calendar: { sameDay: "[આજ] LT", nextDay: "[કાલે] LT", nextWeek: "dddd, LT", lastDay: "[ગઇકાલે] LT", lastWeek: "[પાછલા] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s મા", past: "%s પહેલા", s: "અમુક પળો", ss: "%d સેકંડ", m: "એક મિનિટ", mm: "%d મિનિટ", h: "એક કલાક", hh: "%d કલાક", d: "એક દિવસ", dd: "%d દિવસ", M: "એક મહિનો", MM: "%d મહિનો", y: "એક વર્ષ", yy: "%d વર્ષ" }, preparse: function(e2) {
        return e2.replace(/[\u0ae7\u0ae8\u0ae9\u0aea\u0aeb\u0aec\u0aed\u0aee\u0aef\u0ae6]/g, function(e3) {
          return Ss[e3];
        });
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return Hs[e3];
        });
      }, meridiemParse: /\u0ab0\u0abe\u0aa4|\u0aac\u0aaa\u0acb\u0ab0|\u0ab8\u0ab5\u0abe\u0ab0|\u0ab8\u0abe\u0a82\u0a9c/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "રાત" === a2 ? e2 < 4 ? e2 : e2 + 12 : "સવાર" === a2 ? e2 : "બપોર" === a2 ? 10 <= e2 ? e2 : e2 + 12 : "સાંજ" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "રાત" : e2 < 10 ? "સવાર" : e2 < 17 ? "બપોર" : e2 < 20 ? "સાંજ" : "રાત";
      }, week: { dow: 0, doy: 6 } }), c.defineLocale("he", { months: "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"), monthsShort: "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"), weekdays: "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"), weekdaysShort: "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"), weekdaysMin: "א_ב_ג_ד_ה_ו_ש".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [ב]MMMM YYYY", LLL: "D [ב]MMMM YYYY HH:mm", LLLL: "dddd, D [ב]MMMM YYYY HH:mm", l: "D/M/YYYY", ll: "D MMM YYYY", lll: "D MMM YYYY HH:mm", llll: "ddd, D MMM YYYY HH:mm" }, calendar: { sameDay: "[היום ב־]LT", nextDay: "[מחר ב־]LT", nextWeek: "dddd [בשעה] LT", lastDay: "[אתמול ב־]LT", lastWeek: "[ביום] dddd [האחרון בשעה] LT", sameElse: "L" }, relativeTime: { future: "בעוד %s", past: "לפני %s", s: "מספר שניות", ss: "%d שניות", m: "דקה", mm: "%d דקות", h: "שעה", hh: function(e2) {
        return 2 === e2 ? "שעתיים" : e2 + " שעות";
      }, d: "יום", dd: function(e2) {
        return 2 === e2 ? "יומיים" : e2 + " ימים";
      }, M: "חודש", MM: function(e2) {
        return 2 === e2 ? "חודשיים" : e2 + " חודשים";
      }, y: "שנה", yy: function(e2) {
        return 2 === e2 ? "שנתיים" : e2 % 10 == 0 && 10 !== e2 ? e2 + " שנה" : e2 + " שנים";
      } }, meridiemParse: /\u05d0\u05d7\u05d4"\u05e6|\u05dc\u05e4\u05e0\u05d4"\u05e6|\u05d0\u05d7\u05e8\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05dc\u05e4\u05e0\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05dc\u05e4\u05e0\u05d5\u05ea \u05d1\u05d5\u05e7\u05e8|\u05d1\u05d1\u05d5\u05e7\u05e8|\u05d1\u05e2\u05e8\u05d1/i, isPM: function(e2) {
        return /^(\u05d0\u05d7\u05d4"\u05e6|\u05d0\u05d7\u05e8\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05d1\u05e2\u05e8\u05d1)$/.test(e2);
      }, meridiem: function(e2, a2, t2) {
        return e2 < 5 ? "לפנות בוקר" : e2 < 10 ? "בבוקר" : e2 < 12 ? t2 ? 'לפנה"צ' : "לפני הצהריים" : e2 < 18 ? t2 ? 'אחה"צ' : "אחרי הצהריים" : "בערב";
      } }), { 1: "१", 2: "२", 3: "३", 4: "४", 5: "५", 6: "६", 7: "७", 8: "८", 9: "९", 0: "०" }), js = { "१": "1", "२": "2", "३": "3", "४": "4", "५": "5", "६": "6", "७": "7", "८": "8", "९": "9", "०": "0" }, a = [/^\u091c\u0928/i, /^\u092b\u093c\u0930|\u092b\u0930/i, /^\u092e\u093e\u0930\u094d\u091a/i, /^\u0905\u092a\u094d\u0930\u0948/i, /^\u092e\u0908/i, /^\u091c\u0942\u0928/i, /^\u091c\u0941\u0932/i, /^\u0905\u0917/i, /^\u0938\u093f\u0924\u0902|\u0938\u093f\u0924/i, /^\u0905\u0915\u094d\u091f\u0942/i, /^\u0928\u0935|\u0928\u0935\u0902/i, /^\u0926\u093f\u0938\u0902|\u0926\u093f\u0938/i];
      function xs(e2, a2, t2) {
        var s2 = e2 + " ";
        switch (t2) {
          case "ss":
            return s2 += 1 === e2 ? "sekunda" : 2 === e2 || 3 === e2 || 4 === e2 ? "sekunde" : "sekundi";
          case "m":
            return a2 ? "jedna minuta" : "jedne minute";
          case "mm":
            return s2 += 1 !== e2 && (2 === e2 || 3 === e2 || 4 === e2) ? "minute" : "minuta";
          case "h":
            return a2 ? "jedan sat" : "jednog sata";
          case "hh":
            return s2 += 1 === e2 ? "sat" : 2 === e2 || 3 === e2 || 4 === e2 ? "sata" : "sati";
          case "dd":
            return s2 += 1 === e2 ? "dan" : "dana";
          case "MM":
            return s2 += 1 === e2 ? "mjesec" : 2 === e2 || 3 === e2 || 4 === e2 ? "mjeseca" : "mjeseci";
          case "yy":
            return s2 += 1 !== e2 && (2 === e2 || 3 === e2 || 4 === e2) ? "godine" : "godina";
        }
      }
      c.defineLocale("hi", { months: { format: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"), standalone: "जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_") }, monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"), weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"), weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"), weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"), longDateFormat: { LT: "A h:mm बजे", LTS: "A h:mm:ss बजे", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm बजे", LLLL: "dddd, D MMMM YYYY, A h:mm बजे" }, monthsParse: a, longMonthsParse: a, shortMonthsParse: [/^\u091c\u0928/i, /^\u092b\u093c\u0930/i, /^\u092e\u093e\u0930\u094d\u091a/i, /^\u0905\u092a\u094d\u0930\u0948/i, /^\u092e\u0908/i, /^\u091c\u0942\u0928/i, /^\u091c\u0941\u0932/i, /^\u0905\u0917/i, /^\u0938\u093f\u0924/i, /^\u0905\u0915\u094d\u091f\u0942/i, /^\u0928\u0935/i, /^\u0926\u093f\u0938/i], monthsRegex: /^(\u091c\u0928\u0935\u0930\u0940|\u091c\u0928\.?|\u092b\u093c\u0930\u0935\u0930\u0940|\u092b\u0930\u0935\u0930\u0940|\u092b\u093c\u0930\.?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\u0932|\u0905\u092a\u094d\u0930\u0948\.?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\u093e\u0908|\u091c\u0941\u0932\.?|\u0905\u0917\u0938\u094d\u0924|\u0905\u0917\.?|\u0938\u093f\u0924\u092e\u094d\u092c\u0930|\u0938\u093f\u0924\u0902\u092c\u0930|\u0938\u093f\u0924\.?|\u0905\u0915\u094d\u091f\u0942\u092c\u0930|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\u092e\u094d\u092c\u0930|\u0928\u0935\u0902\u092c\u0930|\u0928\u0935\.?|\u0926\u093f\u0938\u092e\u094d\u092c\u0930|\u0926\u093f\u0938\u0902\u092c\u0930|\u0926\u093f\u0938\.?)/i, monthsShortRegex: /^(\u091c\u0928\u0935\u0930\u0940|\u091c\u0928\.?|\u092b\u093c\u0930\u0935\u0930\u0940|\u092b\u0930\u0935\u0930\u0940|\u092b\u093c\u0930\.?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\u0932|\u0905\u092a\u094d\u0930\u0948\.?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\u093e\u0908|\u091c\u0941\u0932\.?|\u0905\u0917\u0938\u094d\u0924|\u0905\u0917\.?|\u0938\u093f\u0924\u092e\u094d\u092c\u0930|\u0938\u093f\u0924\u0902\u092c\u0930|\u0938\u093f\u0924\.?|\u0905\u0915\u094d\u091f\u0942\u092c\u0930|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\u092e\u094d\u092c\u0930|\u0928\u0935\u0902\u092c\u0930|\u0928\u0935\.?|\u0926\u093f\u0938\u092e\u094d\u092c\u0930|\u0926\u093f\u0938\u0902\u092c\u0930|\u0926\u093f\u0938\.?)/i, monthsStrictRegex: /^(\u091c\u0928\u0935\u0930\u0940?|\u092b\u093c\u0930\u0935\u0930\u0940|\u092b\u0930\u0935\u0930\u0940?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\u0932?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\u093e\u0908?|\u0905\u0917\u0938\u094d\u0924?|\u0938\u093f\u0924\u092e\u094d\u092c\u0930|\u0938\u093f\u0924\u0902\u092c\u0930|\u0938\u093f\u0924?\.?|\u0905\u0915\u094d\u091f\u0942\u092c\u0930|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\u092e\u094d\u092c\u0930|\u0928\u0935\u0902\u092c\u0930?|\u0926\u093f\u0938\u092e\u094d\u092c\u0930|\u0926\u093f\u0938\u0902\u092c\u0930?)/i, monthsShortStrictRegex: /^(\u091c\u0928\.?|\u092b\u093c\u0930\.?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\.?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\.?|\u0905\u0917\.?|\u0938\u093f\u0924\.?|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\.?|\u0926\u093f\u0938\.?)/i, calendar: { sameDay: "[आज] LT", nextDay: "[कल] LT", nextWeek: "dddd, LT", lastDay: "[कल] LT", lastWeek: "[पिछले] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s में", past: "%s पहले", s: "कुछ ही क्षण", ss: "%d सेकंड", m: "एक मिनट", mm: "%d मिनट", h: "एक घंटा", hh: "%d घंटे", d: "एक दिन", dd: "%d दिन", M: "एक महीने", MM: "%d महीने", y: "एक वर्ष", yy: "%d वर्ष" }, preparse: function(e2) {
        return e2.replace(/[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g, function(e3) {
          return js[e3];
        });
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return vs[e3];
        });
      }, meridiemParse: /\u0930\u093e\u0924|\u0938\u0941\u092c\u0939|\u0926\u094b\u092a\u0939\u0930|\u0936\u093e\u092e/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "रात" === a2 ? e2 < 4 ? e2 : e2 + 12 : "सुबह" === a2 ? e2 : "दोपहर" === a2 ? 10 <= e2 ? e2 : e2 + 12 : "शाम" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "रात" : e2 < 10 ? "सुबह" : e2 < 17 ? "दोपहर" : e2 < 20 ? "शाम" : "रात";
      }, week: { dow: 0, doy: 6 } }), c.defineLocale("hr", { months: { format: "siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"), standalone: "siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_") }, monthsShort: "sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"), monthsParseExact: true, weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "Do MMMM YYYY", LLL: "Do MMMM YYYY H:mm", LLLL: "dddd, Do MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function() {
        switch (this.day()) {
          case 0:
            return "[u] [nedjelju] [u] LT";
          case 3:
            return "[u] [srijedu] [u] LT";
          case 6:
            return "[u] [subotu] [u] LT";
          case 1:
          case 2:
          case 4:
          case 5:
            return "[u] dddd [u] LT";
        }
      }, lastDay: "[jučer u] LT", lastWeek: function() {
        switch (this.day()) {
          case 0:
            return "[prošlu] [nedjelju] [u] LT";
          case 3:
            return "[prošlu] [srijedu] [u] LT";
          case 6:
            return "[prošle] [subote] [u] LT";
          case 1:
          case 2:
          case 4:
          case 5:
            return "[prošli] dddd [u] LT";
        }
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "par sekundi", ss: xs, m: xs, mm: xs, h: xs, hh: xs, d: "dan", dd: xs, M: "mjesec", MM: xs, y: "godinu", yy: xs }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } });
      var Ps = "vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");
      function Os(e2, a2, t2, s2) {
        var n2 = e2;
        switch (t2) {
          case "s":
            return s2 || a2 ? "néhány másodperc" : "néhány másodperce";
          case "ss":
            return n2 + (s2 || a2) ? " másodperc" : " másodperce";
          case "m":
            return "egy" + (s2 || a2 ? " perc" : " perce");
          case "mm":
            return n2 + (s2 || a2 ? " perc" : " perce");
          case "h":
            return "egy" + (s2 || a2 ? " óra" : " órája");
          case "hh":
            return n2 + (s2 || a2 ? " óra" : " órája");
          case "d":
            return "egy" + (s2 || a2 ? " nap" : " napja");
          case "dd":
            return n2 + (s2 || a2 ? " nap" : " napja");
          case "M":
            return "egy" + (s2 || a2 ? " hónap" : " hónapja");
          case "MM":
            return n2 + (s2 || a2 ? " hónap" : " hónapja");
          case "y":
            return "egy" + (s2 || a2 ? " év" : " éve");
          case "yy":
            return n2 + (s2 || a2 ? " év" : " éve");
        }
        return "";
      }
      function Ws(e2) {
        return (e2 ? "" : "[múlt] ") + "[" + Ps[this.day()] + "] LT[-kor]";
      }
      function As(e2) {
        return e2 % 100 == 11 || e2 % 10 != 1;
      }
      function Es(e2, a2, t2, s2) {
        var n2 = e2 + " ";
        switch (t2) {
          case "s":
            return a2 || s2 ? "nokkrar sekúndur" : "nokkrum sekúndum";
          case "ss":
            return As(e2) ? n2 + (a2 || s2 ? "sekúndur" : "sekúndum") : n2 + "sekúnda";
          case "m":
            return a2 ? "mínúta" : "mínútu";
          case "mm":
            return As(e2) ? n2 + (a2 || s2 ? "mínútur" : "mínútum") : a2 ? n2 + "mínúta" : n2 + "mínútu";
          case "hh":
            return As(e2) ? n2 + (a2 || s2 ? "klukkustundir" : "klukkustundum") : n2 + "klukkustund";
          case "d":
            return a2 ? "dagur" : s2 ? "dag" : "degi";
          case "dd":
            return As(e2) ? a2 ? n2 + "dagar" : n2 + (s2 ? "daga" : "dögum") : a2 ? n2 + "dagur" : n2 + (s2 ? "dag" : "degi");
          case "M":
            return a2 ? "mánuður" : s2 ? "mánuð" : "mánuði";
          case "MM":
            return As(e2) ? a2 ? n2 + "mánuðir" : n2 + (s2 ? "mánuði" : "mánuðum") : a2 ? n2 + "mánuður" : n2 + (s2 ? "mánuð" : "mánuði");
          case "y":
            return a2 || s2 ? "ár" : "ári";
          case "yy":
            return As(e2) ? n2 + (a2 || s2 ? "ár" : "árum") : n2 + (a2 || s2 ? "ár" : "ári");
        }
      }
      c.defineLocale("hu", { months: "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"), monthsShort: "jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"), monthsParseExact: true, weekdays: "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"), weekdaysShort: "vas_hét_kedd_sze_csüt_pén_szo".split("_"), weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "YYYY.MM.DD.", LL: "YYYY. MMMM D.", LLL: "YYYY. MMMM D. H:mm", LLLL: "YYYY. MMMM D., dddd H:mm" }, meridiemParse: /de|du/i, isPM: function(e2) {
        return "u" === e2.charAt(1).toLowerCase();
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? true === t2 ? "de" : "DE" : true === t2 ? "du" : "DU";
      }, calendar: { sameDay: "[ma] LT[-kor]", nextDay: "[holnap] LT[-kor]", nextWeek: function() {
        return Ws.call(this, true);
      }, lastDay: "[tegnap] LT[-kor]", lastWeek: function() {
        return Ws.call(this, false);
      }, sameElse: "L" }, relativeTime: { future: "%s múlva", past: "%s", s: Os, ss: Os, m: Os, mm: Os, h: Os, hh: Os, d: Os, dd: Os, M: Os, MM: Os, y: Os, yy: Os }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("hy-am", { months: { format: "հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"), standalone: "հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_") }, monthsShort: "հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"), weekdays: "կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"), weekdaysShort: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"), weekdaysMin: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY թ.", LLL: "D MMMM YYYY թ., HH:mm", LLLL: "dddd, D MMMM YYYY թ., HH:mm" }, calendar: { sameDay: "[այսօր] LT", nextDay: "[վաղը] LT", lastDay: "[երեկ] LT", nextWeek: function() {
        return "dddd [օրը ժամը] LT";
      }, lastWeek: function() {
        return "[անցած] dddd [օրը ժամը] LT";
      }, sameElse: "L" }, relativeTime: { future: "%s հետո", past: "%s առաջ", s: "մի քանի վայրկյան", ss: "%d վայրկյան", m: "րոպե", mm: "%d րոպե", h: "ժամ", hh: "%d ժամ", d: "օր", dd: "%d օր", M: "ամիս", MM: "%d ամիս", y: "տարի", yy: "%d տարի" }, meridiemParse: /\u0563\u056b\u0577\u0565\u0580\u057e\u0561|\u0561\u057c\u0561\u057e\u0578\u057f\u057e\u0561|\u0581\u0565\u0580\u0565\u056f\u057e\u0561|\u0565\u0580\u0565\u056f\u0578\u0575\u0561\u0576/, isPM: function(e2) {
        return /^(\u0581\u0565\u0580\u0565\u056f\u057e\u0561|\u0565\u0580\u0565\u056f\u0578\u0575\u0561\u0576)$/.test(e2);
      }, meridiem: function(e2) {
        return e2 < 4 ? "գիշերվա" : e2 < 12 ? "առավոտվա" : e2 < 17 ? "ցերեկվա" : "երեկոյան";
      }, dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(\u056b\u0576|\u0580\u0564)/, ordinal: function(e2, a2) {
        switch (a2) {
          case "DDD":
          case "w":
          case "W":
          case "DDDo":
            return 1 === e2 ? e2 + "-ին" : e2 + "-րդ";
          default:
            return e2;
        }
      }, week: { dow: 1, doy: 7 } }), c.defineLocale("id", { months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"), monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"), weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"), weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"), weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|siang|sore|malam/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "pagi" === a2 ? e2 : "siang" === a2 ? 11 <= e2 ? e2 : e2 + 12 : "sore" === a2 || "malam" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 11 ? "pagi" : e2 < 15 ? "siang" : e2 < 19 ? "sore" : "malam";
      }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Besok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kemarin pukul] LT", lastWeek: "dddd [lalu pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lalu", s: "beberapa detik", ss: "%d detik", m: "semenit", mm: "%d menit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 0, doy: 6 } }), c.defineLocale("is", { months: "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"), monthsShort: "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"), weekdays: "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"), weekdaysShort: "sun_mán_þri_mið_fim_fös_lau".split("_"), weekdaysMin: "Su_Má_Þr_Mi_Fi_Fö_La".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] H:mm", LLLL: "dddd, D. MMMM YYYY [kl.] H:mm" }, calendar: { sameDay: "[í dag kl.] LT", nextDay: "[á morgun kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[í gær kl.] LT", lastWeek: "[síðasta] dddd [kl.] LT", sameElse: "L" }, relativeTime: { future: "eftir %s", past: "fyrir %s síðan", s: Es, ss: Es, m: Es, mm: Es, h: "klukkustund", hh: Es, d: Es, dd: Es, M: Es, MM: Es, y: Es, yy: Es }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("it-ch", { months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"), monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"), weekdays: "domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"), weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"), weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Oggi alle] LT", nextDay: "[Domani alle] LT", nextWeek: "dddd [alle] LT", lastDay: "[Ieri alle] LT", lastWeek: function() {
        switch (this.day()) {
          case 0:
            return "[la scorsa] dddd [alle] LT";
          default:
            return "[lo scorso] dddd [alle] LT";
        }
      }, sameElse: "L" }, relativeTime: { future: function(e2) {
        return (/^[0-9].+$/.test(e2) ? "tra" : "in") + " " + e2;
      }, past: "%s fa", s: "alcuni secondi", ss: "%d secondi", m: "un minuto", mm: "%d minuti", h: "un'ora", hh: "%d ore", d: "un giorno", dd: "%d giorni", M: "un mese", MM: "%d mesi", y: "un anno", yy: "%d anni" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%dº", week: { dow: 1, doy: 4 } }), c.defineLocale("it", { months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"), monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"), weekdays: "domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"), weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"), weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: function() {
        return "[Oggi a" + (1 < this.hours() ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT";
      }, nextDay: function() {
        return "[Domani a" + (1 < this.hours() ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT";
      }, nextWeek: function() {
        return "dddd [a" + (1 < this.hours() ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT";
      }, lastDay: function() {
        return "[Ieri a" + (1 < this.hours() ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT";
      }, lastWeek: function() {
        switch (this.day()) {
          case 0:
            return "[La scorsa] dddd [a" + (1 < this.hours() ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT";
          default:
            return "[Lo scorso] dddd [a" + (1 < this.hours() ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT";
        }
      }, sameElse: "L" }, relativeTime: { future: "tra %s", past: "%s fa", s: "alcuni secondi", ss: "%d secondi", m: "un minuto", mm: "%d minuti", h: "un'ora", hh: "%d ore", d: "un giorno", dd: "%d giorni", w: "una settimana", ww: "%d settimane", M: "un mese", MM: "%d mesi", y: "un anno", yy: "%d anni" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%dº", week: { dow: 1, doy: 4 } }), c.defineLocale("ja", { eras: [{ since: "2019-05-01", offset: 1, name: "令和", narrow: "㋿", abbr: "R" }, { since: "1989-01-08", until: "2019-04-30", offset: 1, name: "平成", narrow: "㍻", abbr: "H" }, { since: "1926-12-25", until: "1989-01-07", offset: 1, name: "昭和", narrow: "㍼", abbr: "S" }, { since: "1912-07-30", until: "1926-12-24", offset: 1, name: "大正", narrow: "㍽", abbr: "T" }, { since: "1873-01-01", until: "1912-07-29", offset: 6, name: "明治", narrow: "㍾", abbr: "M" }, { since: "0001-01-01", until: "1873-12-31", offset: 1, name: "西暦", narrow: "AD", abbr: "AD" }, { since: "0000-12-31", until: -1 / 0, offset: 1, name: "紀元前", narrow: "BC", abbr: "BC" }], eraYearOrdinalRegex: /(\u5143|\d+)\u5e74/, eraYearOrdinalParse: function(e2, a2) {
        return "元" === a2[1] ? 1 : parseInt(a2[1] || e2, 10);
      }, months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"), weekdaysShort: "日_月_火_水_木_金_土".split("_"), weekdaysMin: "日_月_火_水_木_金_土".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日 HH:mm", LLLL: "YYYY年M月D日 dddd HH:mm", l: "YYYY/MM/DD", ll: "YYYY年M月D日", lll: "YYYY年M月D日 HH:mm", llll: "YYYY年M月D日(ddd) HH:mm" }, meridiemParse: /\u5348\u524d|\u5348\u5f8c/i, isPM: function(e2) {
        return "午後" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "午前" : "午後";
      }, calendar: { sameDay: "[今日] LT", nextDay: "[明日] LT", nextWeek: function(e2) {
        return e2.week() !== this.week() ? "[来週]dddd LT" : "dddd LT";
      }, lastDay: "[昨日] LT", lastWeek: function(e2) {
        return this.week() !== e2.week() ? "[先週]dddd LT" : "dddd LT";
      }, sameElse: "L" }, dayOfMonthOrdinalParse: /\d{1,2}\u65e5/, ordinal: function(e2, a2) {
        switch (a2) {
          case "y":
            return 1 === e2 ? "元年" : e2 + "年";
          case "d":
          case "D":
          case "DDD":
            return e2 + "日";
          default:
            return e2;
        }
      }, relativeTime: { future: "%s後", past: "%s前", s: "数秒", ss: "%d秒", m: "1分", mm: "%d分", h: "1時間", hh: "%d時間", d: "1日", dd: "%d日", M: "1ヶ月", MM: "%dヶ月", y: "1年", yy: "%d年" } }), c.defineLocale("jv", { months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"), monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"), weekdays: "Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"), weekdaysShort: "Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"), weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /enjing|siyang|sonten|ndalu/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "enjing" === a2 ? e2 : "siyang" === a2 ? 11 <= e2 ? e2 : e2 + 12 : "sonten" === a2 || "ndalu" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 11 ? "enjing" : e2 < 15 ? "siyang" : e2 < 19 ? "sonten" : "ndalu";
      }, calendar: { sameDay: "[Dinten puniko pukul] LT", nextDay: "[Mbenjang pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kala wingi pukul] LT", lastWeek: "dddd [kepengker pukul] LT", sameElse: "L" }, relativeTime: { future: "wonten ing %s", past: "%s ingkang kepengker", s: "sawetawis detik", ss: "%d detik", m: "setunggal menit", mm: "%d menit", h: "setunggal jam", hh: "%d jam", d: "sedinten", dd: "%d dinten", M: "sewulan", MM: "%d wulan", y: "setaun", yy: "%d taun" }, week: { dow: 1, doy: 7 } }), c.defineLocale("ka", { months: "იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"), monthsShort: "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"), weekdays: { standalone: "კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"), format: "კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"), isFormat: /(\u10ec\u10d8\u10dc\u10d0|\u10e8\u10d4\u10db\u10d3\u10d4\u10d2)/ }, weekdaysShort: "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"), weekdaysMin: "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[დღეს] LT[-ზე]", nextDay: "[ხვალ] LT[-ზე]", lastDay: "[გუშინ] LT[-ზე]", nextWeek: "[შემდეგ] dddd LT[-ზე]", lastWeek: "[წინა] dddd LT-ზე", sameElse: "L" }, relativeTime: { future: function(e2) {
        return e2.replace(/(\u10ec\u10d0\u10db|\u10ec\u10e3\u10d7|\u10e1\u10d0\u10d0\u10d7|\u10ec\u10d4\u10da|\u10d3\u10e6|\u10d7\u10d5)(\u10d8|\u10d4)/, function(e3, a2, t2) {
          return "ი" === t2 ? a2 + "ში" : a2 + t2 + "ში";
        });
      }, past: function(e2) {
        return /(\u10ec\u10d0\u10db\u10d8|\u10ec\u10e3\u10d7\u10d8|\u10e1\u10d0\u10d0\u10d7\u10d8|\u10d3\u10e6\u10d4|\u10d7\u10d5\u10d4)/.test(e2) ? e2.replace(/(\u10d8|\u10d4)$/, "ის წინ") : /\u10ec\u10d4\u10da\u10d8/.test(e2) ? e2.replace(/\u10ec\u10d4\u10da\u10d8$/, "წლის წინ") : e2;
      }, s: "რამდენიმე წამი", ss: "%d წამი", m: "წუთი", mm: "%d წუთი", h: "საათი", hh: "%d საათი", d: "დღე", dd: "%d დღე", M: "თვე", MM: "%d თვე", y: "წელი", yy: "%d წელი" }, dayOfMonthOrdinalParse: /0|1-\u10da\u10d8|\u10db\u10d4-\d{1,2}|\d{1,2}-\u10d4/, ordinal: function(e2) {
        return 0 === e2 ? e2 : 1 === e2 ? e2 + "-ლი" : e2 < 20 || e2 <= 100 && e2 % 20 == 0 || e2 % 100 == 0 ? "მე-" + e2 : e2 + "-ე";
      }, week: { dow: 1, doy: 7 } });
      var Fs = { 0: "-ші", 1: "-ші", 2: "-ші", 3: "-ші", 4: "-ші", 5: "-ші", 6: "-шы", 7: "-ші", 8: "-ші", 9: "-шы", 10: "-шы", 20: "-шы", 30: "-шы", 40: "-шы", 50: "-ші", 60: "-шы", 70: "-ші", 80: "-ші", 90: "-шы", 100: "-ші" }, zs = (c.defineLocale("kk", { months: "қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"), monthsShort: "қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"), weekdays: "жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"), weekdaysShort: "жек_дүй_сей_сәр_бей_жұм_сен".split("_"), weekdaysMin: "жк_дй_сй_ср_бй_жм_сн".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Бүгін сағат] LT", nextDay: "[Ертең сағат] LT", nextWeek: "dddd [сағат] LT", lastDay: "[Кеше сағат] LT", lastWeek: "[Өткен аптаның] dddd [сағат] LT", sameElse: "L" }, relativeTime: { future: "%s ішінде", past: "%s бұрын", s: "бірнеше секунд", ss: "%d секунд", m: "бір минут", mm: "%d минут", h: "бір сағат", hh: "%d сағат", d: "бір күн", dd: "%d күн", M: "бір ай", MM: "%d ай", y: "бір жыл", yy: "%d жыл" }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0448\u0456|\u0448\u044b)/, ordinal: function(e2) {
        return e2 + (Fs[e2] || Fs[e2 % 10] || Fs[100 <= e2 ? 100 : null]);
      }, week: { dow: 1, doy: 7 } }), { 1: "១", 2: "២", 3: "៣", 4: "៤", 5: "៥", 6: "៦", 7: "៧", 8: "៨", 9: "៩", 0: "០" }), Ns = { "១": "1", "២": "2", "៣": "3", "៤": "4", "៥": "5", "៦": "6", "៧": "7", "៨": "8", "៩": "9", "០": "0" }, Js = (c.defineLocale("km", { months: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"), monthsShort: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"), weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"), weekdaysShort: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"), weekdaysMin: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, meridiemParse: /\u1796\u17d2\u179a\u17b9\u1780|\u179b\u17d2\u1784\u17b6\u1785/, isPM: function(e2) {
        return "ល្ងាច" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "ព្រឹក" : "ល្ងាច";
      }, calendar: { sameDay: "[ថ្ងៃនេះ ម៉ោង] LT", nextDay: "[ស្អែក ម៉ោង] LT", nextWeek: "dddd [ម៉ោង] LT", lastDay: "[ម្សិលមិញ ម៉ោង] LT", lastWeek: "dddd [សប្តាហ៍មុន] [ម៉ោង] LT", sameElse: "L" }, relativeTime: { future: "%sទៀត", past: "%sមុន", s: "ប៉ុន្មានវិនាទី", ss: "%d វិនាទី", m: "មួយនាទី", mm: "%d នាទី", h: "មួយម៉ោង", hh: "%d ម៉ោង", d: "មួយថ្ងៃ", dd: "%d ថ្ងៃ", M: "មួយខែ", MM: "%d ខែ", y: "មួយឆ្នាំ", yy: "%d ឆ្នាំ" }, dayOfMonthOrdinalParse: /\u1791\u17b8\d{1,2}/, ordinal: "ទី%d", preparse: function(e2) {
        return e2.replace(/[\u17e1\u17e2\u17e3\u17e4\u17e5\u17e6\u17e7\u17e8\u17e9\u17e0]/g, function(e3) {
          return Ns[e3];
        });
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return zs[e3];
        });
      }, week: { dow: 1, doy: 4 } }), { 1: "೧", 2: "೨", 3: "೩", 4: "೪", 5: "೫", 6: "೬", 7: "೭", 8: "೮", 9: "೯", 0: "೦" }), Rs = { "೧": "1", "೨": "2", "೩": "3", "೪": "4", "೫": "5", "೬": "6", "೭": "7", "೮": "8", "೯": "9", "೦": "0" };
      function O(e2, a2, t2, s2) {
        e2 = { s: ["çend sanîye", "çend sanîyeyan"], ss: [e2 + " sanîye", e2 + " sanîyeyan"], m: ["deqîqeyek", "deqîqeyekê"], mm: [e2 + " deqîqe", e2 + " deqîqeyan"], h: ["saetek", "saetekê"], hh: [e2 + " saet", e2 + " saetan"], d: ["rojek", "rojekê"], dd: [e2 + " roj", e2 + " rojan"], w: ["hefteyek", "hefteyekê"], ww: [e2 + " hefte", e2 + " hefteyan"], M: ["mehek", "mehekê"], MM: [e2 + " meh", e2 + " mehan"], y: ["salek", "salekê"], yy: [e2 + " sal", e2 + " salan"] };
        return a2 ? e2[t2][0] : e2[t2][1];
      }
      c.defineLocale("kn", { months: "ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"), monthsShort: "ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"), monthsParseExact: true, weekdays: "ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"), weekdaysShort: "ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"), weekdaysMin: "ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm", LLLL: "dddd, D MMMM YYYY, A h:mm" }, calendar: { sameDay: "[ಇಂದು] LT", nextDay: "[ನಾಳೆ] LT", nextWeek: "dddd, LT", lastDay: "[ನಿನ್ನೆ] LT", lastWeek: "[ಕೊನೆಯ] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s ನಂತರ", past: "%s ಹಿಂದೆ", s: "ಕೆಲವು ಕ್ಷಣಗಳು", ss: "%d ಸೆಕೆಂಡುಗಳು", m: "ಒಂದು ನಿಮಿಷ", mm: "%d ನಿಮಿಷ", h: "ಒಂದು ಗಂಟೆ", hh: "%d ಗಂಟೆ", d: "ಒಂದು ದಿನ", dd: "%d ದಿನ", M: "ಒಂದು ತಿಂಗಳು", MM: "%d ತಿಂಗಳು", y: "ಒಂದು ವರ್ಷ", yy: "%d ವರ್ಷ" }, preparse: function(e2) {
        return e2.replace(/[\u0ce7\u0ce8\u0ce9\u0cea\u0ceb\u0cec\u0ced\u0cee\u0cef\u0ce6]/g, function(e3) {
          return Rs[e3];
        });
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return Js[e3];
        });
      }, meridiemParse: /\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf|\u0cac\u0cc6\u0cb3\u0cbf\u0c97\u0ccd\u0c97\u0cc6|\u0cae\u0ca7\u0ccd\u0caf\u0cbe\u0cb9\u0ccd\u0ca8|\u0cb8\u0c82\u0c9c\u0cc6/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "ರಾತ್ರಿ" === a2 ? e2 < 4 ? e2 : e2 + 12 : "ಬೆಳಿಗ್ಗೆ" === a2 ? e2 : "ಮಧ್ಯಾಹ್ನ" === a2 ? 10 <= e2 ? e2 : e2 + 12 : "ಸಂಜೆ" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "ರಾತ್ರಿ" : e2 < 10 ? "ಬೆಳಿಗ್ಗೆ" : e2 < 17 ? "ಮಧ್ಯಾಹ್ನ" : e2 < 20 ? "ಸಂಜೆ" : "ರಾತ್ರಿ";
      }, dayOfMonthOrdinalParse: /\d{1,2}(\u0ca8\u0cc6\u0cd5)/, ordinal: function(e2) {
        return e2 + "ನೇ";
      }, week: { dow: 0, doy: 6 } }), c.defineLocale("ko", { months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"), weekdaysShort: "일_월_화_수_목_금_토".split("_"), weekdaysMin: "일_월_화_수_목_금_토".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "YYYY.MM.DD.", LL: "YYYY년 MMMM D일", LLL: "YYYY년 MMMM D일 A h:mm", LLLL: "YYYY년 MMMM D일 dddd A h:mm", l: "YYYY.MM.DD.", ll: "YYYY년 MMMM D일", lll: "YYYY년 MMMM D일 A h:mm", llll: "YYYY년 MMMM D일 dddd A h:mm" }, calendar: { sameDay: "오늘 LT", nextDay: "내일 LT", nextWeek: "dddd LT", lastDay: "어제 LT", lastWeek: "지난주 dddd LT", sameElse: "L" }, relativeTime: { future: "%s 후", past: "%s 전", s: "몇 초", ss: "%d초", m: "1분", mm: "%d분", h: "한 시간", hh: "%d시간", d: "하루", dd: "%d일", M: "한 달", MM: "%d달", y: "일 년", yy: "%d년" }, dayOfMonthOrdinalParse: /\d{1,2}(\uc77c|\uc6d4|\uc8fc)/, ordinal: function(e2, a2) {
        switch (a2) {
          case "d":
          case "D":
          case "DDD":
            return e2 + "일";
          case "M":
            return e2 + "월";
          case "w":
          case "W":
            return e2 + "주";
          default:
            return e2;
        }
      }, meridiemParse: /\uc624\uc804|\uc624\ud6c4/, isPM: function(e2) {
        return "오후" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "오전" : "오후";
      } }), c.defineLocale("ku-kmr", { months: "Rêbendan_Sibat_Adar_Nîsan_Gulan_Hezîran_Tîrmeh_Tebax_Îlon_Cotmeh_Mijdar_Berfanbar".split("_"), monthsShort: "Rêb_Sib_Ada_Nîs_Gul_Hez_Tîr_Teb_Îlo_Cot_Mij_Ber".split("_"), monthsParseExact: true, weekdays: "Yekşem_Duşem_Sêşem_Çarşem_Pêncşem_În_Şemî".split("_"), weekdaysShort: "Yek_Du_Sê_Çar_Pên_În_Şem".split("_"), weekdaysMin: "Ye_Du_Sê_Ça_Pê_În_Şe".split("_"), meridiem: function(e2, a2, t2) {
        return e2 < 12 ? t2 ? "bn" : "BN" : t2 ? "pn" : "PN";
      }, meridiemParse: /bn|BN|pn|PN/, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "Do MMMM[a] YYYY[an]", LLL: "Do MMMM[a] YYYY[an] HH:mm", LLLL: "dddd, Do MMMM[a] YYYY[an] HH:mm", ll: "Do MMM[.] YYYY[an]", lll: "Do MMM[.] YYYY[an] HH:mm", llll: "ddd[.], Do MMM[.] YYYY[an] HH:mm" }, calendar: { sameDay: "[Îro di saet] LT [de]", nextDay: "[Sibê di saet] LT [de]", nextWeek: "dddd [di saet] LT [de]", lastDay: "[Duh di saet] LT [de]", lastWeek: "dddd[a borî di saet] LT [de]", sameElse: "L" }, relativeTime: { future: "di %s de", past: "berî %s", s: O, ss: O, m: O, mm: O, h: O, hh: O, d: O, dd: O, w: O, ww: O, M: O, MM: O, y: O, yy: O }, dayOfMonthOrdinalParse: /\d{1,2}(?:y\xea|\xea|\.)/, ordinal: function(e2, a2) {
        var a2 = a2.toLowerCase();
        return a2.includes("w") || a2.includes("m") ? e2 + "." : e2 + (e2 = (a2 = "" + (a2 = e2)).substring(a2.length - 1), 12 == (a2 = 1 < a2.length ? a2.substring(a2.length - 2) : "") || 13 == a2 || "2" != e2 && "3" != e2 && "50" != a2 && "70" != e2 && "80" != e2 ? "ê" : "yê");
      }, week: { dow: 1, doy: 4 } });
      var Cs = { 1: "١", 2: "٢", 3: "٣", 4: "٤", 5: "٥", 6: "٦", 7: "٧", 8: "٨", 9: "٩", 0: "٠" }, Is = { "١": "1", "٢": "2", "٣": "3", "٤": "4", "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9", "٠": "0" }, fe = ["کانونی دووەم", "شوبات", "ئازار", "نیسان", "ئایار", "حوزەیران", "تەمموز", "ئاب", "ئەیلوول", "تشرینی یەكەم", "تشرینی دووەم", "كانونی یەکەم"], Us = (c.defineLocale("ku", { months: fe, monthsShort: fe, weekdays: "یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"), weekdaysShort: "یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"), weekdaysMin: "ی_د_س_چ_پ_ه_ش".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, meridiemParse: /\u0626\u06ce\u0648\u0627\u0631\u0647\u200c|\u0628\u0647\u200c\u06cc\u0627\u0646\u06cc/, isPM: function(e2) {
        return /\u0626\u06ce\u0648\u0627\u0631\u0647\u200c/.test(e2);
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "به‌یانی" : "ئێواره‌";
      }, calendar: { sameDay: "[ئه‌مرۆ كاتژمێر] LT", nextDay: "[به‌یانی كاتژمێر] LT", nextWeek: "dddd [كاتژمێر] LT", lastDay: "[دوێنێ كاتژمێر] LT", lastWeek: "dddd [كاتژمێر] LT", sameElse: "L" }, relativeTime: { future: "له‌ %s", past: "%s", s: "چه‌ند چركه‌یه‌ك", ss: "چركه‌ %d", m: "یه‌ك خوله‌ك", mm: "%d خوله‌ك", h: "یه‌ك كاتژمێر", hh: "%d كاتژمێر", d: "یه‌ك ڕۆژ", dd: "%d ڕۆژ", M: "یه‌ك مانگ", MM: "%d مانگ", y: "یه‌ك ساڵ", yy: "%d ساڵ" }, preparse: function(e2) {
        return e2.replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g, function(e3) {
          return Is[e3];
        }).replace(/\u060c/g, ",");
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return Cs[e3];
        }).replace(/,/g, "،");
      }, week: { dow: 6, doy: 12 } }), { 0: "-чү", 1: "-чи", 2: "-чи", 3: "-чү", 4: "-чү", 5: "-чи", 6: "-чы", 7: "-чи", 8: "-чи", 9: "-чу", 10: "-чу", 20: "-чы", 30: "-чу", 40: "-чы", 50: "-чү", 60: "-чы", 70: "-чи", 80: "-чи", 90: "-чу", 100: "-чү" });
      function Gs(e2, a2, t2, s2) {
        var n2 = { m: ["eng Minutt", "enger Minutt"], h: ["eng Stonn", "enger Stonn"], d: ["een Dag", "engem Dag"], M: ["ee Mount", "engem Mount"], y: ["ee Joer", "engem Joer"] };
        return a2 ? n2[t2][0] : n2[t2][1];
      }
      function Vs(e2) {
        if (e2 = parseInt(e2, 10), isNaN(e2))
          return false;
        if (e2 < 0)
          return true;
        if (e2 < 10)
          return 4 <= e2 && e2 <= 7;
        var a2;
        if (e2 < 100)
          return Vs(0 == (a2 = e2 % 10) ? e2 / 10 : a2);
        if (e2 < 1e4) {
          for (; 10 <= e2; )
            e2 /= 10;
          return Vs(e2);
        }
        return Vs(e2 /= 1e3);
      }
      c.defineLocale("ky", { months: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"), monthsShort: "янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"), weekdays: "Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"), weekdaysShort: "Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"), weekdaysMin: "Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Бүгүн саат] LT", nextDay: "[Эртең саат] LT", nextWeek: "dddd [саат] LT", lastDay: "[Кечээ саат] LT", lastWeek: "[Өткөн аптанын] dddd [күнү] [саат] LT", sameElse: "L" }, relativeTime: { future: "%s ичинде", past: "%s мурун", s: "бирнече секунд", ss: "%d секунд", m: "бир мүнөт", mm: "%d мүнөт", h: "бир саат", hh: "%d саат", d: "бир күн", dd: "%d күн", M: "бир ай", MM: "%d ай", y: "бир жыл", yy: "%d жыл" }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0447\u0438|\u0447\u044b|\u0447\u04af|\u0447\u0443)/, ordinal: function(e2) {
        return e2 + (Us[e2] || Us[e2 % 10] || Us[100 <= e2 ? 100 : null]);
      }, week: { dow: 1, doy: 7 } }), c.defineLocale("lb", { months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"), monthsParseExact: true, weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"), weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "H:mm [Auer]", LTS: "H:mm:ss [Auer]", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm [Auer]", LLLL: "dddd, D. MMMM YYYY H:mm [Auer]" }, calendar: { sameDay: "[Haut um] LT", sameElse: "L", nextDay: "[Muer um] LT", nextWeek: "dddd [um] LT", lastDay: "[Gëschter um] LT", lastWeek: function() {
        switch (this.day()) {
          case 2:
          case 4:
            return "[Leschten] dddd [um] LT";
          default:
            return "[Leschte] dddd [um] LT";
        }
      } }, relativeTime: { future: function(e2) {
        return Vs(e2.substr(0, e2.indexOf(" "))) ? "a " + e2 : "an " + e2;
      }, past: function(e2) {
        return Vs(e2.substr(0, e2.indexOf(" "))) ? "viru " + e2 : "virun " + e2;
      }, s: "e puer Sekonnen", ss: "%d Sekonnen", m: Gs, mm: "%d Minutten", h: Gs, hh: "%d Stonnen", d: Gs, dd: "%d Deeg", M: Gs, MM: "%d Méint", y: Gs, yy: "%d Joer" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("lo", { months: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"), monthsShort: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"), weekdays: "ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"), weekdaysShort: "ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"), weekdaysMin: "ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "ວັນdddd D MMMM YYYY HH:mm" }, meridiemParse: /\u0e95\u0ead\u0e99\u0ec0\u0e8a\u0ebb\u0ec9\u0eb2|\u0e95\u0ead\u0e99\u0ec1\u0ea5\u0e87/, isPM: function(e2) {
        return "ຕອນແລງ" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "ຕອນເຊົ້າ" : "ຕອນແລງ";
      }, calendar: { sameDay: "[ມື້ນີ້ເວລາ] LT", nextDay: "[ມື້ອື່ນເວລາ] LT", nextWeek: "[ວັນ]dddd[ໜ້າເວລາ] LT", lastDay: "[ມື້ວານນີ້ເວລາ] LT", lastWeek: "[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT", sameElse: "L" }, relativeTime: { future: "ອີກ %s", past: "%sຜ່ານມາ", s: "ບໍ່ເທົ່າໃດວິນາທີ", ss: "%d ວິນາທີ", m: "1 ນາທີ", mm: "%d ນາທີ", h: "1 ຊົ່ວໂມງ", hh: "%d ຊົ່ວໂມງ", d: "1 ມື້", dd: "%d ມື້", M: "1 ເດືອນ", MM: "%d ເດືອນ", y: "1 ປີ", yy: "%d ປີ" }, dayOfMonthOrdinalParse: /(\u0e97\u0eb5\u0ec8)\d{1,2}/, ordinal: function(e2) {
        return "ທີ່" + e2;
      } });
      var qs = { ss: "sekundė_sekundžių_sekundes", m: "minutė_minutės_minutę", mm: "minutės_minučių_minutes", h: "valanda_valandos_valandą", hh: "valandos_valandų_valandas", d: "diena_dienos_dieną", dd: "dienos_dienų_dienas", M: "mėnuo_mėnesio_mėnesį", MM: "mėnesiai_mėnesių_mėnesius", y: "metai_metų_metus", yy: "metai_metų_metus" };
      function Bs(e2, a2, t2, s2) {
        return a2 ? Zs(t2)[0] : s2 ? Zs(t2)[1] : Zs(t2)[2];
      }
      function Ks(e2) {
        return e2 % 10 == 0 || 10 < e2 && e2 < 20;
      }
      function Zs(e2) {
        return qs[e2].split("_");
      }
      function $s(e2, a2, t2, s2) {
        var n2 = e2 + " ";
        return 1 === e2 ? n2 + Bs(0, a2, t2[0], s2) : a2 ? n2 + (Ks(e2) ? Zs(t2)[1] : Zs(t2)[0]) : s2 ? n2 + Zs(t2)[1] : n2 + (Ks(e2) ? Zs(t2)[1] : Zs(t2)[2]);
      }
      c.defineLocale("lt", { months: { format: "sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"), standalone: "sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"), isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/ }, monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"), weekdays: { format: "sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"), standalone: "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"), isFormat: /dddd HH:mm/ }, weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"), weekdaysMin: "S_P_A_T_K_Pn_Š".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY [m.] MMMM D [d.]", LLL: "YYYY [m.] MMMM D [d.], HH:mm [val.]", LLLL: "YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]", l: "YYYY-MM-DD", ll: "YYYY [m.] MMMM D [d.]", lll: "YYYY [m.] MMMM D [d.], HH:mm [val.]", llll: "YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]" }, calendar: { sameDay: "[Šiandien] LT", nextDay: "[Rytoj] LT", nextWeek: "dddd LT", lastDay: "[Vakar] LT", lastWeek: "[Praėjusį] dddd LT", sameElse: "L" }, relativeTime: { future: "po %s", past: "prieš %s", s: function(e2, a2, t2, s2) {
        return a2 ? "kelios sekundės" : s2 ? "kelių sekundžių" : "kelias sekundes";
      }, ss: $s, m: Bs, mm: $s, h: Bs, hh: $s, d: Bs, dd: $s, M: Bs, MM: $s, y: Bs, yy: $s }, dayOfMonthOrdinalParse: /\d{1,2}-oji/, ordinal: function(e2) {
        return e2 + "-oji";
      }, week: { dow: 1, doy: 4 } });
      var Qs = { ss: "sekundes_sekundēm_sekunde_sekundes".split("_"), m: "minūtes_minūtēm_minūte_minūtes".split("_"), mm: "minūtes_minūtēm_minūte_minūtes".split("_"), h: "stundas_stundām_stunda_stundas".split("_"), hh: "stundas_stundām_stunda_stundas".split("_"), d: "dienas_dienām_diena_dienas".split("_"), dd: "dienas_dienām_diena_dienas".split("_"), M: "mēneša_mēnešiem_mēnesis_mēneši".split("_"), MM: "mēneša_mēnešiem_mēnesis_mēneši".split("_"), y: "gada_gadiem_gads_gadi".split("_"), yy: "gada_gadiem_gads_gadi".split("_") };
      function Xs(e2, a2, t2) {
        return t2 ? a2 % 10 == 1 && a2 % 100 != 11 ? e2[2] : e2[3] : a2 % 10 == 1 && a2 % 100 != 11 ? e2[0] : e2[1];
      }
      function en(e2, a2, t2) {
        return e2 + " " + Xs(Qs[t2], e2, a2);
      }
      function an(e2, a2, t2) {
        return Xs(Qs[t2], e2, a2);
      }
      c.defineLocale("lv", { months: "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"), monthsShort: "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"), weekdays: "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"), weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"), weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY.", LL: "YYYY. [gada] D. MMMM", LLL: "YYYY. [gada] D. MMMM, HH:mm", LLLL: "YYYY. [gada] D. MMMM, dddd, HH:mm" }, calendar: { sameDay: "[Šodien pulksten] LT", nextDay: "[Rīt pulksten] LT", nextWeek: "dddd [pulksten] LT", lastDay: "[Vakar pulksten] LT", lastWeek: "[Pagājušā] dddd [pulksten] LT", sameElse: "L" }, relativeTime: { future: "pēc %s", past: "pirms %s", s: function(e2, a2) {
        return a2 ? "dažas sekundes" : "dažām sekundēm";
      }, ss: en, m: an, mm: en, h: an, hh: en, d: an, dd: en, M: an, MM: en, y: an, yy: en }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } });
      var tn = { words: { ss: ["sekund", "sekunda", "sekundi"], m: ["jedan minut", "jednog minuta"], mm: ["minut", "minuta", "minuta"], h: ["jedan sat", "jednog sata"], hh: ["sat", "sata", "sati"], dd: ["dan", "dana", "dana"], MM: ["mjesec", "mjeseca", "mjeseci"], yy: ["godina", "godine", "godina"] }, correctGrammaticalCase: function(e2, a2) {
        return 1 === e2 ? a2[0] : 2 <= e2 && e2 <= 4 ? a2[1] : a2[2];
      }, translate: function(e2, a2, t2) {
        var s2 = tn.words[t2];
        return 1 === t2.length ? a2 ? s2[0] : s2[1] : e2 + " " + tn.correctGrammaticalCase(e2, s2);
      } };
      function sn(e2, a2, t2, s2) {
        switch (t2) {
          case "s":
            return a2 ? "хэдхэн секунд" : "хэдхэн секундын";
          case "ss":
            return e2 + (a2 ? " секунд" : " секундын");
          case "m":
          case "mm":
            return e2 + (a2 ? " минут" : " минутын");
          case "h":
          case "hh":
            return e2 + (a2 ? " цаг" : " цагийн");
          case "d":
          case "dd":
            return e2 + (a2 ? " өдөр" : " өдрийн");
          case "M":
          case "MM":
            return e2 + (a2 ? " сар" : " сарын");
          case "y":
          case "yy":
            return e2 + (a2 ? " жил" : " жилийн");
          default:
            return e2;
        }
      }
      c.defineLocale("me", { months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"), monthsParseExact: true, weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sjutra u] LT", nextWeek: function() {
        switch (this.day()) {
          case 0:
            return "[u] [nedjelju] [u] LT";
          case 3:
            return "[u] [srijedu] [u] LT";
          case 6:
            return "[u] [subotu] [u] LT";
          case 1:
          case 2:
          case 4:
          case 5:
            return "[u] dddd [u] LT";
        }
      }, lastDay: "[juče u] LT", lastWeek: function() {
        return ["[prošle] [nedjelje] [u] LT", "[prošlog] [ponedjeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srijede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"][this.day()];
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "nekoliko sekundi", ss: tn.translate, m: tn.translate, mm: tn.translate, h: tn.translate, hh: tn.translate, d: "dan", dd: tn.translate, M: "mjesec", MM: tn.translate, y: "godinu", yy: tn.translate }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }), c.defineLocale("mi", { months: "Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"), monthsShort: "Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"), monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i, monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i, monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i, monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i, weekdays: "Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"), weekdaysShort: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"), weekdaysMin: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [i] HH:mm", LLLL: "dddd, D MMMM YYYY [i] HH:mm" }, calendar: { sameDay: "[i teie mahana, i] LT", nextDay: "[apopo i] LT", nextWeek: "dddd [i] LT", lastDay: "[inanahi i] LT", lastWeek: "dddd [whakamutunga i] LT", sameElse: "L" }, relativeTime: { future: "i roto i %s", past: "%s i mua", s: "te hēkona ruarua", ss: "%d hēkona", m: "he meneti", mm: "%d meneti", h: "te haora", hh: "%d haora", d: "he ra", dd: "%d ra", M: "he marama", MM: "%d marama", y: "he tau", yy: "%d tau" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%dº", week: { dow: 1, doy: 4 } }), c.defineLocale("mk", { months: "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"), monthsShort: "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"), weekdays: "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"), weekdaysShort: "нед_пон_вто_сре_чет_пет_саб".split("_"), weekdaysMin: "нe_пo_вт_ср_че_пе_сa".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "D.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[Денес во] LT", nextDay: "[Утре во] LT", nextWeek: "[Во] dddd [во] LT", lastDay: "[Вчера во] LT", lastWeek: function() {
        switch (this.day()) {
          case 0:
          case 3:
          case 6:
            return "[Изминатата] dddd [во] LT";
          case 1:
          case 2:
          case 4:
          case 5:
            return "[Изминатиот] dddd [во] LT";
        }
      }, sameElse: "L" }, relativeTime: { future: "за %s", past: "пред %s", s: "неколку секунди", ss: "%d секунди", m: "една минута", mm: "%d минути", h: "еден час", hh: "%d часа", d: "еден ден", dd: "%d дена", M: "еден месец", MM: "%d месеци", y: "една година", yy: "%d години" }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0435\u0432|\u0435\u043d|\u0442\u0438|\u0432\u0438|\u0440\u0438|\u043c\u0438)/, ordinal: function(e2) {
        var a2 = e2 % 10, t2 = e2 % 100;
        return 0 === e2 ? e2 + "-ев" : 0 == t2 ? e2 + "-ен" : 10 < t2 && t2 < 20 ? e2 + "-ти" : 1 == a2 ? e2 + "-ви" : 2 == a2 ? e2 + "-ри" : 7 == a2 || 8 == a2 ? e2 + "-ми" : e2 + "-ти";
      }, week: { dow: 1, doy: 7 } }), c.defineLocale("ml", { months: "ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"), monthsShort: "ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"), monthsParseExact: true, weekdays: "ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"), weekdaysShort: "ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"), weekdaysMin: "ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"), longDateFormat: { LT: "A h:mm -നു", LTS: "A h:mm:ss -നു", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm -നു", LLLL: "dddd, D MMMM YYYY, A h:mm -നു" }, calendar: { sameDay: "[ഇന്ന്] LT", nextDay: "[നാളെ] LT", nextWeek: "dddd, LT", lastDay: "[ഇന്നലെ] LT", lastWeek: "[കഴിഞ്ഞ] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s കഴിഞ്ഞ്", past: "%s മുൻപ്", s: "അൽപ നിമിഷങ്ങൾ", ss: "%d സെക്കൻഡ്", m: "ഒരു മിനിറ്റ്", mm: "%d മിനിറ്റ്", h: "ഒരു മണിക്കൂർ", hh: "%d മണിക്കൂർ", d: "ഒരു ദിവസം", dd: "%d ദിവസം", M: "ഒരു മാസം", MM: "%d മാസം", y: "ഒരു വർഷം", yy: "%d വർഷം" }, meridiemParse: /\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f|\u0d30\u0d3e\u0d35\u0d3f\u0d32\u0d46|\u0d09\u0d1a\u0d4d\u0d1a \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d|\u0d35\u0d48\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d47\u0d30\u0d02|\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f/i, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "രാത്രി" === a2 && 4 <= e2 || "ഉച്ച കഴിഞ്ഞ്" === a2 || "വൈകുന്നേരം" === a2 ? e2 + 12 : e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "രാത്രി" : e2 < 12 ? "രാവിലെ" : e2 < 17 ? "ഉച്ച കഴിഞ്ഞ്" : e2 < 20 ? "വൈകുന്നേരം" : "രാത്രി";
      } }), c.defineLocale("mn", { months: "Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"), monthsShort: "1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"), monthsParseExact: true, weekdays: "Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"), weekdaysShort: "Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"), weekdaysMin: "Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY оны MMMMын D", LLL: "YYYY оны MMMMын D HH:mm", LLLL: "dddd, YYYY оны MMMMын D HH:mm" }, meridiemParse: /\u04ae\u04e8|\u04ae\u0425/i, isPM: function(e2) {
        return "ҮХ" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "ҮӨ" : "ҮХ";
      }, calendar: { sameDay: "[Өнөөдөр] LT", nextDay: "[Маргааш] LT", nextWeek: "[Ирэх] dddd LT", lastDay: "[Өчигдөр] LT", lastWeek: "[Өнгөрсөн] dddd LT", sameElse: "L" }, relativeTime: { future: "%s дараа", past: "%s өмнө", s: sn, ss: sn, m: sn, mm: sn, h: sn, hh: sn, d: sn, dd: sn, M: sn, MM: sn, y: sn, yy: sn }, dayOfMonthOrdinalParse: /\d{1,2} \u04e9\u0434\u04e9\u0440/, ordinal: function(e2, a2) {
        switch (a2) {
          case "d":
          case "D":
          case "DDD":
            return e2 + " өдөр";
          default:
            return e2;
        }
      } });
      var nn = { 1: "१", 2: "२", 3: "३", 4: "४", 5: "५", 6: "६", 7: "७", 8: "८", 9: "९", 0: "०" }, rn = { "१": "1", "२": "2", "३": "3", "४": "4", "५": "5", "६": "6", "७": "7", "८": "8", "९": "9", "०": "0" };
      function dn(e2, a2, t2, s2) {
        var n2 = "";
        if (a2)
          switch (t2) {
            case "s":
              n2 = "काही सेकंद";
              break;
            case "ss":
              n2 = "%d सेकंद";
              break;
            case "m":
              n2 = "एक मिनिट";
              break;
            case "mm":
              n2 = "%d मिनिटे";
              break;
            case "h":
              n2 = "एक तास";
              break;
            case "hh":
              n2 = "%d तास";
              break;
            case "d":
              n2 = "एक दिवस";
              break;
            case "dd":
              n2 = "%d दिवस";
              break;
            case "M":
              n2 = "एक महिना";
              break;
            case "MM":
              n2 = "%d महिने";
              break;
            case "y":
              n2 = "एक वर्ष";
              break;
            case "yy":
              n2 = "%d वर्षे";
              break;
          }
        else
          switch (t2) {
            case "s":
              n2 = "काही सेकंदां";
              break;
            case "ss":
              n2 = "%d सेकंदां";
              break;
            case "m":
              n2 = "एका मिनिटा";
              break;
            case "mm":
              n2 = "%d मिनिटां";
              break;
            case "h":
              n2 = "एका तासा";
              break;
            case "hh":
              n2 = "%d तासां";
              break;
            case "d":
              n2 = "एका दिवसा";
              break;
            case "dd":
              n2 = "%d दिवसां";
              break;
            case "M":
              n2 = "एका महिन्या";
              break;
            case "MM":
              n2 = "%d महिन्यां";
              break;
            case "y":
              n2 = "एका वर्षा";
              break;
            case "yy":
              n2 = "%d वर्षां";
              break;
          }
        return n2.replace(/%d/i, e2);
      }
      c.defineLocale("mr", { months: "जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"), monthsShort: "जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"), monthsParseExact: true, weekdays: "रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"), weekdaysShort: "रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"), weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"), longDateFormat: { LT: "A h:mm वाजता", LTS: "A h:mm:ss वाजता", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm वाजता", LLLL: "dddd, D MMMM YYYY, A h:mm वाजता" }, calendar: { sameDay: "[आज] LT", nextDay: "[उद्या] LT", nextWeek: "dddd, LT", lastDay: "[काल] LT", lastWeek: "[मागील] dddd, LT", sameElse: "L" }, relativeTime: { future: "%sमध्ये", past: "%sपूर्वी", s: dn, ss: dn, m: dn, mm: dn, h: dn, hh: dn, d: dn, dd: dn, M: dn, MM: dn, y: dn, yy: dn }, preparse: function(e2) {
        return e2.replace(/[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g, function(e3) {
          return rn[e3];
        });
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return nn[e3];
        });
      }, meridiemParse: /\u092a\u0939\u093e\u091f\u0947|\u0938\u0915\u093e\u0933\u0940|\u0926\u0941\u092a\u093e\u0930\u0940|\u0938\u093e\u092f\u0902\u0915\u093e\u0933\u0940|\u0930\u093e\u0924\u094d\u0930\u0940/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "पहाटे" === a2 || "सकाळी" === a2 ? e2 : "दुपारी" === a2 || "सायंकाळी" === a2 || "रात्री" === a2 ? 12 <= e2 ? e2 : e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return 0 <= e2 && e2 < 6 ? "पहाटे" : e2 < 12 ? "सकाळी" : e2 < 17 ? "दुपारी" : e2 < 20 ? "सायंकाळी" : "रात्री";
      }, week: { dow: 0, doy: 6 } }), c.defineLocale("ms-my", { months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"), weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"), weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"), weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|tengahari|petang|malam/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "pagi" === a2 ? e2 : "tengahari" === a2 ? 11 <= e2 ? e2 : e2 + 12 : "petang" === a2 || "malam" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 11 ? "pagi" : e2 < 15 ? "tengahari" : e2 < 19 ? "petang" : "malam";
      }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Esok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kelmarin pukul] LT", lastWeek: "dddd [lepas pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lepas", s: "beberapa saat", ss: "%d saat", m: "seminit", mm: "%d minit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1, doy: 7 } }), c.defineLocale("ms", { months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"), weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"), weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"), weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|tengahari|petang|malam/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "pagi" === a2 ? e2 : "tengahari" === a2 ? 11 <= e2 ? e2 : e2 + 12 : "petang" === a2 || "malam" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 11 ? "pagi" : e2 < 15 ? "tengahari" : e2 < 19 ? "petang" : "malam";
      }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Esok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kelmarin pukul] LT", lastWeek: "dddd [lepas pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lepas", s: "beberapa saat", ss: "%d saat", m: "seminit", mm: "%d minit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1, doy: 7 } }), c.defineLocale("mt", { months: "Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"), monthsShort: "Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"), weekdays: "Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"), weekdaysShort: "Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"), weekdaysMin: "Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Illum fil-]LT", nextDay: "[Għada fil-]LT", nextWeek: "dddd [fil-]LT", lastDay: "[Il-bieraħ fil-]LT", lastWeek: "dddd [li għadda] [fil-]LT", sameElse: "L" }, relativeTime: { future: "f’ %s", past: "%s ilu", s: "ftit sekondi", ss: "%d sekondi", m: "minuta", mm: "%d minuti", h: "siegħa", hh: "%d siegħat", d: "ġurnata", dd: "%d ġranet", M: "xahar", MM: "%d xhur", y: "sena", yy: "%d sni" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%dº", week: { dow: 1, doy: 4 } });
      var _n = { 1: "၁", 2: "၂", 3: "၃", 4: "၄", 5: "၅", 6: "၆", 7: "၇", 8: "၈", 9: "၉", 0: "၀" }, on = { "၁": "1", "၂": "2", "၃": "3", "၄": "4", "၅": "5", "၆": "6", "၇": "7", "၈": "8", "၉": "9", "၀": "0" }, mn = (c.defineLocale("my", { months: "ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"), monthsShort: "ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"), weekdays: "တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"), weekdaysShort: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"), weekdaysMin: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[ယနေ.] LT [မှာ]", nextDay: "[မနက်ဖြန်] LT [မှာ]", nextWeek: "dddd LT [မှာ]", lastDay: "[မနေ.က] LT [မှာ]", lastWeek: "[ပြီးခဲ့သော] dddd LT [မှာ]", sameElse: "L" }, relativeTime: { future: "လာမည့် %s မှာ", past: "လွန်ခဲ့သော %s က", s: "စက္ကန်.အနည်းငယ်", ss: "%d စက္ကန့်", m: "တစ်မိနစ်", mm: "%d မိနစ်", h: "တစ်နာရီ", hh: "%d နာရီ", d: "တစ်ရက်", dd: "%d ရက်", M: "တစ်လ", MM: "%d လ", y: "တစ်နှစ်", yy: "%d နှစ်" }, preparse: function(e2) {
        return e2.replace(/[\u1041\u1042\u1043\u1044\u1045\u1046\u1047\u1048\u1049\u1040]/g, function(e3) {
          return on[e3];
        });
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return _n[e3];
        });
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("nb", { months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"), monthsParseExact: true, weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"), weekdaysShort: "sø._ma._ti._on._to._fr._lø.".split("_"), weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] HH:mm", LLLL: "dddd D. MMMM YYYY [kl.] HH:mm" }, calendar: { sameDay: "[i dag kl.] LT", nextDay: "[i morgen kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[i går kl.] LT", lastWeek: "[forrige] dddd [kl.] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s siden", s: "noen sekunder", ss: "%d sekunder", m: "ett minutt", mm: "%d minutter", h: "én time", hh: "%d timer", d: "én dag", dd: "%d dager", w: "én uke", ww: "%d uker", M: "én måned", MM: "%d måneder", y: "ett år", yy: "%d år" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), { 1: "१", 2: "२", 3: "३", 4: "४", 5: "५", 6: "६", 7: "७", 8: "८", 9: "९", 0: "०" }), un = { "१": "1", "२": "2", "३": "3", "४": "4", "५": "5", "६": "6", "७": "7", "८": "8", "९": "9", "०": "0" }, ln = (c.defineLocale("ne", { months: "जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"), monthsShort: "जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"), monthsParseExact: true, weekdays: "आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"), weekdaysShort: "आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"), weekdaysMin: "आ._सो._मं._बु._बि._शु._श.".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "Aको h:mm बजे", LTS: "Aको h:mm:ss बजे", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, Aको h:mm बजे", LLLL: "dddd, D MMMM YYYY, Aको h:mm बजे" }, preparse: function(e2) {
        return e2.replace(/[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g, function(e3) {
          return un[e3];
        });
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return mn[e3];
        });
      }, meridiemParse: /\u0930\u093e\u0924\u093f|\u092c\u093f\u0939\u093e\u0928|\u0926\u093f\u0909\u0901\u0938\u094b|\u0938\u093e\u0901\u091d/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "राति" === a2 ? e2 < 4 ? e2 : e2 + 12 : "बिहान" === a2 ? e2 : "दिउँसो" === a2 ? 10 <= e2 ? e2 : e2 + 12 : "साँझ" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 3 ? "राति" : e2 < 12 ? "बिहान" : e2 < 16 ? "दिउँसो" : e2 < 20 ? "साँझ" : "राति";
      }, calendar: { sameDay: "[आज] LT", nextDay: "[भोलि] LT", nextWeek: "[आउँदो] dddd[,] LT", lastDay: "[हिजो] LT", lastWeek: "[गएको] dddd[,] LT", sameElse: "L" }, relativeTime: { future: "%sमा", past: "%s अगाडि", s: "केही क्षण", ss: "%d सेकेण्ड", m: "एक मिनेट", mm: "%d मिनेट", h: "एक घण्टा", hh: "%d घण्टा", d: "एक दिन", dd: "%d दिन", M: "एक महिना", MM: "%d महिना", y: "एक बर्ष", yy: "%d बर्ष" }, week: { dow: 0, doy: 6 } }), "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_")), Mn = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), _ = [/^jan/i, /^feb/i, /^(maart|mrt\.?)$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i], Ie = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, hn = (c.defineLocale("nl-be", { months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: function(e2, a2) {
        return e2 ? (/-MMM-/.test(a2) ? Mn : ln)[e2.month()] : ln;
      }, monthsRegex: Ie, monthsShortRegex: Ie, monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i, monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, monthsParse: _, longMonthsParse: _, shortMonthsParse: _, weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[vandaag om] LT", nextDay: "[morgen om] LT", nextWeek: "dddd [om] LT", lastDay: "[gisteren om] LT", lastWeek: "[afgelopen] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", ss: "%d seconden", m: "één minuut", mm: "%d minuten", h: "één uur", hh: "%d uur", d: "één dag", dd: "%d dagen", M: "één maand", MM: "%d maanden", y: "één jaar", yy: "%d jaar" }, dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/, ordinal: function(e2) {
        return e2 + (1 === e2 || 8 === e2 || 20 <= e2 ? "ste" : "de");
      }, week: { dow: 1, doy: 4 } }), "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_")), cn = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), Ye = [/^jan/i, /^feb/i, /^(maart|mrt\.?)$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i], ye = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, Ln = (c.defineLocale("nl", { months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: function(e2, a2) {
        return e2 ? (/-MMM-/.test(a2) ? cn : hn)[e2.month()] : hn;
      }, monthsRegex: ye, monthsShortRegex: ye, monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i, monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, monthsParse: Ye, longMonthsParse: Ye, shortMonthsParse: Ye, weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[vandaag om] LT", nextDay: "[morgen om] LT", nextWeek: "dddd [om] LT", lastDay: "[gisteren om] LT", lastWeek: "[afgelopen] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", ss: "%d seconden", m: "één minuut", mm: "%d minuten", h: "één uur", hh: "%d uur", d: "één dag", dd: "%d dagen", w: "één week", ww: "%d weken", M: "één maand", MM: "%d maanden", y: "één jaar", yy: "%d jaar" }, dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/, ordinal: function(e2) {
        return e2 + (1 === e2 || 8 === e2 || 20 <= e2 ? "ste" : "de");
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("nn", { months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"), monthsParseExact: true, weekdays: "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"), weekdaysShort: "su._må._ty._on._to._fr._lau.".split("_"), weekdaysMin: "su_må_ty_on_to_fr_la".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] H:mm", LLLL: "dddd D. MMMM YYYY [kl.] HH:mm" }, calendar: { sameDay: "[I dag klokka] LT", nextDay: "[I morgon klokka] LT", nextWeek: "dddd [klokka] LT", lastDay: "[I går klokka] LT", lastWeek: "[Føregåande] dddd [klokka] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s sidan", s: "nokre sekund", ss: "%d sekund", m: "eit minutt", mm: "%d minutt", h: "ein time", hh: "%d timar", d: "ein dag", dd: "%d dagar", w: "ei veke", ww: "%d veker", M: "ein månad", MM: "%d månader", y: "eit år", yy: "%d år" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("oc-lnc", { months: { standalone: "genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"), format: "de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"), isFormat: /D[oD]?(\s)+MMMM/ }, monthsShort: "gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"), monthsParseExact: true, weekdays: "dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"), weekdaysShort: "dg._dl._dm._dc._dj._dv._ds.".split("_"), weekdaysMin: "dg_dl_dm_dc_dj_dv_ds".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM [de] YYYY", ll: "D MMM YYYY", LLL: "D MMMM [de] YYYY [a] H:mm", lll: "D MMM YYYY, H:mm", LLLL: "dddd D MMMM [de] YYYY [a] H:mm", llll: "ddd D MMM YYYY, H:mm" }, calendar: { sameDay: "[uèi a] LT", nextDay: "[deman a] LT", nextWeek: "dddd [a] LT", lastDay: "[ièr a] LT", lastWeek: "dddd [passat a] LT", sameElse: "L" }, relativeTime: { future: "d'aquí %s", past: "fa %s", s: "unas segondas", ss: "%d segondas", m: "una minuta", mm: "%d minutas", h: "una ora", hh: "%d oras", d: "un jorn", dd: "%d jorns", M: "un mes", MM: "%d meses", y: "un an", yy: "%d ans" }, dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|\xe8|a)/, ordinal: function(e2, a2) {
        return e2 + ("w" !== a2 && "W" !== a2 ? 1 === e2 ? "r" : 2 === e2 ? "n" : 3 === e2 ? "r" : 4 === e2 ? "t" : "è" : "a");
      }, week: { dow: 1, doy: 4 } }), { 1: "੧", 2: "੨", 3: "੩", 4: "੪", 5: "੫", 6: "੬", 7: "੭", 8: "੮", 9: "੯", 0: "੦" }), Yn = { "੧": "1", "੨": "2", "੩": "3", "੪": "4", "੫": "5", "੬": "6", "੭": "7", "੮": "8", "੯": "9", "੦": "0" }, yn = (c.defineLocale("pa-in", { months: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"), monthsShort: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"), weekdays: "ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"), weekdaysShort: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"), weekdaysMin: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"), longDateFormat: { LT: "A h:mm ਵਜੇ", LTS: "A h:mm:ss ਵਜੇ", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm ਵਜੇ", LLLL: "dddd, D MMMM YYYY, A h:mm ਵਜੇ" }, calendar: { sameDay: "[ਅਜ] LT", nextDay: "[ਕਲ] LT", nextWeek: "[ਅਗਲਾ] dddd, LT", lastDay: "[ਕਲ] LT", lastWeek: "[ਪਿਛਲੇ] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s ਵਿੱਚ", past: "%s ਪਿਛਲੇ", s: "ਕੁਝ ਸਕਿੰਟ", ss: "%d ਸਕਿੰਟ", m: "ਇਕ ਮਿੰਟ", mm: "%d ਮਿੰਟ", h: "ਇੱਕ ਘੰਟਾ", hh: "%d ਘੰਟੇ", d: "ਇੱਕ ਦਿਨ", dd: "%d ਦਿਨ", M: "ਇੱਕ ਮਹੀਨਾ", MM: "%d ਮਹੀਨੇ", y: "ਇੱਕ ਸਾਲ", yy: "%d ਸਾਲ" }, preparse: function(e2) {
        return e2.replace(/[\u0a67\u0a68\u0a69\u0a6a\u0a6b\u0a6c\u0a6d\u0a6e\u0a6f\u0a66]/g, function(e3) {
          return Yn[e3];
        });
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return Ln[e3];
        });
      }, meridiemParse: /\u0a30\u0a3e\u0a24|\u0a38\u0a35\u0a47\u0a30|\u0a26\u0a41\u0a2a\u0a39\u0a3f\u0a30|\u0a38\u0a3c\u0a3e\u0a2e/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "ਰਾਤ" === a2 ? e2 < 4 ? e2 : e2 + 12 : "ਸਵੇਰ" === a2 ? e2 : "ਦੁਪਹਿਰ" === a2 ? 10 <= e2 ? e2 : e2 + 12 : "ਸ਼ਾਮ" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "ਰਾਤ" : e2 < 10 ? "ਸਵੇਰ" : e2 < 17 ? "ਦੁਪਹਿਰ" : e2 < 20 ? "ਸ਼ਾਮ" : "ਰਾਤ";
      }, week: { dow: 0, doy: 6 } }), "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_")), fn = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"), na = [/^sty/i, /^lut/i, /^mar/i, /^kwi/i, /^maj/i, /^cze/i, /^lip/i, /^sie/i, /^wrz/i, /^pa\u017a/i, /^lis/i, /^gru/i];
      function kn(e2) {
        return e2 % 10 < 5 && 1 < e2 % 10 && ~~(e2 / 10) % 10 != 1;
      }
      function pn(e2, a2, t2) {
        var s2 = e2 + " ";
        switch (t2) {
          case "ss":
            return s2 + (kn(e2) ? "sekundy" : "sekund");
          case "m":
            return a2 ? "minuta" : "minutę";
          case "mm":
            return s2 + (kn(e2) ? "minuty" : "minut");
          case "h":
            return a2 ? "godzina" : "godzinę";
          case "hh":
            return s2 + (kn(e2) ? "godziny" : "godzin");
          case "ww":
            return s2 + (kn(e2) ? "tygodnie" : "tygodni");
          case "MM":
            return s2 + (kn(e2) ? "miesiące" : "miesięcy");
          case "yy":
            return s2 + (kn(e2) ? "lata" : "lat");
        }
      }
      function Dn(e2, a2, t2) {
        return e2 + (20 <= e2 % 100 || 100 <= e2 && e2 % 100 == 0 ? " de " : " ") + { ss: "secunde", mm: "minute", hh: "ore", dd: "zile", ww: "săptămâni", MM: "luni", yy: "ani" }[t2];
      }
      function Tn(e2, a2, t2) {
        return "m" === t2 ? a2 ? "минута" : "минуту" : e2 + " " + (e2 = +e2, a2 = (a2 = { ss: a2 ? "секунда_секунды_секунд" : "секунду_секунды_секунд", mm: a2 ? "минута_минуты_минут" : "минуту_минуты_минут", hh: "час_часа_часов", dd: "день_дня_дней", ww: "неделя_недели_недель", MM: "месяц_месяца_месяцев", yy: "год_года_лет" }[t2]).split("_"), e2 % 10 == 1 && e2 % 100 != 11 ? a2[0] : 2 <= e2 % 10 && e2 % 10 <= 4 && (e2 % 100 < 10 || 20 <= e2 % 100) ? a2[1] : a2[2]);
      }
      c.defineLocale("pl", { months: function(e2, a2) {
        return e2 ? (/D MMMM/.test(a2) ? fn : yn)[e2.month()] : yn;
      }, monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"), monthsParse: na, longMonthsParse: na, shortMonthsParse: na, weekdays: "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"), weekdaysShort: "ndz_pon_wt_śr_czw_pt_sob".split("_"), weekdaysMin: "Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Dziś o] LT", nextDay: "[Jutro o] LT", nextWeek: function() {
        switch (this.day()) {
          case 0:
            return "[W niedzielę o] LT";
          case 2:
            return "[We wtorek o] LT";
          case 3:
            return "[W środę o] LT";
          case 6:
            return "[W sobotę o] LT";
          default:
            return "[W] dddd [o] LT";
        }
      }, lastDay: "[Wczoraj o] LT", lastWeek: function() {
        switch (this.day()) {
          case 0:
            return "[W zeszłą niedzielę o] LT";
          case 3:
            return "[W zeszłą środę o] LT";
          case 6:
            return "[W zeszłą sobotę o] LT";
          default:
            return "[W zeszły] dddd [o] LT";
        }
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "%s temu", s: "kilka sekund", ss: pn, m: pn, mm: pn, h: pn, hh: pn, d: "1 dzień", dd: "%d dni", w: "tydzień", ww: pn, M: "miesiąc", MM: pn, y: "rok", yy: pn }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("pt-br", { months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"), monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"), weekdays: "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"), weekdaysShort: "dom_seg_ter_qua_qui_sex_sáb".split("_"), weekdaysMin: "do_2ª_3ª_4ª_5ª_6ª_sá".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY [às] HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm" }, calendar: { sameDay: "[Hoje às] LT", nextDay: "[Amanhã às] LT", nextWeek: "dddd [às] LT", lastDay: "[Ontem às] LT", lastWeek: function() {
        return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT";
      }, sameElse: "L" }, relativeTime: { future: "em %s", past: "há %s", s: "poucos segundos", ss: "%d segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%dº", invalidDate: "Data inválida" }), c.defineLocale("pt", { months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"), monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"), weekdays: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"), weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"), weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY HH:mm" }, calendar: { sameDay: "[Hoje às] LT", nextDay: "[Amanhã às] LT", nextWeek: "dddd [às] LT", lastDay: "[Ontem às] LT", lastWeek: function() {
        return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT";
      }, sameElse: "L" }, relativeTime: { future: "em %s", past: "há %s", s: "segundos", ss: "%d segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", w: "uma semana", ww: "%d semanas", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%dº", week: { dow: 1, doy: 4 } }), c.defineLocale("ro", { months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"), monthsShort: "ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"), monthsParseExact: true, weekdays: "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"), weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"), weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[azi la] LT", nextDay: "[mâine la] LT", nextWeek: "dddd [la] LT", lastDay: "[ieri la] LT", lastWeek: "[fosta] dddd [la] LT", sameElse: "L" }, relativeTime: { future: "peste %s", past: "%s în urmă", s: "câteva secunde", ss: Dn, m: "un minut", mm: Dn, h: "o oră", hh: Dn, d: "o zi", dd: Dn, w: "o săptămână", ww: Dn, M: "o lună", MM: Dn, y: "un an", yy: Dn }, week: { dow: 1, doy: 7 } });
      t = [/^\u044f\u043d\u0432/i, /^\u0444\u0435\u0432/i, /^\u043c\u0430\u0440/i, /^\u0430\u043f\u0440/i, /^\u043c\u0430[\u0439\u044f]/i, /^\u0438\u044e\u043d/i, /^\u0438\u044e\u043b/i, /^\u0430\u0432\u0433/i, /^\u0441\u0435\u043d/i, /^\u043e\u043a\u0442/i, /^\u043d\u043e\u044f/i, /^\u0434\u0435\u043a/i], c.defineLocale("ru", { months: { format: "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"), standalone: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_") }, monthsShort: { format: "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"), standalone: "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_") }, weekdays: { standalone: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"), format: "воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"), isFormat: /\[ ?[\u0412\u0432] ?(?:\u043f\u0440\u043e\u0448\u043b\u0443\u044e|\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e|\u044d\u0442\u0443)? ?] ?dddd/ }, weekdaysShort: "вс_пн_вт_ср_чт_пт_сб".split("_"), weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"), monthsParse: t, longMonthsParse: t, shortMonthsParse: t, monthsRegex: /^(\u044f\u043d\u0432\u0430\u0440[\u044c\u044f]|\u044f\u043d\u0432\.?|\u0444\u0435\u0432\u0440\u0430\u043b[\u044c\u044f]|\u0444\u0435\u0432\u0440?\.?|\u043c\u0430\u0440\u0442\u0430?|\u043c\u0430\u0440\.?|\u0430\u043f\u0440\u0435\u043b[\u044c\u044f]|\u0430\u043f\u0440\.?|\u043c\u0430[\u0439\u044f]|\u0438\u044e\u043d[\u044c\u044f]|\u0438\u044e\u043d\.?|\u0438\u044e\u043b[\u044c\u044f]|\u0438\u044e\u043b\.?|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0430\u0432\u0433\.?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044c\u044f]|\u0441\u0435\u043d\u0442?\.?|\u043e\u043a\u0442\u044f\u0431\u0440[\u044c\u044f]|\u043e\u043a\u0442\.?|\u043d\u043e\u044f\u0431\u0440[\u044c\u044f]|\u043d\u043e\u044f\u0431?\.?|\u0434\u0435\u043a\u0430\u0431\u0440[\u044c\u044f]|\u0434\u0435\u043a\.?)/i, monthsShortRegex: /^(\u044f\u043d\u0432\u0430\u0440[\u044c\u044f]|\u044f\u043d\u0432\.?|\u0444\u0435\u0432\u0440\u0430\u043b[\u044c\u044f]|\u0444\u0435\u0432\u0440?\.?|\u043c\u0430\u0440\u0442\u0430?|\u043c\u0430\u0440\.?|\u0430\u043f\u0440\u0435\u043b[\u044c\u044f]|\u0430\u043f\u0440\.?|\u043c\u0430[\u0439\u044f]|\u0438\u044e\u043d[\u044c\u044f]|\u0438\u044e\u043d\.?|\u0438\u044e\u043b[\u044c\u044f]|\u0438\u044e\u043b\.?|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0430\u0432\u0433\.?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044c\u044f]|\u0441\u0435\u043d\u0442?\.?|\u043e\u043a\u0442\u044f\u0431\u0440[\u044c\u044f]|\u043e\u043a\u0442\.?|\u043d\u043e\u044f\u0431\u0440[\u044c\u044f]|\u043d\u043e\u044f\u0431?\.?|\u0434\u0435\u043a\u0430\u0431\u0440[\u044c\u044f]|\u0434\u0435\u043a\.?)/i, monthsStrictRegex: /^(\u044f\u043d\u0432\u0430\u0440[\u044f\u044c]|\u0444\u0435\u0432\u0440\u0430\u043b[\u044f\u044c]|\u043c\u0430\u0440\u0442\u0430?|\u0430\u043f\u0440\u0435\u043b[\u044f\u044c]|\u043c\u0430[\u044f\u0439]|\u0438\u044e\u043d[\u044f\u044c]|\u0438\u044e\u043b[\u044f\u044c]|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044f\u044c]|\u043e\u043a\u0442\u044f\u0431\u0440[\u044f\u044c]|\u043d\u043e\u044f\u0431\u0440[\u044f\u044c]|\u0434\u0435\u043a\u0430\u0431\u0440[\u044f\u044c])/i, monthsShortStrictRegex: /^(\u044f\u043d\u0432\.|\u0444\u0435\u0432\u0440?\.|\u043c\u0430\u0440[\u0442.]|\u0430\u043f\u0440\.|\u043c\u0430[\u044f\u0439]|\u0438\u044e\u043d[\u044c\u044f.]|\u0438\u044e\u043b[\u044c\u044f.]|\u0430\u0432\u0433\.|\u0441\u0435\u043d\u0442?\.|\u043e\u043a\u0442\.|\u043d\u043e\u044f\u0431?\.|\u0434\u0435\u043a\.)/i, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY г.", LLL: "D MMMM YYYY г., H:mm", LLLL: "dddd, D MMMM YYYY г., H:mm" }, calendar: { sameDay: "[Сегодня, в] LT", nextDay: "[Завтра, в] LT", lastDay: "[Вчера, в] LT", nextWeek: function(e2) {
        if (e2.week() === this.week())
          return 2 === this.day() ? "[Во] dddd, [в] LT" : "[В] dddd, [в] LT";
        switch (this.day()) {
          case 0:
            return "[В следующее] dddd, [в] LT";
          case 1:
          case 2:
          case 4:
            return "[В следующий] dddd, [в] LT";
          case 3:
          case 5:
          case 6:
            return "[В следующую] dddd, [в] LT";
        }
      }, lastWeek: function(e2) {
        if (e2.week() === this.week())
          return 2 === this.day() ? "[Во] dddd, [в] LT" : "[В] dddd, [в] LT";
        switch (this.day()) {
          case 0:
            return "[В прошлое] dddd, [в] LT";
          case 1:
          case 2:
          case 4:
            return "[В прошлый] dddd, [в] LT";
          case 3:
          case 5:
          case 6:
            return "[В прошлую] dddd, [в] LT";
        }
      }, sameElse: "L" }, relativeTime: { future: "через %s", past: "%s назад", s: "несколько секунд", ss: Tn, m: Tn, mm: Tn, h: "час", hh: Tn, d: "день", dd: Tn, w: "неделя", ww: Tn, M: "месяц", MM: Tn, y: "год", yy: Tn }, meridiemParse: /\u043d\u043e\u0447\u0438|\u0443\u0442\u0440\u0430|\u0434\u043d\u044f|\u0432\u0435\u0447\u0435\u0440\u0430/i, isPM: function(e2) {
        return /^(\u0434\u043d\u044f|\u0432\u0435\u0447\u0435\u0440\u0430)$/.test(e2);
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "ночи" : e2 < 12 ? "утра" : e2 < 17 ? "дня" : "вечера";
      }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0439|\u0433\u043e|\u044f)/, ordinal: function(e2, a2) {
        switch (a2) {
          case "M":
          case "d":
          case "DDD":
            return e2 + "-й";
          case "D":
            return e2 + "-го";
          case "w":
          case "W":
            return e2 + "-я";
          default:
            return e2;
        }
      }, week: { dow: 1, doy: 4 } }), m = ["جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر"], o = ["آچر", "سومر", "اڱارو", "اربع", "خميس", "جمع", "ڇنڇر"], c.defineLocale("sd", { months: m, monthsShort: m, weekdays: o, weekdaysShort: o, weekdaysMin: o, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd، D MMMM YYYY HH:mm" }, meridiemParse: /\u0635\u0628\u062d|\u0634\u0627\u0645/, isPM: function(e2) {
        return "شام" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "صبح" : "شام";
      }, calendar: { sameDay: "[اڄ] LT", nextDay: "[سڀاڻي] LT", nextWeek: "dddd [اڳين هفتي تي] LT", lastDay: "[ڪالهه] LT", lastWeek: "[گزريل هفتي] dddd [تي] LT", sameElse: "L" }, relativeTime: { future: "%s پوء", past: "%s اڳ", s: "چند سيڪنڊ", ss: "%d سيڪنڊ", m: "هڪ منٽ", mm: "%d منٽ", h: "هڪ ڪلاڪ", hh: "%d ڪلاڪ", d: "هڪ ڏينهن", dd: "%d ڏينهن", M: "هڪ مهينو", MM: "%d مهينا", y: "هڪ سال", yy: "%d سال" }, preparse: function(e2) {
        return e2.replace(/\u060c/g, ",");
      }, postformat: function(e2) {
        return e2.replace(/,/g, "،");
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("se", { months: "ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"), monthsShort: "ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"), weekdays: "sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"), weekdaysShort: "sotn_vuos_maŋ_gask_duor_bear_láv".split("_"), weekdaysMin: "s_v_m_g_d_b_L".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "MMMM D. [b.] YYYY", LLL: "MMMM D. [b.] YYYY [ti.] HH:mm", LLLL: "dddd, MMMM D. [b.] YYYY [ti.] HH:mm" }, calendar: { sameDay: "[otne ti] LT", nextDay: "[ihttin ti] LT", nextWeek: "dddd [ti] LT", lastDay: "[ikte ti] LT", lastWeek: "[ovddit] dddd [ti] LT", sameElse: "L" }, relativeTime: { future: "%s geažes", past: "maŋit %s", s: "moadde sekunddat", ss: "%d sekunddat", m: "okta minuhta", mm: "%d minuhtat", h: "okta diimmu", hh: "%d diimmut", d: "okta beaivi", dd: "%d beaivvit", M: "okta mánnu", MM: "%d mánut", y: "okta jahki", yy: "%d jagit" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("si", { months: "ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"), monthsShort: "ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"), weekdays: "ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"), weekdaysShort: "ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"), weekdaysMin: "ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "a h:mm", LTS: "a h:mm:ss", L: "YYYY/MM/DD", LL: "YYYY MMMM D", LLL: "YYYY MMMM D, a h:mm", LLLL: "YYYY MMMM D [වැනි] dddd, a h:mm:ss" }, calendar: { sameDay: "[අද] LT[ට]", nextDay: "[හෙට] LT[ට]", nextWeek: "dddd LT[ට]", lastDay: "[ඊයේ] LT[ට]", lastWeek: "[පසුගිය] dddd LT[ට]", sameElse: "L" }, relativeTime: { future: "%sකින්", past: "%sකට පෙර", s: "තත්පර කිහිපය", ss: "තත්පර %d", m: "මිනිත්තුව", mm: "මිනිත්තු %d", h: "පැය", hh: "පැය %d", d: "දිනය", dd: "දින %d", M: "මාසය", MM: "මාස %d", y: "වසර", yy: "වසර %d" }, dayOfMonthOrdinalParse: /\d{1,2} \u0dc0\u0dd0\u0db1\u0dd2/, ordinal: function(e2) {
        return e2 + " වැනි";
      }, meridiemParse: /\u0db4\u0dd9\u0dbb \u0dc0\u0dbb\u0dd4|\u0db4\u0dc3\u0dca \u0dc0\u0dbb\u0dd4|\u0db4\u0dd9.\u0dc0|\u0db4.\u0dc0./, isPM: function(e2) {
        return "ප.ව." === e2 || "පස් වරු" === e2;
      }, meridiem: function(e2, a2, t2) {
        return 11 < e2 ? t2 ? "ප.ව." : "පස් වරු" : t2 ? "පෙ.ව." : "පෙර වරු";
      } }), n = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"), ze = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");
      function gn(e2) {
        return 1 < e2 && e2 < 5;
      }
      function wn(e2, a2, t2, s2) {
        var n2 = e2 + " ";
        switch (t2) {
          case "s":
            return a2 || s2 ? "pár sekúnd" : "pár sekundami";
          case "ss":
            return a2 || s2 ? n2 + (gn(e2) ? "sekundy" : "sekúnd") : n2 + "sekundami";
          case "m":
            return a2 ? "minúta" : s2 ? "minútu" : "minútou";
          case "mm":
            return a2 || s2 ? n2 + (gn(e2) ? "minúty" : "minút") : n2 + "minútami";
          case "h":
            return a2 ? "hodina" : s2 ? "hodinu" : "hodinou";
          case "hh":
            return a2 || s2 ? n2 + (gn(e2) ? "hodiny" : "hodín") : n2 + "hodinami";
          case "d":
            return a2 || s2 ? "deň" : "dňom";
          case "dd":
            return a2 || s2 ? n2 + (gn(e2) ? "dni" : "dní") : n2 + "dňami";
          case "M":
            return a2 || s2 ? "mesiac" : "mesiacom";
          case "MM":
            return a2 || s2 ? n2 + (gn(e2) ? "mesiace" : "mesiacov") : n2 + "mesiacmi";
          case "y":
            return a2 || s2 ? "rok" : "rokom";
          case "yy":
            return a2 || s2 ? n2 + (gn(e2) ? "roky" : "rokov") : n2 + "rokmi";
        }
      }
      function bn(e2, a2, t2, s2) {
        var n2 = e2 + " ";
        switch (t2) {
          case "s":
            return a2 || s2 ? "nekaj sekund" : "nekaj sekundami";
          case "ss":
            return n2 += 1 === e2 ? a2 ? "sekundo" : "sekundi" : 2 === e2 ? a2 || s2 ? "sekundi" : "sekundah" : e2 < 5 ? a2 || s2 ? "sekunde" : "sekundah" : "sekund";
          case "m":
            return a2 ? "ena minuta" : "eno minuto";
          case "mm":
            return n2 += 1 === e2 ? a2 ? "minuta" : "minuto" : 2 === e2 ? a2 || s2 ? "minuti" : "minutama" : e2 < 5 ? a2 || s2 ? "minute" : "minutami" : a2 || s2 ? "minut" : "minutami";
          case "h":
            return a2 ? "ena ura" : "eno uro";
          case "hh":
            return n2 += 1 === e2 ? a2 ? "ura" : "uro" : 2 === e2 ? a2 || s2 ? "uri" : "urama" : e2 < 5 ? a2 || s2 ? "ure" : "urami" : a2 || s2 ? "ur" : "urami";
          case "d":
            return a2 || s2 ? "en dan" : "enim dnem";
          case "dd":
            return n2 += 1 === e2 ? a2 || s2 ? "dan" : "dnem" : 2 === e2 ? a2 || s2 ? "dni" : "dnevoma" : a2 || s2 ? "dni" : "dnevi";
          case "M":
            return a2 || s2 ? "en mesec" : "enim mesecem";
          case "MM":
            return n2 += 1 === e2 ? a2 || s2 ? "mesec" : "mesecem" : 2 === e2 ? a2 || s2 ? "meseca" : "mesecema" : e2 < 5 ? a2 || s2 ? "mesece" : "meseci" : a2 || s2 ? "mesecev" : "meseci";
          case "y":
            return a2 || s2 ? "eno leto" : "enim letom";
          case "yy":
            return n2 += 1 === e2 ? a2 || s2 ? "leto" : "letom" : 2 === e2 ? a2 || s2 ? "leti" : "letoma" : e2 < 5 ? a2 || s2 ? "leta" : "leti" : a2 || s2 ? "let" : "leti";
        }
      }
      c.defineLocale("sk", { months: n, monthsShort: ze, weekdays: "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"), weekdaysShort: "ne_po_ut_st_št_pi_so".split("_"), weekdaysMin: "ne_po_ut_st_št_pi_so".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd D. MMMM YYYY H:mm" }, calendar: { sameDay: "[dnes o] LT", nextDay: "[zajtra o] LT", nextWeek: function() {
        switch (this.day()) {
          case 0:
            return "[v nedeľu o] LT";
          case 1:
          case 2:
            return "[v] dddd [o] LT";
          case 3:
            return "[v stredu o] LT";
          case 4:
            return "[vo štvrtok o] LT";
          case 5:
            return "[v piatok o] LT";
          case 6:
            return "[v sobotu o] LT";
        }
      }, lastDay: "[včera o] LT", lastWeek: function() {
        switch (this.day()) {
          case 0:
            return "[minulú nedeľu o] LT";
          case 1:
          case 2:
            return "[minulý] dddd [o] LT";
          case 3:
            return "[minulú stredu o] LT";
          case 4:
          case 5:
            return "[minulý] dddd [o] LT";
          case 6:
            return "[minulú sobotu o] LT";
        }
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "pred %s", s: wn, ss: wn, m: wn, mm: wn, h: wn, hh: wn, d: wn, dd: wn, M: wn, MM: wn, y: wn, yy: wn }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("sl", { months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"), monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"), monthsParseExact: true, weekdays: "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"), weekdaysShort: "ned._pon._tor._sre._čet._pet._sob.".split("_"), weekdaysMin: "ne_po_to_sr_če_pe_so".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD. MM. YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danes ob] LT", nextDay: "[jutri ob] LT", nextWeek: function() {
        switch (this.day()) {
          case 0:
            return "[v] [nedeljo] [ob] LT";
          case 3:
            return "[v] [sredo] [ob] LT";
          case 6:
            return "[v] [soboto] [ob] LT";
          case 1:
          case 2:
          case 4:
          case 5:
            return "[v] dddd [ob] LT";
        }
      }, lastDay: "[včeraj ob] LT", lastWeek: function() {
        switch (this.day()) {
          case 0:
            return "[prejšnjo] [nedeljo] [ob] LT";
          case 3:
            return "[prejšnjo] [sredo] [ob] LT";
          case 6:
            return "[prejšnjo] [soboto] [ob] LT";
          case 1:
          case 2:
          case 4:
          case 5:
            return "[prejšnji] dddd [ob] LT";
        }
      }, sameElse: "L" }, relativeTime: { future: "čez %s", past: "pred %s", s: bn, ss: bn, m: bn, mm: bn, h: bn, hh: bn, d: bn, dd: bn, M: bn, MM: bn, y: bn, yy: bn }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }), c.defineLocale("sq", { months: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"), monthsShort: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"), weekdays: "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"), weekdaysShort: "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"), weekdaysMin: "D_H_Ma_Më_E_P_Sh".split("_"), weekdaysParseExact: true, meridiemParse: /PD|MD/, isPM: function(e2) {
        return "M" === e2.charAt(0);
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "PD" : "MD";
      }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Sot në] LT", nextDay: "[Nesër në] LT", nextWeek: "dddd [në] LT", lastDay: "[Dje në] LT", lastWeek: "dddd [e kaluar në] LT", sameElse: "L" }, relativeTime: { future: "në %s", past: "%s më parë", s: "disa sekonda", ss: "%d sekonda", m: "një minutë", mm: "%d minuta", h: "një orë", hh: "%d orë", d: "një ditë", dd: "%d ditë", M: "një muaj", MM: "%d muaj", y: "një vit", yy: "%d vite" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } });
      var W = { words: { ss: ["секунда", "секунде", "секунди"], m: ["један минут", "једног минута"], mm: ["минут", "минута", "минута"], h: ["један сат", "једног сата"], hh: ["сат", "сата", "сати"], d: ["један дан", "једног дана"], dd: ["дан", "дана", "дана"], M: ["један месец", "једног месеца"], MM: ["месец", "месеца", "месеци"], y: ["једну годину", "једне године"], yy: ["годину", "године", "година"] }, correctGrammaticalCase: function(e2, a2) {
        return 1 <= e2 % 10 && e2 % 10 <= 4 && (e2 % 100 < 10 || 20 <= e2 % 100) ? e2 % 10 == 1 ? a2[0] : a2[1] : a2[2];
      }, translate: function(e2, a2, t2, s2) {
        var n2 = W.words[t2];
        return 1 === t2.length ? "y" === t2 && a2 ? "једна година" : s2 || a2 ? n2[0] : n2[1] : (s2 = W.correctGrammaticalCase(e2, n2), "yy" === t2 && a2 && "годину" === s2 ? e2 + " година" : e2 + " " + s2);
      } }, A = (c.defineLocale("sr-cyrl", { months: "јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"), monthsShort: "јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"), monthsParseExact: true, weekdays: "недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"), weekdaysShort: "нед._пон._уто._сре._чет._пет._суб.".split("_"), weekdaysMin: "не_по_ут_ср_че_пе_су".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "D. M. YYYY.", LL: "D. MMMM YYYY.", LLL: "D. MMMM YYYY. H:mm", LLLL: "dddd, D. MMMM YYYY. H:mm" }, calendar: { sameDay: "[данас у] LT", nextDay: "[сутра у] LT", nextWeek: function() {
        switch (this.day()) {
          case 0:
            return "[у] [недељу] [у] LT";
          case 3:
            return "[у] [среду] [у] LT";
          case 6:
            return "[у] [суботу] [у] LT";
          case 1:
          case 2:
          case 4:
          case 5:
            return "[у] dddd [у] LT";
        }
      }, lastDay: "[јуче у] LT", lastWeek: function() {
        return ["[прошле] [недеље] [у] LT", "[прошлог] [понедељка] [у] LT", "[прошлог] [уторка] [у] LT", "[прошле] [среде] [у] LT", "[прошлог] [четвртка] [у] LT", "[прошлог] [петка] [у] LT", "[прошле] [суботе] [у] LT"][this.day()];
      }, sameElse: "L" }, relativeTime: { future: "за %s", past: "пре %s", s: "неколико секунди", ss: W.translate, m: W.translate, mm: W.translate, h: W.translate, hh: W.translate, d: W.translate, dd: W.translate, M: W.translate, MM: W.translate, y: W.translate, yy: W.translate }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }), { words: { ss: ["sekunda", "sekunde", "sekundi"], m: ["jedan minut", "jednog minuta"], mm: ["minut", "minuta", "minuta"], h: ["jedan sat", "jednog sata"], hh: ["sat", "sata", "sati"], d: ["jedan dan", "jednog dana"], dd: ["dan", "dana", "dana"], M: ["jedan mesec", "jednog meseca"], MM: ["mesec", "meseca", "meseci"], y: ["jednu godinu", "jedne godine"], yy: ["godinu", "godine", "godina"] }, correctGrammaticalCase: function(e2, a2) {
        return 1 <= e2 % 10 && e2 % 10 <= 4 && (e2 % 100 < 10 || 20 <= e2 % 100) ? e2 % 10 == 1 ? a2[0] : a2[1] : a2[2];
      }, translate: function(e2, a2, t2, s2) {
        var n2 = A.words[t2];
        return 1 === t2.length ? "y" === t2 && a2 ? "jedna godina" : s2 || a2 ? n2[0] : n2[1] : (s2 = A.correctGrammaticalCase(e2, n2), "yy" === t2 && a2 && "godinu" === s2 ? e2 + " godina" : e2 + " " + s2);
      } }), Hn = (c.defineLocale("sr", { months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"), monthsParseExact: true, weekdays: "nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sre._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "D. M. YYYY.", LL: "D. MMMM YYYY.", LLL: "D. MMMM YYYY. H:mm", LLLL: "dddd, D. MMMM YYYY. H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function() {
        switch (this.day()) {
          case 0:
            return "[u] [nedelju] [u] LT";
          case 3:
            return "[u] [sredu] [u] LT";
          case 6:
            return "[u] [subotu] [u] LT";
          case 1:
          case 2:
          case 4:
          case 5:
            return "[u] dddd [u] LT";
        }
      }, lastDay: "[juče u] LT", lastWeek: function() {
        return ["[prošle] [nedelje] [u] LT", "[prošlog] [ponedeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"][this.day()];
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "pre %s", s: "nekoliko sekundi", ss: A.translate, m: A.translate, mm: A.translate, h: A.translate, hh: A.translate, d: A.translate, dd: A.translate, M: A.translate, MM: A.translate, y: A.translate, yy: A.translate }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }), c.defineLocale("ss", { months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"), monthsShort: "Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"), weekdays: "Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"), weekdaysShort: "Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"), weekdaysMin: "Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Namuhla nga] LT", nextDay: "[Kusasa nga] LT", nextWeek: "dddd [nga] LT", lastDay: "[Itolo nga] LT", lastWeek: "dddd [leliphelile] [nga] LT", sameElse: "L" }, relativeTime: { future: "nga %s", past: "wenteka nga %s", s: "emizuzwana lomcane", ss: "%d mzuzwana", m: "umzuzu", mm: "%d emizuzu", h: "lihora", hh: "%d emahora", d: "lilanga", dd: "%d emalanga", M: "inyanga", MM: "%d tinyanga", y: "umnyaka", yy: "%d iminyaka" }, meridiemParse: /ekuseni|emini|entsambama|ebusuku/, meridiem: function(e2, a2, t2) {
        return e2 < 11 ? "ekuseni" : e2 < 15 ? "emini" : e2 < 19 ? "entsambama" : "ebusuku";
      }, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "ekuseni" === a2 ? e2 : "emini" === a2 ? 11 <= e2 ? e2 : e2 + 12 : "entsambama" === a2 || "ebusuku" === a2 ? 0 === e2 ? 0 : e2 + 12 : void 0;
      }, dayOfMonthOrdinalParse: /\d{1,2}/, ordinal: "%d", week: { dow: 1, doy: 4 } }), c.defineLocale("sv", { months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"), weekdays: "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"), weekdaysShort: "sön_mån_tis_ons_tor_fre_lör".split("_"), weekdaysMin: "sö_må_ti_on_to_fr_lö".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [kl.] HH:mm", LLLL: "dddd D MMMM YYYY [kl.] HH:mm", lll: "D MMM YYYY HH:mm", llll: "ddd D MMM YYYY HH:mm" }, calendar: { sameDay: "[Idag] LT", nextDay: "[Imorgon] LT", lastDay: "[Igår] LT", nextWeek: "[På] dddd LT", lastWeek: "[I] dddd[s] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "för %s sedan", s: "några sekunder", ss: "%d sekunder", m: "en minut", mm: "%d minuter", h: "en timme", hh: "%d timmar", d: "en dag", dd: "%d dagar", M: "en månad", MM: "%d månader", y: "ett år", yy: "%d år" }, dayOfMonthOrdinalParse: /\d{1,2}(\:e|\:a)/, ordinal: function(e2) {
        var a2 = e2 % 10;
        return e2 + (1 != ~~(e2 % 100 / 10) && (1 == a2 || 2 == a2) ? ":a" : ":e");
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("sw", { months: "Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"), weekdays: "Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"), weekdaysShort: "Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"), weekdaysMin: "J2_J3_J4_J5_Al_Ij_J1".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "hh:mm A", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[leo saa] LT", nextDay: "[kesho saa] LT", nextWeek: "[wiki ijayo] dddd [saat] LT", lastDay: "[jana] LT", lastWeek: "[wiki iliyopita] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s baadaye", past: "tokea %s", s: "hivi punde", ss: "sekunde %d", m: "dakika moja", mm: "dakika %d", h: "saa limoja", hh: "masaa %d", d: "siku moja", dd: "siku %d", M: "mwezi mmoja", MM: "miezi %d", y: "mwaka mmoja", yy: "miaka %d" }, week: { dow: 1, doy: 7 } }), { 1: "௧", 2: "௨", 3: "௩", 4: "௪", 5: "௫", 6: "௬", 7: "௭", 8: "௮", 9: "௯", 0: "௦" }), Sn = { "௧": "1", "௨": "2", "௩": "3", "௪": "4", "௫": "5", "௬": "6", "௭": "7", "௮": "8", "௯": "9", "௦": "0" }, vn = (c.defineLocale("ta", { months: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"), monthsShort: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"), weekdays: "ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"), weekdaysShort: "ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"), weekdaysMin: "ஞா_தி_செ_பு_வி_வெ_ச".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, HH:mm", LLLL: "dddd, D MMMM YYYY, HH:mm" }, calendar: { sameDay: "[இன்று] LT", nextDay: "[நாளை] LT", nextWeek: "dddd, LT", lastDay: "[நேற்று] LT", lastWeek: "[கடந்த வாரம்] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s இல்", past: "%s முன்", s: "ஒரு சில விநாடிகள்", ss: "%d விநாடிகள்", m: "ஒரு நிமிடம்", mm: "%d நிமிடங்கள்", h: "ஒரு மணி நேரம்", hh: "%d மணி நேரம்", d: "ஒரு நாள்", dd: "%d நாட்கள்", M: "ஒரு மாதம்", MM: "%d மாதங்கள்", y: "ஒரு வருடம்", yy: "%d ஆண்டுகள்" }, dayOfMonthOrdinalParse: /\d{1,2}\u0bb5\u0ba4\u0bc1/, ordinal: function(e2) {
        return e2 + "வது";
      }, preparse: function(e2) {
        return e2.replace(/[\u0be7\u0be8\u0be9\u0bea\u0beb\u0bec\u0bed\u0bee\u0bef\u0be6]/g, function(e3) {
          return Sn[e3];
        });
      }, postformat: function(e2) {
        return e2.replace(/\d/g, function(e3) {
          return Hn[e3];
        });
      }, meridiemParse: /\u0baf\u0bbe\u0bae\u0bae\u0bcd|\u0bb5\u0bc8\u0b95\u0bb1\u0bc8|\u0b95\u0bbe\u0bb2\u0bc8|\u0ba8\u0ba3\u0bcd\u0baa\u0b95\u0bb2\u0bcd|\u0b8e\u0bb1\u0bcd\u0baa\u0bbe\u0b9f\u0bc1|\u0bae\u0bbe\u0bb2\u0bc8/, meridiem: function(e2, a2, t2) {
        return e2 < 2 ? " யாமம்" : e2 < 6 ? " வைகறை" : e2 < 10 ? " காலை" : e2 < 14 ? " நண்பகல்" : e2 < 18 ? " எற்பாடு" : e2 < 22 ? " மாலை" : " யாமம்";
      }, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "யாமம்" === a2 ? e2 < 2 ? e2 : e2 + 12 : "வைகறை" === a2 || "காலை" === a2 || "நண்பகல்" === a2 && 10 <= e2 ? e2 : e2 + 12;
      }, week: { dow: 0, doy: 6 } }), c.defineLocale("te", { months: "జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"), monthsShort: "జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"), monthsParseExact: true, weekdays: "ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"), weekdaysShort: "ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"), weekdaysMin: "ఆ_సో_మం_బు_గు_శు_శ".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm", LLLL: "dddd, D MMMM YYYY, A h:mm" }, calendar: { sameDay: "[నేడు] LT", nextDay: "[రేపు] LT", nextWeek: "dddd, LT", lastDay: "[నిన్న] LT", lastWeek: "[గత] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s లో", past: "%s క్రితం", s: "కొన్ని క్షణాలు", ss: "%d సెకన్లు", m: "ఒక నిమిషం", mm: "%d నిమిషాలు", h: "ఒక గంట", hh: "%d గంటలు", d: "ఒక రోజు", dd: "%d రోజులు", M: "ఒక నెల", MM: "%d నెలలు", y: "ఒక సంవత్సరం", yy: "%d సంవత్సరాలు" }, dayOfMonthOrdinalParse: /\d{1,2}\u0c35/, ordinal: "%dవ", meridiemParse: /\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f|\u0c09\u0c26\u0c2f\u0c02|\u0c2e\u0c27\u0c4d\u0c2f\u0c3e\u0c39\u0c4d\u0c28\u0c02|\u0c38\u0c3e\u0c2f\u0c02\u0c24\u0c4d\u0c30\u0c02/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "రాత్రి" === a2 ? e2 < 4 ? e2 : e2 + 12 : "ఉదయం" === a2 ? e2 : "మధ్యాహ్నం" === a2 ? 10 <= e2 ? e2 : e2 + 12 : "సాయంత్రం" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "రాత్రి" : e2 < 10 ? "ఉదయం" : e2 < 17 ? "మధ్యాహ్నం" : e2 < 20 ? "సాయంత్రం" : "రాత్రి";
      }, week: { dow: 0, doy: 6 } }), c.defineLocale("tet", { months: "Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"), monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"), weekdays: "Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"), weekdaysShort: "Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"), weekdaysMin: "Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Ohin iha] LT", nextDay: "[Aban iha] LT", nextWeek: "dddd [iha] LT", lastDay: "[Horiseik iha] LT", lastWeek: "dddd [semana kotuk] [iha] LT", sameElse: "L" }, relativeTime: { future: "iha %s", past: "%s liuba", s: "segundu balun", ss: "segundu %d", m: "minutu ida", mm: "minutu %d", h: "oras ida", hh: "oras %d", d: "loron ida", dd: "loron %d", M: "fulan ida", MM: "fulan %d", y: "tinan ida", yy: "tinan %d" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function(e2) {
        var a2 = e2 % 10;
        return e2 + (1 == ~~(e2 % 100 / 10) ? "th" : 1 == a2 ? "st" : 2 == a2 ? "nd" : 3 == a2 ? "rd" : "th");
      }, week: { dow: 1, doy: 4 } }), { 0: "-ум", 1: "-ум", 2: "-юм", 3: "-юм", 4: "-ум", 5: "-ум", 6: "-ум", 7: "-ум", 8: "-ум", 9: "-ум", 10: "-ум", 12: "-ум", 13: "-ум", 20: "-ум", 30: "-юм", 40: "-ум", 50: "-ум", 60: "-ум", 70: "-ум", 80: "-ум", 90: "-ум", 100: "-ум" }), jn = (c.defineLocale("tg", { months: { format: "январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"), standalone: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_") }, monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"), weekdays: "якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"), weekdaysShort: "яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"), weekdaysMin: "яш_дш_сш_чш_пш_ҷм_шб".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Имрӯз соати] LT", nextDay: "[Фардо соати] LT", lastDay: "[Дирӯз соати] LT", nextWeek: "dddd[и] [ҳафтаи оянда соати] LT", lastWeek: "dddd[и] [ҳафтаи гузашта соати] LT", sameElse: "L" }, relativeTime: { future: "баъди %s", past: "%s пеш", s: "якчанд сония", m: "як дақиқа", mm: "%d дақиқа", h: "як соат", hh: "%d соат", d: "як рӯз", dd: "%d рӯз", M: "як моҳ", MM: "%d моҳ", y: "як сол", yy: "%d сол" }, meridiemParse: /\u0448\u0430\u0431|\u0441\u0443\u0431\u04b3|\u0440\u04ef\u0437|\u0431\u0435\u0433\u043e\u04b3/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "шаб" === a2 ? e2 < 4 ? e2 : e2 + 12 : "субҳ" === a2 ? e2 : "рӯз" === a2 ? 11 <= e2 ? e2 : e2 + 12 : "бегоҳ" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "шаб" : e2 < 11 ? "субҳ" : e2 < 16 ? "рӯз" : e2 < 19 ? "бегоҳ" : "шаб";
      }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0443\u043c|\u044e\u043c)/, ordinal: function(e2) {
        return e2 + (vn[e2] || vn[e2 % 10] || vn[100 <= e2 ? 100 : null]);
      }, week: { dow: 1, doy: 7 } }), c.defineLocale("th", { months: "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"), monthsShort: "ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"), monthsParseExact: true, weekdays: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"), weekdaysShort: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"), weekdaysMin: "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY เวลา H:mm", LLLL: "วันddddที่ D MMMM YYYY เวลา H:mm" }, meridiemParse: /\u0e01\u0e48\u0e2d\u0e19\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07|\u0e2b\u0e25\u0e31\u0e07\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07/, isPM: function(e2) {
        return "หลังเที่ยง" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "ก่อนเที่ยง" : "หลังเที่ยง";
      }, calendar: { sameDay: "[วันนี้ เวลา] LT", nextDay: "[พรุ่งนี้ เวลา] LT", nextWeek: "dddd[หน้า เวลา] LT", lastDay: "[เมื่อวานนี้ เวลา] LT", lastWeek: "[วัน]dddd[ที่แล้ว เวลา] LT", sameElse: "L" }, relativeTime: { future: "อีก %s", past: "%sที่แล้ว", s: "ไม่กี่วินาที", ss: "%d วินาที", m: "1 นาที", mm: "%d นาที", h: "1 ชั่วโมง", hh: "%d ชั่วโมง", d: "1 วัน", dd: "%d วัน", w: "1 สัปดาห์", ww: "%d สัปดาห์", M: "1 เดือน", MM: "%d เดือน", y: "1 ปี", yy: "%d ปี" } }), { 1: "'inji", 5: "'inji", 8: "'inji", 70: "'inji", 80: "'inji", 2: "'nji", 7: "'nji", 20: "'nji", 50: "'nji", 3: "'ünji", 4: "'ünji", 100: "'ünji", 6: "'njy", 9: "'unjy", 10: "'unjy", 30: "'unjy", 60: "'ynjy", 90: "'ynjy" }), xn = (c.defineLocale("tk", { months: "Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"), monthsShort: "Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"), weekdays: "Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"), weekdaysShort: "Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"), weekdaysMin: "Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[bugün sagat] LT", nextDay: "[ertir sagat] LT", nextWeek: "[indiki] dddd [sagat] LT", lastDay: "[düýn] LT", lastWeek: "[geçen] dddd [sagat] LT", sameElse: "L" }, relativeTime: { future: "%s soň", past: "%s öň", s: "birnäçe sekunt", m: "bir minut", mm: "%d minut", h: "bir sagat", hh: "%d sagat", d: "bir gün", dd: "%d gün", M: "bir aý", MM: "%d aý", y: "bir ýyl", yy: "%d ýyl" }, ordinal: function(e2, a2) {
        switch (a2) {
          case "d":
          case "D":
          case "Do":
          case "DD":
            return e2;
          default:
            var t2;
            return 0 === e2 ? e2 + "'unjy" : e2 + (jn[t2 = e2 % 10] || jn[e2 % 100 - t2] || jn[100 <= e2 ? 100 : null]);
        }
      }, week: { dow: 1, doy: 7 } }), c.defineLocale("tl-ph", { months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"), monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"), weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"), weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"), weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "MM/D/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY HH:mm", LLLL: "dddd, MMMM DD, YYYY HH:mm" }, calendar: { sameDay: "LT [ngayong araw]", nextDay: "[Bukas ng] LT", nextWeek: "LT [sa susunod na] dddd", lastDay: "LT [kahapon]", lastWeek: "LT [noong nakaraang] dddd", sameElse: "L" }, relativeTime: { future: "sa loob ng %s", past: "%s ang nakalipas", s: "ilang segundo", ss: "%d segundo", m: "isang minuto", mm: "%d minuto", h: "isang oras", hh: "%d oras", d: "isang araw", dd: "%d araw", M: "isang buwan", MM: "%d buwan", y: "isang taon", yy: "%d taon" }, dayOfMonthOrdinalParse: /\d{1,2}/, ordinal: function(e2) {
        return e2;
      }, week: { dow: 1, doy: 4 } }), "pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_"));
      function Pn(e2, a2, t2, s2) {
        var n2 = function(e3) {
          var a3 = Math.floor(e3 % 1e3 / 100), t3 = Math.floor(e3 % 100 / 10), e3 = e3 % 10, s3 = "";
          0 < a3 && (s3 += xn[a3] + "vatlh");
          0 < t3 && (s3 += ("" !== s3 ? " " : "") + xn[t3] + "maH");
          0 < e3 && (s3 += ("" !== s3 ? " " : "") + xn[e3]);
          return "" === s3 ? "pagh" : s3;
        }(e2);
        switch (t2) {
          case "ss":
            return n2 + " lup";
          case "mm":
            return n2 + " tup";
          case "hh":
            return n2 + " rep";
          case "dd":
            return n2 + " jaj";
          case "MM":
            return n2 + " jar";
          case "yy":
            return n2 + " DIS";
        }
      }
      c.defineLocale("tlh", { months: "tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"), monthsShort: "jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"), monthsParseExact: true, weekdays: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"), weekdaysShort: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"), weekdaysMin: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[DaHjaj] LT", nextDay: "[wa’leS] LT", nextWeek: "LLL", lastDay: "[wa’Hu’] LT", lastWeek: "LLL", sameElse: "L" }, relativeTime: { future: function(e2) {
        var a2 = e2;
        return a2 = -1 !== e2.indexOf("jaj") ? a2.slice(0, -3) + "leS" : -1 !== e2.indexOf("jar") ? a2.slice(0, -3) + "waQ" : -1 !== e2.indexOf("DIS") ? a2.slice(0, -3) + "nem" : a2 + " pIq";
      }, past: function(e2) {
        var a2 = e2;
        return a2 = -1 !== e2.indexOf("jaj") ? a2.slice(0, -3) + "Hu’" : -1 !== e2.indexOf("jar") ? a2.slice(0, -3) + "wen" : -1 !== e2.indexOf("DIS") ? a2.slice(0, -3) + "ben" : a2 + " ret";
      }, s: "puS lup", ss: Pn, m: "wa’ tup", mm: Pn, h: "wa’ rep", hh: Pn, d: "wa’ jaj", dd: Pn, M: "wa’ jar", MM: Pn, y: "wa’ DIS", yy: Pn }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } });
      var On = { 1: "'inci", 5: "'inci", 8: "'inci", 70: "'inci", 80: "'inci", 2: "'nci", 7: "'nci", 20: "'nci", 50: "'nci", 3: "'üncü", 4: "'üncü", 100: "'üncü", 6: "'ncı", 9: "'uncu", 10: "'uncu", 30: "'uncu", 60: "'ıncı", 90: "'ıncı" };
      function Wn(e2, a2, t2, s2) {
        e2 = { s: ["viensas secunds", "'iensas secunds"], ss: [e2 + " secunds", e2 + " secunds"], m: ["'n míut", "'iens míut"], mm: [e2 + " míuts", e2 + " míuts"], h: ["'n þora", "'iensa þora"], hh: [e2 + " þoras", e2 + " þoras"], d: ["'n ziua", "'iensa ziua"], dd: [e2 + " ziuas", e2 + " ziuas"], M: ["'n mes", "'iens mes"], MM: [e2 + " mesen", e2 + " mesen"], y: ["'n ar", "'iens ar"], yy: [e2 + " ars", e2 + " ars"] };
        return s2 || a2 ? e2[t2][0] : e2[t2][1];
      }
      function An(e2, a2, t2) {
        return "m" === t2 ? a2 ? "хвилина" : "хвилину" : "h" === t2 ? a2 ? "година" : "годину" : e2 + " " + (e2 = +e2, a2 = (a2 = { ss: a2 ? "секунда_секунди_секунд" : "секунду_секунди_секунд", mm: a2 ? "хвилина_хвилини_хвилин" : "хвилину_хвилини_хвилин", hh: a2 ? "година_години_годин" : "годину_години_годин", dd: "день_дні_днів", MM: "місяць_місяці_місяців", yy: "рік_роки_років" }[t2]).split("_"), e2 % 10 == 1 && e2 % 100 != 11 ? a2[0] : 2 <= e2 % 10 && e2 % 10 <= 4 && (e2 % 100 < 10 || 20 <= e2 % 100) ? a2[1] : a2[2]);
      }
      function En(e2) {
        return function() {
          return e2 + "о" + (11 === this.hours() ? "б" : "") + "] LT";
        };
      }
      c.defineLocale("tr", { months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"), monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"), weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"), weekdaysShort: "Paz_Pzt_Sal_Çar_Per_Cum_Cmt".split("_"), weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"), meridiem: function(e2, a2, t2) {
        return e2 < 12 ? t2 ? "öö" : "ÖÖ" : t2 ? "ös" : "ÖS";
      }, meridiemParse: /\xf6\xf6|\xd6\xd6|\xf6s|\xd6S/, isPM: function(e2) {
        return "ös" === e2 || "ÖS" === e2;
      }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[bugün saat] LT", nextDay: "[yarın saat] LT", nextWeek: "[gelecek] dddd [saat] LT", lastDay: "[dün] LT", lastWeek: "[geçen] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s sonra", past: "%s önce", s: "birkaç saniye", ss: "%d saniye", m: "bir dakika", mm: "%d dakika", h: "bir saat", hh: "%d saat", d: "bir gün", dd: "%d gün", w: "bir hafta", ww: "%d hafta", M: "bir ay", MM: "%d ay", y: "bir yıl", yy: "%d yıl" }, ordinal: function(e2, a2) {
        switch (a2) {
          case "d":
          case "D":
          case "Do":
          case "DD":
            return e2;
          default:
            var t2;
            return 0 === e2 ? e2 + "'ıncı" : e2 + (On[t2 = e2 % 10] || On[e2 % 100 - t2] || On[100 <= e2 ? 100 : null]);
        }
      }, week: { dow: 1, doy: 7 } }), c.defineLocale("tzl", { months: "Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"), monthsShort: "Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"), weekdays: "Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"), weekdaysShort: "Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"), weekdaysMin: "Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD.MM.YYYY", LL: "D. MMMM [dallas] YYYY", LLL: "D. MMMM [dallas] YYYY HH.mm", LLLL: "dddd, [li] D. MMMM [dallas] YYYY HH.mm" }, meridiemParse: /d\'o|d\'a/i, isPM: function(e2) {
        return "d'o" === e2.toLowerCase();
      }, meridiem: function(e2, a2, t2) {
        return 11 < e2 ? t2 ? "d'o" : "D'O" : t2 ? "d'a" : "D'A";
      }, calendar: { sameDay: "[oxhi à] LT", nextDay: "[demà à] LT", nextWeek: "dddd [à] LT", lastDay: "[ieiri à] LT", lastWeek: "[sür el] dddd [lasteu à] LT", sameElse: "L" }, relativeTime: { future: "osprei %s", past: "ja%s", s: Wn, ss: Wn, m: Wn, mm: Wn, h: Wn, hh: Wn, d: Wn, dd: Wn, M: Wn, MM: Wn, y: Wn, yy: Wn }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), c.defineLocale("tzm-latn", { months: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"), monthsShort: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"), weekdays: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"), weekdaysShort: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"), weekdaysMin: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[asdkh g] LT", nextDay: "[aska g] LT", nextWeek: "dddd [g] LT", lastDay: "[assant g] LT", lastWeek: "dddd [g] LT", sameElse: "L" }, relativeTime: { future: "dadkh s yan %s", past: "yan %s", s: "imik", ss: "%d imik", m: "minuḍ", mm: "%d minuḍ", h: "saɛa", hh: "%d tassaɛin", d: "ass", dd: "%d ossan", M: "ayowr", MM: "%d iyyirn", y: "asgas", yy: "%d isgasn" }, week: { dow: 6, doy: 12 } }), c.defineLocale("tzm", { months: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"), monthsShort: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"), weekdays: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"), weekdaysShort: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"), weekdaysMin: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[ⴰⵙⴷⵅ ⴴ] LT", nextDay: "[ⴰⵙⴽⴰ ⴴ] LT", nextWeek: "dddd [ⴴ] LT", lastDay: "[ⴰⵚⴰⵏⵜ ⴴ] LT", lastWeek: "dddd [ⴴ] LT", sameElse: "L" }, relativeTime: { future: "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s", past: "ⵢⴰⵏ %s", s: "ⵉⵎⵉⴽ", ss: "%d ⵉⵎⵉⴽ", m: "ⵎⵉⵏⵓⴺ", mm: "%d ⵎⵉⵏⵓⴺ", h: "ⵙⴰⵄⴰ", hh: "%d ⵜⴰⵙⵙⴰⵄⵉⵏ", d: "ⴰⵙⵙ", dd: "%d oⵙⵙⴰⵏ", M: "ⴰⵢoⵓⵔ", MM: "%d ⵉⵢⵢⵉⵔⵏ", y: "ⴰⵙⴳⴰⵙ", yy: "%d ⵉⵙⴳⴰⵙⵏ" }, week: { dow: 6, doy: 12 } }), c.defineLocale("ug-cn", { months: "يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"), monthsShort: "يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"), weekdays: "يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"), weekdaysShort: "يە_دۈ_سە_چا_پە_جۈ_شە".split("_"), weekdaysMin: "يە_دۈ_سە_چا_پە_جۈ_شە".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY-يىلىM-ئاينىڭD-كۈنى", LLL: "YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm", LLLL: "dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm" }, meridiemParse: /\u064a\u06d0\u0631\u0649\u0645 \u0643\u06d0\u0686\u06d5|\u0633\u06d5\u06be\u06d5\u0631|\u0686\u06c8\u0634\u062a\u0649\u0646 \u0628\u06c7\u0631\u06c7\u0646|\u0686\u06c8\u0634|\u0686\u06c8\u0634\u062a\u0649\u0646 \u0643\u06d0\u064a\u0649\u0646|\u0643\u06d5\u0686/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "يېرىم كېچە" === a2 || "سەھەر" === a2 || "چۈشتىن بۇرۇن" === a2 || "چۈشتىن كېيىن" !== a2 && "كەچ" !== a2 && 11 <= e2 ? e2 : e2 + 12;
      }, meridiem: function(e2, a2, t2) {
        e2 = 100 * e2 + a2;
        return e2 < 600 ? "يېرىم كېچە" : e2 < 900 ? "سەھەر" : e2 < 1130 ? "چۈشتىن بۇرۇن" : e2 < 1230 ? "چۈش" : e2 < 1800 ? "چۈشتىن كېيىن" : "كەچ";
      }, calendar: { sameDay: "[بۈگۈن سائەت] LT", nextDay: "[ئەتە سائەت] LT", nextWeek: "[كېلەركى] dddd [سائەت] LT", lastDay: "[تۆنۈگۈن] LT", lastWeek: "[ئالدىنقى] dddd [سائەت] LT", sameElse: "L" }, relativeTime: { future: "%s كېيىن", past: "%s بۇرۇن", s: "نەچچە سېكونت", ss: "%d سېكونت", m: "بىر مىنۇت", mm: "%d مىنۇت", h: "بىر سائەت", hh: "%d سائەت", d: "بىر كۈن", dd: "%d كۈن", M: "بىر ئاي", MM: "%d ئاي", y: "بىر يىل", yy: "%d يىل" }, dayOfMonthOrdinalParse: /\d{1,2}(-\u0643\u06c8\u0646\u0649|-\u0626\u0627\u064a|-\u06be\u06d5\u067e\u062a\u06d5)/, ordinal: function(e2, a2) {
        switch (a2) {
          case "d":
          case "D":
          case "DDD":
            return e2 + "-كۈنى";
          case "w":
          case "W":
            return e2 + "-ھەپتە";
          default:
            return e2;
        }
      }, preparse: function(e2) {
        return e2.replace(/\u060c/g, ",");
      }, postformat: function(e2) {
        return e2.replace(/,/g, "،");
      }, week: { dow: 1, doy: 7 } }), c.defineLocale("uk", { months: { format: "січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"), standalone: "січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_") }, monthsShort: "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"), weekdays: function(e2, a2) {
        var t2 = { nominative: "неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"), accusative: "неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"), genitive: "неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_") };
        return true === e2 ? t2.nominative.slice(1, 7).concat(t2.nominative.slice(0, 1)) : e2 ? t2[/(\[[\u0412\u0432\u0423\u0443]\]) ?dddd/.test(a2) ? "accusative" : /\[?(?:\u043c\u0438\u043d\u0443\u043b\u043e\u0457|\u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u0457)? ?\] ?dddd/.test(a2) ? "genitive" : "nominative"][e2.day()] : t2.nominative;
      }, weekdaysShort: "нд_пн_вт_ср_чт_пт_сб".split("_"), weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY р.", LLL: "D MMMM YYYY р., HH:mm", LLLL: "dddd, D MMMM YYYY р., HH:mm" }, calendar: { sameDay: En("[Сьогодні "), nextDay: En("[Завтра "), lastDay: En("[Вчора "), nextWeek: En("[У] dddd ["), lastWeek: function() {
        switch (this.day()) {
          case 0:
          case 3:
          case 5:
          case 6:
            return En("[Минулої] dddd [").call(this);
          case 1:
          case 2:
          case 4:
            return En("[Минулого] dddd [").call(this);
        }
      }, sameElse: "L" }, relativeTime: { future: "за %s", past: "%s тому", s: "декілька секунд", ss: An, m: An, mm: An, h: "годину", hh: An, d: "день", dd: An, M: "місяць", MM: An, y: "рік", yy: An }, meridiemParse: /\u043d\u043e\u0447\u0456|\u0440\u0430\u043d\u043a\u0443|\u0434\u043d\u044f|\u0432\u0435\u0447\u043e\u0440\u0430/, isPM: function(e2) {
        return /^(\u0434\u043d\u044f|\u0432\u0435\u0447\u043e\u0440\u0430)$/.test(e2);
      }, meridiem: function(e2, a2, t2) {
        return e2 < 4 ? "ночі" : e2 < 12 ? "ранку" : e2 < 17 ? "дня" : "вечора";
      }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0439|\u0433\u043e)/, ordinal: function(e2, a2) {
        switch (a2) {
          case "M":
          case "d":
          case "DDD":
          case "w":
          case "W":
            return e2 + "-й";
          case "D":
            return e2 + "-го";
          default:
            return e2;
        }
      }, week: { dow: 1, doy: 7 } });
      i = ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر"], jt = ["اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"];
      return c.defineLocale("ur", { months: i, monthsShort: i, weekdays: jt, weekdaysShort: jt, weekdaysMin: jt, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd، D MMMM YYYY HH:mm" }, meridiemParse: /\u0635\u0628\u062d|\u0634\u0627\u0645/, isPM: function(e2) {
        return "شام" === e2;
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? "صبح" : "شام";
      }, calendar: { sameDay: "[آج بوقت] LT", nextDay: "[کل بوقت] LT", nextWeek: "dddd [بوقت] LT", lastDay: "[گذشتہ روز بوقت] LT", lastWeek: "[گذشتہ] dddd [بوقت] LT", sameElse: "L" }, relativeTime: { future: "%s بعد", past: "%s قبل", s: "چند سیکنڈ", ss: "%d سیکنڈ", m: "ایک منٹ", mm: "%d منٹ", h: "ایک گھنٹہ", hh: "%d گھنٹے", d: "ایک دن", dd: "%d دن", M: "ایک ماہ", MM: "%d ماہ", y: "ایک سال", yy: "%d سال" }, preparse: function(e2) {
        return e2.replace(/\u060c/g, ",");
      }, postformat: function(e2) {
        return e2.replace(/,/g, "،");
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("uz-latn", { months: "Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"), monthsShort: "Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"), weekdays: "Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"), weekdaysShort: "Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"), weekdaysMin: "Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "D MMMM YYYY, dddd HH:mm" }, calendar: { sameDay: "[Bugun soat] LT [da]", nextDay: "[Ertaga] LT [da]", nextWeek: "dddd [kuni soat] LT [da]", lastDay: "[Kecha soat] LT [da]", lastWeek: "[O'tgan] dddd [kuni soat] LT [da]", sameElse: "L" }, relativeTime: { future: "Yaqin %s ichida", past: "Bir necha %s oldin", s: "soniya", ss: "%d soniya", m: "bir daqiqa", mm: "%d daqiqa", h: "bir soat", hh: "%d soat", d: "bir kun", dd: "%d kun", M: "bir oy", MM: "%d oy", y: "bir yil", yy: "%d yil" }, week: { dow: 1, doy: 7 } }), c.defineLocale("uz", { months: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"), monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"), weekdays: "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"), weekdaysShort: "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"), weekdaysMin: "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "D MMMM YYYY, dddd HH:mm" }, calendar: { sameDay: "[Бугун соат] LT [да]", nextDay: "[Эртага] LT [да]", nextWeek: "dddd [куни соат] LT [да]", lastDay: "[Кеча соат] LT [да]", lastWeek: "[Утган] dddd [куни соат] LT [да]", sameElse: "L" }, relativeTime: { future: "Якин %s ичида", past: "Бир неча %s олдин", s: "фурсат", ss: "%d фурсат", m: "бир дакика", mm: "%d дакика", h: "бир соат", hh: "%d соат", d: "бир кун", dd: "%d кун", M: "бир ой", MM: "%d ой", y: "бир йил", yy: "%d йил" }, week: { dow: 1, doy: 7 } }), c.defineLocale("vi", { months: "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"), monthsShort: "Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"), monthsParseExact: true, weekdays: "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"), weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"), weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"), weekdaysParseExact: true, meridiemParse: /sa|ch/i, isPM: function(e2) {
        return /^ch$/i.test(e2);
      }, meridiem: function(e2, a2, t2) {
        return e2 < 12 ? t2 ? "sa" : "SA" : t2 ? "ch" : "CH";
      }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM [năm] YYYY", LLL: "D MMMM [năm] YYYY HH:mm", LLLL: "dddd, D MMMM [năm] YYYY HH:mm", l: "DD/M/YYYY", ll: "D MMM YYYY", lll: "D MMM YYYY HH:mm", llll: "ddd, D MMM YYYY HH:mm" }, calendar: { sameDay: "[Hôm nay lúc] LT", nextDay: "[Ngày mai lúc] LT", nextWeek: "dddd [tuần tới lúc] LT", lastDay: "[Hôm qua lúc] LT", lastWeek: "dddd [tuần trước lúc] LT", sameElse: "L" }, relativeTime: { future: "%s tới", past: "%s trước", s: "vài giây", ss: "%d giây", m: "một phút", mm: "%d phút", h: "một giờ", hh: "%d giờ", d: "một ngày", dd: "%d ngày", w: "một tuần", ww: "%d tuần", M: "một tháng", MM: "%d tháng", y: "một năm", yy: "%d năm" }, dayOfMonthOrdinalParse: /\d{1,2}/, ordinal: function(e2) {
        return e2;
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("x-pseudo", { months: "J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"), monthsShort: "J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"), monthsParseExact: true, weekdays: "S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"), weekdaysShort: "S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"), weekdaysMin: "S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"), weekdaysParseExact: true, longDateFormat: { LT: "HH:mm", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[T~ódá~ý át] LT", nextDay: "[T~ómó~rró~w át] LT", nextWeek: "dddd [át] LT", lastDay: "[Ý~ést~érdá~ý át] LT", lastWeek: "[L~ást] dddd [át] LT", sameElse: "L" }, relativeTime: { future: "í~ñ %s", past: "%s á~gó", s: "á ~féw ~sécó~ñds", ss: "%d s~écóñ~ds", m: "á ~míñ~úté", mm: "%d m~íñú~tés", h: "á~ñ hó~úr", hh: "%d h~óúrs", d: "á ~dáý", dd: "%d d~áýs", M: "á ~móñ~th", MM: "%d m~óñt~hs", y: "á ~ýéár", yy: "%d ý~éárs" }, dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/, ordinal: function(e2) {
        var a2 = e2 % 10;
        return e2 + (1 == ~~(e2 % 100 / 10) ? "th" : 1 == a2 ? "st" : 2 == a2 ? "nd" : 3 == a2 ? "rd" : "th");
      }, week: { dow: 1, doy: 4 } }), c.defineLocale("yo", { months: "Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"), monthsShort: "Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"), weekdays: "Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"), weekdaysShort: "Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"), weekdaysMin: "Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Ònì ni] LT", nextDay: "[Ọ̀la ni] LT", nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT", lastDay: "[Àna ni] LT", lastWeek: "dddd [Ọsẹ̀ tólọ́] [ni] LT", sameElse: "L" }, relativeTime: { future: "ní %s", past: "%s kọjá", s: "ìsẹjú aayá die", ss: "aayá %d", m: "ìsẹjú kan", mm: "ìsẹjú %d", h: "wákati kan", hh: "wákati %d", d: "ọjọ́ kan", dd: "ọjọ́ %d", M: "osù kan", MM: "osù %d", y: "ọdún kan", yy: "ọdún %d" }, dayOfMonthOrdinalParse: /\u1ecdj\u1ecd\u0301\s\d{1,2}/, ordinal: "ọjọ́ %d", week: { dow: 1, doy: 4 } }), c.defineLocale("zh-cn", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日Ah点mm分", LLLL: "YYYY年M月D日ddddAh点mm分", l: "YYYY/M/D", ll: "YYYY年M月D日", lll: "YYYY年M月D日 HH:mm", llll: "YYYY年M月D日dddd HH:mm" }, meridiemParse: /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "凌晨" === a2 || "早上" === a2 || "上午" === a2 || "下午" !== a2 && "晚上" !== a2 && 11 <= e2 ? e2 : e2 + 12;
      }, meridiem: function(e2, a2, t2) {
        e2 = 100 * e2 + a2;
        return e2 < 600 ? "凌晨" : e2 < 900 ? "早上" : e2 < 1130 ? "上午" : e2 < 1230 ? "中午" : e2 < 1800 ? "下午" : "晚上";
      }, calendar: { sameDay: "[今天]LT", nextDay: "[明天]LT", nextWeek: function(e2) {
        return e2.week() !== this.week() ? "[下]dddLT" : "[本]dddLT";
      }, lastDay: "[昨天]LT", lastWeek: function(e2) {
        return this.week() !== e2.week() ? "[上]dddLT" : "[本]dddLT";
      }, sameElse: "L" }, dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u5468)/, ordinal: function(e2, a2) {
        switch (a2) {
          case "d":
          case "D":
          case "DDD":
            return e2 + "日";
          case "M":
            return e2 + "月";
          case "w":
          case "W":
            return e2 + "周";
          default:
            return e2;
        }
      }, relativeTime: { future: "%s后", past: "%s前", s: "几秒", ss: "%d 秒", m: "1 分钟", mm: "%d 分钟", h: "1 小时", hh: "%d 小时", d: "1 天", dd: "%d 天", w: "1 周", ww: "%d 周", M: "1 个月", MM: "%d 个月", y: "1 年", yy: "%d 年" }, week: { dow: 1, doy: 4 } }), c.defineLocale("zh-hk", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日 HH:mm", LLLL: "YYYY年M月D日dddd HH:mm", l: "YYYY/M/D", ll: "YYYY年M月D日", lll: "YYYY年M月D日 HH:mm", llll: "YYYY年M月D日dddd HH:mm" }, meridiemParse: /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "凌晨" === a2 || "早上" === a2 || "上午" === a2 ? e2 : "中午" === a2 ? 11 <= e2 ? e2 : e2 + 12 : "下午" === a2 || "晚上" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        e2 = 100 * e2 + a2;
        return e2 < 600 ? "凌晨" : e2 < 900 ? "早上" : e2 < 1200 ? "上午" : 1200 === e2 ? "中午" : e2 < 1800 ? "下午" : "晚上";
      }, calendar: { sameDay: "[今天]LT", nextDay: "[明天]LT", nextWeek: "[下]ddddLT", lastDay: "[昨天]LT", lastWeek: "[上]ddddLT", sameElse: "L" }, dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u9031)/, ordinal: function(e2, a2) {
        switch (a2) {
          case "d":
          case "D":
          case "DDD":
            return e2 + "日";
          case "M":
            return e2 + "月";
          case "w":
          case "W":
            return e2 + "週";
          default:
            return e2;
        }
      }, relativeTime: { future: "%s後", past: "%s前", s: "幾秒", ss: "%d 秒", m: "1 分鐘", mm: "%d 分鐘", h: "1 小時", hh: "%d 小時", d: "1 天", dd: "%d 天", M: "1 個月", MM: "%d 個月", y: "1 年", yy: "%d 年" } }), c.defineLocale("zh-mo", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "YYYY年M月D日", LLL: "YYYY年M月D日 HH:mm", LLLL: "YYYY年M月D日dddd HH:mm", l: "D/M/YYYY", ll: "YYYY年M月D日", lll: "YYYY年M月D日 HH:mm", llll: "YYYY年M月D日dddd HH:mm" }, meridiemParse: /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "凌晨" === a2 || "早上" === a2 || "上午" === a2 ? e2 : "中午" === a2 ? 11 <= e2 ? e2 : e2 + 12 : "下午" === a2 || "晚上" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        e2 = 100 * e2 + a2;
        return e2 < 600 ? "凌晨" : e2 < 900 ? "早上" : e2 < 1130 ? "上午" : e2 < 1230 ? "中午" : e2 < 1800 ? "下午" : "晚上";
      }, calendar: { sameDay: "[今天] LT", nextDay: "[明天] LT", nextWeek: "[下]dddd LT", lastDay: "[昨天] LT", lastWeek: "[上]dddd LT", sameElse: "L" }, dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u9031)/, ordinal: function(e2, a2) {
        switch (a2) {
          case "d":
          case "D":
          case "DDD":
            return e2 + "日";
          case "M":
            return e2 + "月";
          case "w":
          case "W":
            return e2 + "週";
          default:
            return e2;
        }
      }, relativeTime: { future: "%s內", past: "%s前", s: "幾秒", ss: "%d 秒", m: "1 分鐘", mm: "%d 分鐘", h: "1 小時", hh: "%d 小時", d: "1 天", dd: "%d 天", M: "1 個月", MM: "%d 個月", y: "1 年", yy: "%d 年" } }), c.defineLocale("zh-tw", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日 HH:mm", LLLL: "YYYY年M月D日dddd HH:mm", l: "YYYY/M/D", ll: "YYYY年M月D日", lll: "YYYY年M月D日 HH:mm", llll: "YYYY年M月D日dddd HH:mm" }, meridiemParse: /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/, meridiemHour: function(e2, a2) {
        return 12 === e2 && (e2 = 0), "凌晨" === a2 || "早上" === a2 || "上午" === a2 ? e2 : "中午" === a2 ? 11 <= e2 ? e2 : e2 + 12 : "下午" === a2 || "晚上" === a2 ? e2 + 12 : void 0;
      }, meridiem: function(e2, a2, t2) {
        e2 = 100 * e2 + a2;
        return e2 < 600 ? "凌晨" : e2 < 900 ? "早上" : e2 < 1130 ? "上午" : e2 < 1230 ? "中午" : e2 < 1800 ? "下午" : "晚上";
      }, calendar: { sameDay: "[今天] LT", nextDay: "[明天] LT", nextWeek: "[下]dddd LT", lastDay: "[昨天] LT", lastWeek: "[上]dddd LT", sameElse: "L" }, dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u9031)/, ordinal: function(e2, a2) {
        switch (a2) {
          case "d":
          case "D":
          case "DDD":
            return e2 + "日";
          case "M":
            return e2 + "月";
          case "w":
          case "W":
            return e2 + "週";
          default:
            return e2;
        }
      }, relativeTime: { future: "%s後", past: "%s前", s: "幾秒", ss: "%d 秒", m: "1 分鐘", mm: "%d 分鐘", h: "1 小時", hh: "%d 小時", d: "1 天", dd: "%d 天", M: "1 個月", MM: "%d 個月", y: "1 年", yy: "%d 年" } }), c.locale("en"), c;
    });
  }
});

// node_modules/moment-with-locales-es6/index.js
var require_moment_with_locales_es6 = __commonJS({
  "node_modules/moment-with-locales-es6/index.js"(exports) {
    var moment = require_moment_with_locales_min();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = moment;
  }
});
export default require_moment_with_locales_es6();
//# sourceMappingURL=moment-with-locales-es6.js.map
